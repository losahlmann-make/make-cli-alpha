#!/usr/bin/env node
var __getOwnPropNames = Object.getOwnPropertyNames;
var __commonJS = (cb, mod) => function __require() {
  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};

// elm.js
var require_elm = __commonJS({
  "elm.js"(exports) {
    (function(scope) {
      "use strict";
      function F(arity, fun, wrapper) {
        wrapper.a = arity;
        wrapper.f = fun;
        return wrapper;
      }
      function F2(fun) {
        return F(2, fun, function(a) {
          return function(b) {
            return fun(a, b);
          };
        });
      }
      function F3(fun) {
        return F(3, fun, function(a) {
          return function(b) {
            return function(c) {
              return fun(a, b, c);
            };
          };
        });
      }
      function F4(fun) {
        return F(4, fun, function(a) {
          return function(b) {
            return function(c) {
              return function(d) {
                return fun(a, b, c, d);
              };
            };
          };
        });
      }
      function F5(fun) {
        return F(5, fun, function(a) {
          return function(b) {
            return function(c) {
              return function(d) {
                return function(e) {
                  return fun(a, b, c, d, e);
                };
              };
            };
          };
        });
      }
      function F6(fun) {
        return F(6, fun, function(a) {
          return function(b) {
            return function(c) {
              return function(d) {
                return function(e) {
                  return function(f) {
                    return fun(a, b, c, d, e, f);
                  };
                };
              };
            };
          };
        });
      }
      function F7(fun) {
        return F(7, fun, function(a) {
          return function(b) {
            return function(c) {
              return function(d) {
                return function(e) {
                  return function(f) {
                    return function(g) {
                      return fun(a, b, c, d, e, f, g);
                    };
                  };
                };
              };
            };
          };
        });
      }
      function F8(fun) {
        return F(8, fun, function(a) {
          return function(b) {
            return function(c) {
              return function(d) {
                return function(e) {
                  return function(f) {
                    return function(g) {
                      return function(h) {
                        return fun(a, b, c, d, e, f, g, h);
                      };
                    };
                  };
                };
              };
            };
          };
        });
      }
      function F9(fun) {
        return F(9, fun, function(a) {
          return function(b) {
            return function(c) {
              return function(d) {
                return function(e) {
                  return function(f) {
                    return function(g) {
                      return function(h) {
                        return function(i) {
                          return fun(a, b, c, d, e, f, g, h, i);
                        };
                      };
                    };
                  };
                };
              };
            };
          };
        });
      }
      function A2(fun, a, b) {
        return fun.a === 2 ? fun.f(a, b) : fun(a)(b);
      }
      function A3(fun, a, b, c) {
        return fun.a === 3 ? fun.f(a, b, c) : fun(a)(b)(c);
      }
      function A4(fun, a, b, c, d) {
        return fun.a === 4 ? fun.f(a, b, c, d) : fun(a)(b)(c)(d);
      }
      function A5(fun, a, b, c, d, e) {
        return fun.a === 5 ? fun.f(a, b, c, d, e) : fun(a)(b)(c)(d)(e);
      }
      function A6(fun, a, b, c, d, e, f) {
        return fun.a === 6 ? fun.f(a, b, c, d, e, f) : fun(a)(b)(c)(d)(e)(f);
      }
      function A7(fun, a, b, c, d, e, f, g) {
        return fun.a === 7 ? fun.f(a, b, c, d, e, f, g) : fun(a)(b)(c)(d)(e)(f)(g);
      }
      function A8(fun, a, b, c, d, e, f, g, h) {
        return fun.a === 8 ? fun.f(a, b, c, d, e, f, g, h) : fun(a)(b)(c)(d)(e)(f)(g)(h);
      }
      function A9(fun, a, b, c, d, e, f, g, h, i) {
        return fun.a === 9 ? fun.f(a, b, c, d, e, f, g, h, i) : fun(a)(b)(c)(d)(e)(f)(g)(h)(i);
      }
      var _JsArray_empty = [];
      function _JsArray_singleton(value) {
        return [value];
      }
      function _JsArray_length(array) {
        return array.length;
      }
      var _JsArray_initialize = F3(function(size, offset, func) {
        var result = new Array(size);
        for (var i = 0; i < size; i++) {
          result[i] = func(offset + i);
        }
        return result;
      });
      var _JsArray_initializeFromList = F2(function(max, ls) {
        var result = new Array(max);
        for (var i = 0; i < max && ls.b; i++) {
          result[i] = ls.a;
          ls = ls.b;
        }
        result.length = i;
        return _Utils_Tuple2(result, ls);
      });
      var _JsArray_unsafeGet = F2(function(index, array) {
        return array[index];
      });
      var _JsArray_unsafeSet = F3(function(index, value, array) {
        var length = array.length;
        var result = new Array(length);
        for (var i = 0; i < length; i++) {
          result[i] = array[i];
        }
        result[index] = value;
        return result;
      });
      var _JsArray_push = F2(function(value, array) {
        var length = array.length;
        var result = new Array(length + 1);
        for (var i = 0; i < length; i++) {
          result[i] = array[i];
        }
        result[length] = value;
        return result;
      });
      var _JsArray_foldl = F3(function(func, acc, array) {
        var length = array.length;
        for (var i = 0; i < length; i++) {
          acc = A2(func, array[i], acc);
        }
        return acc;
      });
      var _JsArray_foldr = F3(function(func, acc, array) {
        for (var i = array.length - 1; i >= 0; i--) {
          acc = A2(func, array[i], acc);
        }
        return acc;
      });
      var _JsArray_map = F2(function(func, array) {
        var length = array.length;
        var result = new Array(length);
        for (var i = 0; i < length; i++) {
          result[i] = func(array[i]);
        }
        return result;
      });
      var _JsArray_indexedMap = F3(function(func, offset, array) {
        var length = array.length;
        var result = new Array(length);
        for (var i = 0; i < length; i++) {
          result[i] = A2(func, offset + i, array[i]);
        }
        return result;
      });
      var _JsArray_slice = F3(function(from, to, array) {
        return array.slice(from, to);
      });
      var _JsArray_appendN = F3(function(n, dest, source) {
        var destLen = dest.length;
        var itemsToCopy = n - destLen;
        if (itemsToCopy > source.length) {
          itemsToCopy = source.length;
        }
        var size = destLen + itemsToCopy;
        var result = new Array(size);
        for (var i = 0; i < destLen; i++) {
          result[i] = dest[i];
        }
        for (var i = 0; i < itemsToCopy; i++) {
          result[i + destLen] = source[i];
        }
        return result;
      });
      var _Debug_log = F2(function(tag, value) {
        return value;
      });
      var _Debug_log_UNUSED = F2(function(tag, value) {
        console.log(tag + ": " + _Debug_toString(value));
        return value;
      });
      function _Debug_todo(moduleName, region) {
        return function(message) {
          _Debug_crash(8, moduleName, region, message);
        };
      }
      function _Debug_todoCase(moduleName, region, value) {
        return function(message) {
          _Debug_crash(9, moduleName, region, value, message);
        };
      }
      function _Debug_toString(value) {
        return "<internals>";
      }
      function _Debug_toString_UNUSED(value) {
        return _Debug_toAnsiString(false, value);
      }
      function _Debug_toAnsiString(ansi, value) {
        if (typeof value === "function") {
          return _Debug_internalColor(ansi, "<function>");
        }
        if (typeof value === "boolean") {
          return _Debug_ctorColor(ansi, value ? "True" : "False");
        }
        if (typeof value === "number") {
          return _Debug_numberColor(ansi, value + "");
        }
        if (value instanceof String) {
          return _Debug_charColor(ansi, "'" + _Debug_addSlashes(value, true) + "'");
        }
        if (typeof value === "string") {
          return _Debug_stringColor(ansi, '"' + _Debug_addSlashes(value, false) + '"');
        }
        if (typeof value === "object" && "$" in value) {
          var tag = value.$;
          if (typeof tag === "number") {
            return _Debug_internalColor(ansi, "<internals>");
          }
          if (tag[0] === "#") {
            var output = [];
            for (var k in value) {
              if (k === "$")
                continue;
              output.push(_Debug_toAnsiString(ansi, value[k]));
            }
            return "(" + output.join(",") + ")";
          }
          if (tag === "Set_elm_builtin") {
            return _Debug_ctorColor(ansi, "Set") + _Debug_fadeColor(ansi, ".fromList") + " " + _Debug_toAnsiString(ansi, $elm$core$Set$toList(value));
          }
          if (tag === "RBNode_elm_builtin" || tag === "RBEmpty_elm_builtin") {
            return _Debug_ctorColor(ansi, "Dict") + _Debug_fadeColor(ansi, ".fromList") + " " + _Debug_toAnsiString(ansi, $elm$core$Dict$toList(value));
          }
          if (tag === "Array_elm_builtin") {
            return _Debug_ctorColor(ansi, "Array") + _Debug_fadeColor(ansi, ".fromList") + " " + _Debug_toAnsiString(ansi, $elm$core$Array$toList(value));
          }
          if (tag === "::" || tag === "[]") {
            var output = "[";
            value.b && (output += _Debug_toAnsiString(ansi, value.a), value = value.b);
            for (; value.b; value = value.b) {
              output += "," + _Debug_toAnsiString(ansi, value.a);
            }
            return output + "]";
          }
          var output = "";
          for (var i in value) {
            if (i === "$")
              continue;
            var str = _Debug_toAnsiString(ansi, value[i]);
            var c0 = str[0];
            var parenless = c0 === "{" || c0 === "(" || c0 === "[" || c0 === "<" || c0 === '"' || str.indexOf(" ") < 0;
            output += " " + (parenless ? str : "(" + str + ")");
          }
          return _Debug_ctorColor(ansi, tag) + output;
        }
        if (typeof DataView === "function" && value instanceof DataView) {
          return _Debug_stringColor(ansi, "<" + value.byteLength + " bytes>");
        }
        if (typeof File !== "undefined" && value instanceof File) {
          return _Debug_internalColor(ansi, "<" + value.name + ">");
        }
        if (typeof value === "object") {
          var output = [];
          for (var key in value) {
            var field = key[0] === "_" ? key.slice(1) : key;
            output.push(_Debug_fadeColor(ansi, field) + " = " + _Debug_toAnsiString(ansi, value[key]));
          }
          if (output.length === 0) {
            return "{}";
          }
          return "{ " + output.join(", ") + " }";
        }
        return _Debug_internalColor(ansi, "<internals>");
      }
      function _Debug_addSlashes(str, isChar) {
        var s = str.replace(/\\/g, "\\\\").replace(/\n/g, "\\n").replace(/\t/g, "\\t").replace(/\r/g, "\\r").replace(/\v/g, "\\v").replace(/\0/g, "\\0");
        if (isChar) {
          return s.replace(/\'/g, "\\'");
        } else {
          return s.replace(/\"/g, '\\"');
        }
      }
      function _Debug_ctorColor(ansi, string) {
        return ansi ? "\x1B[96m" + string + "\x1B[0m" : string;
      }
      function _Debug_numberColor(ansi, string) {
        return ansi ? "\x1B[95m" + string + "\x1B[0m" : string;
      }
      function _Debug_stringColor(ansi, string) {
        return ansi ? "\x1B[93m" + string + "\x1B[0m" : string;
      }
      function _Debug_charColor(ansi, string) {
        return ansi ? "\x1B[92m" + string + "\x1B[0m" : string;
      }
      function _Debug_fadeColor(ansi, string) {
        return ansi ? "\x1B[37m" + string + "\x1B[0m" : string;
      }
      function _Debug_internalColor(ansi, string) {
        return ansi ? "\x1B[36m" + string + "\x1B[0m" : string;
      }
      function _Debug_toHexDigit(n) {
        return String.fromCharCode(n < 10 ? 48 + n : 55 + n);
      }
      function _Debug_crash(identifier) {
        throw new Error("https://github.com/elm/core/blob/1.0.0/hints/" + identifier + ".md");
      }
      function _Debug_crash_UNUSED(identifier, fact1, fact2, fact3, fact4) {
        switch (identifier) {
          case 0:
            throw new Error('What node should I take over? In JavaScript I need something like:\n\n    Elm.Main.init({\n        node: document.getElementById("elm-node")\n    })\n\nYou need to do this with any Browser.sandbox or Browser.element program.');
          case 1:
            throw new Error("Browser.application programs cannot handle URLs like this:\n\n    " + document.location.href + "\n\nWhat is the root? The root of your file system? Try looking at this program with `elm reactor` or some other server.");
          case 2:
            var jsonErrorString = fact1;
            throw new Error("Problem with the flags given to your Elm program on initialization.\n\n" + jsonErrorString);
          case 3:
            var portName = fact1;
            throw new Error("There can only be one port named `" + portName + "`, but your program has multiple.");
          case 4:
            var portName = fact1;
            var problem = fact2;
            throw new Error("Trying to send an unexpected type of value through port `" + portName + "`:\n" + problem);
          case 5:
            throw new Error('Trying to use `(==)` on functions.\nThere is no way to know if functions are "the same" in the Elm sense.\nRead more about this at https://package.elm-lang.org/packages/elm/core/latest/Basics#== which describes why it is this way and what the better version will look like.');
          case 6:
            var moduleName = fact1;
            throw new Error("Your page is loading multiple Elm scripts with a module named " + moduleName + ". Maybe a duplicate script is getting loaded accidentally? If not, rename one of them so I know which is which!");
          case 8:
            var moduleName = fact1;
            var region = fact2;
            var message = fact3;
            throw new Error("TODO in module `" + moduleName + "` " + _Debug_regionToString(region) + "\n\n" + message);
          case 9:
            var moduleName = fact1;
            var region = fact2;
            var value = fact3;
            var message = fact4;
            throw new Error(
              "TODO in module `" + moduleName + "` from the `case` expression " + _Debug_regionToString(region) + "\n\nIt received the following value:\n\n    " + _Debug_toString(value).replace("\n", "\n    ") + "\n\nBut the branch that handles it says:\n\n    " + message.replace("\n", "\n    ")
            );
          case 10:
            throw new Error("Bug in https://github.com/elm/virtual-dom/issues");
          case 11:
            throw new Error("Cannot perform mod 0. Division by zero error.");
        }
      }
      function _Debug_regionToString(region) {
        if (region.a8.ae === region.by.ae) {
          return "on line " + region.a8.ae;
        }
        return "on lines " + region.a8.ae + " through " + region.by.ae;
      }
      function _Utils_eq(x, y) {
        for (var pair, stack = [], isEqual = _Utils_eqHelp(x, y, 0, stack); isEqual && (pair = stack.pop()); isEqual = _Utils_eqHelp(pair.a, pair.b, 0, stack)) {
        }
        return isEqual;
      }
      function _Utils_eqHelp(x, y, depth, stack) {
        if (x === y) {
          return true;
        }
        if (typeof x !== "object" || x === null || y === null) {
          typeof x === "function" && _Debug_crash(5);
          return false;
        }
        if (depth > 100) {
          stack.push(_Utils_Tuple2(x, y));
          return true;
        }
        if (x.$ < 0) {
          x = $elm$core$Dict$toList(x);
          y = $elm$core$Dict$toList(y);
        }
        for (var key in x) {
          if (!_Utils_eqHelp(x[key], y[key], depth + 1, stack)) {
            return false;
          }
        }
        return true;
      }
      var _Utils_equal = F2(_Utils_eq);
      var _Utils_notEqual = F2(function(a, b) {
        return !_Utils_eq(a, b);
      });
      function _Utils_cmp(x, y, ord) {
        if (typeof x !== "object") {
          return x === y ? (
            /*EQ*/
            0
          ) : x < y ? (
            /*LT*/
            -1
          ) : (
            /*GT*/
            1
          );
        }
        if (typeof x.$ === "undefined") {
          return (ord = _Utils_cmp(x.a, y.a)) ? ord : (ord = _Utils_cmp(x.b, y.b)) ? ord : _Utils_cmp(x.c, y.c);
        }
        for (; x.b && y.b && !(ord = _Utils_cmp(x.a, y.a)); x = x.b, y = y.b) {
        }
        return ord || (x.b ? (
          /*GT*/
          1
        ) : y.b ? (
          /*LT*/
          -1
        ) : (
          /*EQ*/
          0
        ));
      }
      var _Utils_lt = F2(function(a, b) {
        return _Utils_cmp(a, b) < 0;
      });
      var _Utils_le = F2(function(a, b) {
        return _Utils_cmp(a, b) < 1;
      });
      var _Utils_gt = F2(function(a, b) {
        return _Utils_cmp(a, b) > 0;
      });
      var _Utils_ge = F2(function(a, b) {
        return _Utils_cmp(a, b) >= 0;
      });
      var _Utils_compare = F2(function(x, y) {
        var n = _Utils_cmp(x, y);
        return n < 0 ? $elm$core$Basics$LT : n ? $elm$core$Basics$GT : $elm$core$Basics$EQ;
      });
      var _Utils_Tuple0 = 0;
      var _Utils_Tuple0_UNUSED = { $: "#0" };
      function _Utils_Tuple2(a, b) {
        return { a, b };
      }
      function _Utils_Tuple2_UNUSED(a, b) {
        return { $: "#2", a, b };
      }
      function _Utils_Tuple3(a, b, c) {
        return { a, b, c };
      }
      function _Utils_Tuple3_UNUSED(a, b, c) {
        return { $: "#3", a, b, c };
      }
      function _Utils_chr(c) {
        return c;
      }
      function _Utils_chr_UNUSED(c) {
        return new String(c);
      }
      function _Utils_update(oldRecord, updatedFields) {
        var newRecord = {};
        for (var key in oldRecord) {
          newRecord[key] = oldRecord[key];
        }
        for (var key in updatedFields) {
          newRecord[key] = updatedFields[key];
        }
        return newRecord;
      }
      var _Utils_append = F2(_Utils_ap);
      function _Utils_ap(xs, ys) {
        if (typeof xs === "string") {
          return xs + ys;
        }
        if (!xs.b) {
          return ys;
        }
        var root = _List_Cons(xs.a, ys);
        xs = xs.b;
        for (var curr = root; xs.b; xs = xs.b) {
          curr = curr.b = _List_Cons(xs.a, ys);
        }
        return root;
      }
      var _List_Nil = { $: 0 };
      var _List_Nil_UNUSED = { $: "[]" };
      function _List_Cons(hd, tl) {
        return { $: 1, a: hd, b: tl };
      }
      function _List_Cons_UNUSED(hd, tl) {
        return { $: "::", a: hd, b: tl };
      }
      var _List_cons = F2(_List_Cons);
      function _List_fromArray(arr) {
        var out = _List_Nil;
        for (var i = arr.length; i--; ) {
          out = _List_Cons(arr[i], out);
        }
        return out;
      }
      function _List_toArray(xs) {
        for (var out = []; xs.b; xs = xs.b) {
          out.push(xs.a);
        }
        return out;
      }
      var _List_map2 = F3(function(f, xs, ys) {
        for (var arr = []; xs.b && ys.b; xs = xs.b, ys = ys.b) {
          arr.push(A2(f, xs.a, ys.a));
        }
        return _List_fromArray(arr);
      });
      var _List_map3 = F4(function(f, xs, ys, zs) {
        for (var arr = []; xs.b && ys.b && zs.b; xs = xs.b, ys = ys.b, zs = zs.b) {
          arr.push(A3(f, xs.a, ys.a, zs.a));
        }
        return _List_fromArray(arr);
      });
      var _List_map4 = F5(function(f, ws, xs, ys, zs) {
        for (var arr = []; ws.b && xs.b && ys.b && zs.b; ws = ws.b, xs = xs.b, ys = ys.b, zs = zs.b) {
          arr.push(A4(f, ws.a, xs.a, ys.a, zs.a));
        }
        return _List_fromArray(arr);
      });
      var _List_map5 = F6(function(f, vs, ws, xs, ys, zs) {
        for (var arr = []; vs.b && ws.b && xs.b && ys.b && zs.b; vs = vs.b, ws = ws.b, xs = xs.b, ys = ys.b, zs = zs.b) {
          arr.push(A5(f, vs.a, ws.a, xs.a, ys.a, zs.a));
        }
        return _List_fromArray(arr);
      });
      var _List_sortBy = F2(function(f, xs) {
        return _List_fromArray(_List_toArray(xs).sort(function(a, b) {
          return _Utils_cmp(f(a), f(b));
        }));
      });
      var _List_sortWith = F2(function(f, xs) {
        return _List_fromArray(_List_toArray(xs).sort(function(a, b) {
          var ord = A2(f, a, b);
          return ord === $elm$core$Basics$EQ ? 0 : ord === $elm$core$Basics$LT ? -1 : 1;
        }));
      });
      var _Basics_add = F2(function(a, b) {
        return a + b;
      });
      var _Basics_sub = F2(function(a, b) {
        return a - b;
      });
      var _Basics_mul = F2(function(a, b) {
        return a * b;
      });
      var _Basics_fdiv = F2(function(a, b) {
        return a / b;
      });
      var _Basics_idiv = F2(function(a, b) {
        return a / b | 0;
      });
      var _Basics_pow = F2(Math.pow);
      var _Basics_remainderBy = F2(function(b, a) {
        return a % b;
      });
      var _Basics_modBy = F2(function(modulus, x) {
        var answer = x % modulus;
        return modulus === 0 ? _Debug_crash(11) : answer > 0 && modulus < 0 || answer < 0 && modulus > 0 ? answer + modulus : answer;
      });
      var _Basics_pi = Math.PI;
      var _Basics_e = Math.E;
      var _Basics_cos = Math.cos;
      var _Basics_sin = Math.sin;
      var _Basics_tan = Math.tan;
      var _Basics_acos = Math.acos;
      var _Basics_asin = Math.asin;
      var _Basics_atan = Math.atan;
      var _Basics_atan2 = F2(Math.atan2);
      function _Basics_toFloat(x) {
        return x;
      }
      function _Basics_truncate(n) {
        return n | 0;
      }
      function _Basics_isInfinite(n) {
        return n === Infinity || n === -Infinity;
      }
      var _Basics_ceiling = Math.ceil;
      var _Basics_floor = Math.floor;
      var _Basics_round = Math.round;
      var _Basics_sqrt = Math.sqrt;
      var _Basics_log = Math.log;
      var _Basics_isNaN = isNaN;
      function _Basics_not(bool) {
        return !bool;
      }
      var _Basics_and = F2(function(a, b) {
        return a && b;
      });
      var _Basics_or = F2(function(a, b) {
        return a || b;
      });
      var _Basics_xor = F2(function(a, b) {
        return a !== b;
      });
      var _String_cons = F2(function(chr, str) {
        return chr + str;
      });
      function _String_uncons(string) {
        var word = string.charCodeAt(0);
        return !isNaN(word) ? $elm$core$Maybe$Just(
          55296 <= word && word <= 56319 ? _Utils_Tuple2(_Utils_chr(string[0] + string[1]), string.slice(2)) : _Utils_Tuple2(_Utils_chr(string[0]), string.slice(1))
        ) : $elm$core$Maybe$Nothing;
      }
      var _String_append = F2(function(a, b) {
        return a + b;
      });
      function _String_length(str) {
        return str.length;
      }
      var _String_map = F2(function(func, string) {
        var len = string.length;
        var array = new Array(len);
        var i = 0;
        while (i < len) {
          var word = string.charCodeAt(i);
          if (55296 <= word && word <= 56319) {
            array[i] = func(_Utils_chr(string[i] + string[i + 1]));
            i += 2;
            continue;
          }
          array[i] = func(_Utils_chr(string[i]));
          i++;
        }
        return array.join("");
      });
      var _String_filter = F2(function(isGood, str) {
        var arr = [];
        var len = str.length;
        var i = 0;
        while (i < len) {
          var char = str[i];
          var word = str.charCodeAt(i);
          i++;
          if (55296 <= word && word <= 56319) {
            char += str[i];
            i++;
          }
          if (isGood(_Utils_chr(char))) {
            arr.push(char);
          }
        }
        return arr.join("");
      });
      function _String_reverse(str) {
        var len = str.length;
        var arr = new Array(len);
        var i = 0;
        while (i < len) {
          var word = str.charCodeAt(i);
          if (55296 <= word && word <= 56319) {
            arr[len - i] = str[i + 1];
            i++;
            arr[len - i] = str[i - 1];
            i++;
          } else {
            arr[len - i] = str[i];
            i++;
          }
        }
        return arr.join("");
      }
      var _String_foldl = F3(function(func, state, string) {
        var len = string.length;
        var i = 0;
        while (i < len) {
          var char = string[i];
          var word = string.charCodeAt(i);
          i++;
          if (55296 <= word && word <= 56319) {
            char += string[i];
            i++;
          }
          state = A2(func, _Utils_chr(char), state);
        }
        return state;
      });
      var _String_foldr = F3(function(func, state, string) {
        var i = string.length;
        while (i--) {
          var char = string[i];
          var word = string.charCodeAt(i);
          if (56320 <= word && word <= 57343) {
            i--;
            char = string[i] + char;
          }
          state = A2(func, _Utils_chr(char), state);
        }
        return state;
      });
      var _String_split = F2(function(sep, str) {
        return str.split(sep);
      });
      var _String_join = F2(function(sep, strs) {
        return strs.join(sep);
      });
      var _String_slice = F3(function(start, end, str) {
        return str.slice(start, end);
      });
      function _String_trim(str) {
        return str.trim();
      }
      function _String_trimLeft(str) {
        return str.replace(/^\s+/, "");
      }
      function _String_trimRight(str) {
        return str.replace(/\s+$/, "");
      }
      function _String_words(str) {
        return _List_fromArray(str.trim().split(/\s+/g));
      }
      function _String_lines(str) {
        return _List_fromArray(str.split(/\r\n|\r|\n/g));
      }
      function _String_toUpper(str) {
        return str.toUpperCase();
      }
      function _String_toLower(str) {
        return str.toLowerCase();
      }
      var _String_any = F2(function(isGood, string) {
        var i = string.length;
        while (i--) {
          var char = string[i];
          var word = string.charCodeAt(i);
          if (56320 <= word && word <= 57343) {
            i--;
            char = string[i] + char;
          }
          if (isGood(_Utils_chr(char))) {
            return true;
          }
        }
        return false;
      });
      var _String_all = F2(function(isGood, string) {
        var i = string.length;
        while (i--) {
          var char = string[i];
          var word = string.charCodeAt(i);
          if (56320 <= word && word <= 57343) {
            i--;
            char = string[i] + char;
          }
          if (!isGood(_Utils_chr(char))) {
            return false;
          }
        }
        return true;
      });
      var _String_contains = F2(function(sub, str) {
        return str.indexOf(sub) > -1;
      });
      var _String_startsWith = F2(function(sub, str) {
        return str.indexOf(sub) === 0;
      });
      var _String_endsWith = F2(function(sub, str) {
        return str.length >= sub.length && str.lastIndexOf(sub) === str.length - sub.length;
      });
      var _String_indexes = F2(function(sub, str) {
        var subLen = sub.length;
        if (subLen < 1) {
          return _List_Nil;
        }
        var i = 0;
        var is = [];
        while ((i = str.indexOf(sub, i)) > -1) {
          is.push(i);
          i = i + subLen;
        }
        return _List_fromArray(is);
      });
      function _String_fromNumber(number) {
        return number + "";
      }
      function _String_toInt(str) {
        var total = 0;
        var code0 = str.charCodeAt(0);
        var start = code0 == 43 || code0 == 45 ? 1 : 0;
        for (var i = start; i < str.length; ++i) {
          var code = str.charCodeAt(i);
          if (code < 48 || 57 < code) {
            return $elm$core$Maybe$Nothing;
          }
          total = 10 * total + code - 48;
        }
        return i == start ? $elm$core$Maybe$Nothing : $elm$core$Maybe$Just(code0 == 45 ? -total : total);
      }
      function _String_toFloat(s) {
        if (s.length === 0 || /[\sxbo]/.test(s)) {
          return $elm$core$Maybe$Nothing;
        }
        var n = +s;
        return n === n ? $elm$core$Maybe$Just(n) : $elm$core$Maybe$Nothing;
      }
      function _String_fromList(chars) {
        return _List_toArray(chars).join("");
      }
      function _Char_toCode(char) {
        var code = char.charCodeAt(0);
        if (55296 <= code && code <= 56319) {
          return (code - 55296) * 1024 + char.charCodeAt(1) - 56320 + 65536;
        }
        return code;
      }
      function _Char_fromCode(code) {
        return _Utils_chr(
          code < 0 || 1114111 < code ? "\uFFFD" : code <= 65535 ? String.fromCharCode(code) : (code -= 65536, String.fromCharCode(Math.floor(code / 1024) + 55296, code % 1024 + 56320))
        );
      }
      function _Char_toUpper(char) {
        return _Utils_chr(char.toUpperCase());
      }
      function _Char_toLower(char) {
        return _Utils_chr(char.toLowerCase());
      }
      function _Char_toLocaleUpper(char) {
        return _Utils_chr(char.toLocaleUpperCase());
      }
      function _Char_toLocaleLower(char) {
        return _Utils_chr(char.toLocaleLowerCase());
      }
      function _Json_succeed(msg) {
        return {
          $: 0,
          a: msg
        };
      }
      function _Json_fail(msg) {
        return {
          $: 1,
          a: msg
        };
      }
      function _Json_decodePrim(decoder) {
        return { $: 2, b: decoder };
      }
      var _Json_decodeInt = _Json_decodePrim(function(value) {
        return typeof value !== "number" ? _Json_expecting("an INT", value) : -2147483647 < value && value < 2147483647 && (value | 0) === value ? $elm$core$Result$Ok(value) : isFinite(value) && !(value % 1) ? $elm$core$Result$Ok(value) : _Json_expecting("an INT", value);
      });
      var _Json_decodeBool = _Json_decodePrim(function(value) {
        return typeof value === "boolean" ? $elm$core$Result$Ok(value) : _Json_expecting("a BOOL", value);
      });
      var _Json_decodeFloat = _Json_decodePrim(function(value) {
        return typeof value === "number" ? $elm$core$Result$Ok(value) : _Json_expecting("a FLOAT", value);
      });
      var _Json_decodeValue = _Json_decodePrim(function(value) {
        return $elm$core$Result$Ok(_Json_wrap(value));
      });
      var _Json_decodeString = _Json_decodePrim(function(value) {
        return typeof value === "string" ? $elm$core$Result$Ok(value) : value instanceof String ? $elm$core$Result$Ok(value + "") : _Json_expecting("a STRING", value);
      });
      function _Json_decodeList(decoder) {
        return { $: 3, b: decoder };
      }
      function _Json_decodeArray(decoder) {
        return { $: 4, b: decoder };
      }
      function _Json_decodeNull(value) {
        return { $: 5, c: value };
      }
      var _Json_decodeField = F2(function(field, decoder) {
        return {
          $: 6,
          d: field,
          b: decoder
        };
      });
      var _Json_decodeIndex = F2(function(index, decoder) {
        return {
          $: 7,
          e: index,
          b: decoder
        };
      });
      function _Json_decodeKeyValuePairs(decoder) {
        return {
          $: 8,
          b: decoder
        };
      }
      function _Json_mapMany(f, decoders) {
        return {
          $: 9,
          f,
          g: decoders
        };
      }
      var _Json_andThen = F2(function(callback, decoder) {
        return {
          $: 10,
          b: decoder,
          h: callback
        };
      });
      function _Json_oneOf(decoders) {
        return {
          $: 11,
          g: decoders
        };
      }
      var _Json_map1 = F2(function(f, d1) {
        return _Json_mapMany(f, [d1]);
      });
      var _Json_map2 = F3(function(f, d1, d2) {
        return _Json_mapMany(f, [d1, d2]);
      });
      var _Json_map3 = F4(function(f, d1, d2, d3) {
        return _Json_mapMany(f, [d1, d2, d3]);
      });
      var _Json_map4 = F5(function(f, d1, d2, d3, d4) {
        return _Json_mapMany(f, [d1, d2, d3, d4]);
      });
      var _Json_map5 = F6(function(f, d1, d2, d3, d4, d5) {
        return _Json_mapMany(f, [d1, d2, d3, d4, d5]);
      });
      var _Json_map6 = F7(function(f, d1, d2, d3, d4, d5, d6) {
        return _Json_mapMany(f, [d1, d2, d3, d4, d5, d6]);
      });
      var _Json_map7 = F8(function(f, d1, d2, d3, d4, d5, d6, d7) {
        return _Json_mapMany(f, [d1, d2, d3, d4, d5, d6, d7]);
      });
      var _Json_map8 = F9(function(f, d1, d2, d3, d4, d5, d6, d7, d8) {
        return _Json_mapMany(f, [d1, d2, d3, d4, d5, d6, d7, d8]);
      });
      var _Json_runOnString = F2(function(decoder, string) {
        try {
          var value = JSON.parse(string);
          return _Json_runHelp(decoder, value);
        } catch (e) {
          return $elm$core$Result$Err(A2($elm$json$Json$Decode$Failure, "This is not valid JSON! " + e.message, _Json_wrap(string)));
        }
      });
      var _Json_run = F2(function(decoder, value) {
        return _Json_runHelp(decoder, _Json_unwrap(value));
      });
      function _Json_runHelp(decoder, value) {
        switch (decoder.$) {
          case 2:
            return decoder.b(value);
          case 5:
            return value === null ? $elm$core$Result$Ok(decoder.c) : _Json_expecting("null", value);
          case 3:
            if (!_Json_isArray(value)) {
              return _Json_expecting("a LIST", value);
            }
            return _Json_runArrayDecoder(decoder.b, value, _List_fromArray);
          case 4:
            if (!_Json_isArray(value)) {
              return _Json_expecting("an ARRAY", value);
            }
            return _Json_runArrayDecoder(decoder.b, value, _Json_toElmArray);
          case 6:
            var field = decoder.d;
            if (typeof value !== "object" || value === null || !(field in value)) {
              return _Json_expecting("an OBJECT with a field named `" + field + "`", value);
            }
            var result = _Json_runHelp(decoder.b, value[field]);
            return $elm$core$Result$isOk(result) ? result : $elm$core$Result$Err(A2($elm$json$Json$Decode$Field, field, result.a));
          case 7:
            var index = decoder.e;
            if (!_Json_isArray(value)) {
              return _Json_expecting("an ARRAY", value);
            }
            if (index >= value.length) {
              return _Json_expecting("a LONGER array. Need index " + index + " but only see " + value.length + " entries", value);
            }
            var result = _Json_runHelp(decoder.b, value[index]);
            return $elm$core$Result$isOk(result) ? result : $elm$core$Result$Err(A2($elm$json$Json$Decode$Index, index, result.a));
          case 8:
            if (typeof value !== "object" || value === null || _Json_isArray(value)) {
              return _Json_expecting("an OBJECT", value);
            }
            var keyValuePairs = _List_Nil;
            for (var key in value) {
              if (value.hasOwnProperty(key)) {
                var result = _Json_runHelp(decoder.b, value[key]);
                if (!$elm$core$Result$isOk(result)) {
                  return $elm$core$Result$Err(A2($elm$json$Json$Decode$Field, key, result.a));
                }
                keyValuePairs = _List_Cons(_Utils_Tuple2(key, result.a), keyValuePairs);
              }
            }
            return $elm$core$Result$Ok($elm$core$List$reverse(keyValuePairs));
          case 9:
            var answer = decoder.f;
            var decoders = decoder.g;
            for (var i = 0; i < decoders.length; i++) {
              var result = _Json_runHelp(decoders[i], value);
              if (!$elm$core$Result$isOk(result)) {
                return result;
              }
              answer = answer(result.a);
            }
            return $elm$core$Result$Ok(answer);
          case 10:
            var result = _Json_runHelp(decoder.b, value);
            return !$elm$core$Result$isOk(result) ? result : _Json_runHelp(decoder.h(result.a), value);
          case 11:
            var errors = _List_Nil;
            for (var temp = decoder.g; temp.b; temp = temp.b) {
              var result = _Json_runHelp(temp.a, value);
              if ($elm$core$Result$isOk(result)) {
                return result;
              }
              errors = _List_Cons(result.a, errors);
            }
            return $elm$core$Result$Err($elm$json$Json$Decode$OneOf($elm$core$List$reverse(errors)));
          case 1:
            return $elm$core$Result$Err(A2($elm$json$Json$Decode$Failure, decoder.a, _Json_wrap(value)));
          case 0:
            return $elm$core$Result$Ok(decoder.a);
        }
      }
      function _Json_runArrayDecoder(decoder, value, toElmValue) {
        var len = value.length;
        var array = new Array(len);
        for (var i = 0; i < len; i++) {
          var result = _Json_runHelp(decoder, value[i]);
          if (!$elm$core$Result$isOk(result)) {
            return $elm$core$Result$Err(A2($elm$json$Json$Decode$Index, i, result.a));
          }
          array[i] = result.a;
        }
        return $elm$core$Result$Ok(toElmValue(array));
      }
      function _Json_isArray(value) {
        return Array.isArray(value) || typeof FileList !== "undefined" && value instanceof FileList;
      }
      function _Json_toElmArray(array) {
        return A2($elm$core$Array$initialize, array.length, function(i) {
          return array[i];
        });
      }
      function _Json_expecting(type, value) {
        return $elm$core$Result$Err(A2($elm$json$Json$Decode$Failure, "Expecting " + type, _Json_wrap(value)));
      }
      function _Json_equality(x, y) {
        if (x === y) {
          return true;
        }
        if (x.$ !== y.$) {
          return false;
        }
        switch (x.$) {
          case 0:
          case 1:
            return x.a === y.a;
          case 2:
            return x.b === y.b;
          case 5:
            return x.c === y.c;
          case 3:
          case 4:
          case 8:
            return _Json_equality(x.b, y.b);
          case 6:
            return x.d === y.d && _Json_equality(x.b, y.b);
          case 7:
            return x.e === y.e && _Json_equality(x.b, y.b);
          case 9:
            return x.f === y.f && _Json_listEquality(x.g, y.g);
          case 10:
            return x.h === y.h && _Json_equality(x.b, y.b);
          case 11:
            return _Json_listEquality(x.g, y.g);
        }
      }
      function _Json_listEquality(aDecoders, bDecoders) {
        var len = aDecoders.length;
        if (len !== bDecoders.length) {
          return false;
        }
        for (var i = 0; i < len; i++) {
          if (!_Json_equality(aDecoders[i], bDecoders[i])) {
            return false;
          }
        }
        return true;
      }
      var _Json_encode = F2(function(indentLevel, value) {
        return JSON.stringify(_Json_unwrap(value), null, indentLevel) + "";
      });
      function _Json_wrap_UNUSED(value) {
        return { $: 0, a: value };
      }
      function _Json_unwrap_UNUSED(value) {
        return value.a;
      }
      function _Json_wrap(value) {
        return value;
      }
      function _Json_unwrap(value) {
        return value;
      }
      function _Json_emptyArray() {
        return [];
      }
      function _Json_emptyObject() {
        return {};
      }
      var _Json_addField = F3(function(key, value, object) {
        object[key] = _Json_unwrap(value);
        return object;
      });
      function _Json_addEntry(func) {
        return F2(function(entry, array) {
          array.push(_Json_unwrap(func(entry)));
          return array;
        });
      }
      var _Json_encodeNull = _Json_wrap(null);
      var _Regex_never = /.^/;
      var _Regex_fromStringWith = F2(function(options, string) {
        var flags = "g";
        if (options.aD) {
          flags += "m";
        }
        if (options.c6) {
          flags += "i";
        }
        try {
          return $elm$core$Maybe$Just(new RegExp(string, flags));
        } catch (error) {
          return $elm$core$Maybe$Nothing;
        }
      });
      var _Regex_contains = F2(function(re, string) {
        return string.match(re) !== null;
      });
      var _Regex_findAtMost = F3(function(n, re, str) {
        var out = [];
        var number = 0;
        var string = str;
        var lastIndex = re.lastIndex;
        var prevLastIndex = -1;
        var result;
        while (number++ < n && (result = re.exec(string))) {
          if (prevLastIndex == re.lastIndex)
            break;
          var i = result.length - 1;
          var subs = new Array(i);
          while (i > 0) {
            var submatch = result[i];
            subs[--i] = submatch ? $elm$core$Maybe$Just(submatch) : $elm$core$Maybe$Nothing;
          }
          out.push(A4($elm$regex$Regex$Match, result[0], result.index, number, _List_fromArray(subs)));
          prevLastIndex = re.lastIndex;
        }
        re.lastIndex = lastIndex;
        return _List_fromArray(out);
      });
      var _Regex_replaceAtMost = F4(function(n, re, replacer, string) {
        var count = 0;
        function jsReplacer(match) {
          if (count++ >= n) {
            return match;
          }
          var i = arguments.length - 3;
          var submatches = new Array(i);
          while (i > 0) {
            var submatch = arguments[i];
            submatches[--i] = submatch ? $elm$core$Maybe$Just(submatch) : $elm$core$Maybe$Nothing;
          }
          return replacer(A4($elm$regex$Regex$Match, match, arguments[arguments.length - 2], count, _List_fromArray(submatches)));
        }
        return string.replace(re, jsReplacer);
      });
      var _Regex_splitAtMost = F3(function(n, re, str) {
        var string = str;
        var out = [];
        var start = re.lastIndex;
        var restoreLastIndex = re.lastIndex;
        while (n--) {
          var result = re.exec(string);
          if (!result)
            break;
          out.push(string.slice(start, result.index));
          start = re.lastIndex;
        }
        out.push(string.slice(start));
        re.lastIndex = restoreLastIndex;
        return _List_fromArray(out);
      });
      var _Regex_infinity = Infinity;
      function _Scheduler_succeed(value) {
        return {
          $: 0,
          a: value
        };
      }
      function _Scheduler_fail(error) {
        return {
          $: 1,
          a: error
        };
      }
      function _Scheduler_binding(callback) {
        return {
          $: 2,
          b: callback,
          c: null
        };
      }
      var _Scheduler_andThen = F2(function(callback, task) {
        return {
          $: 3,
          b: callback,
          d: task
        };
      });
      var _Scheduler_onError = F2(function(callback, task) {
        return {
          $: 4,
          b: callback,
          d: task
        };
      });
      function _Scheduler_receive(callback) {
        return {
          $: 5,
          b: callback
        };
      }
      var _Scheduler_guid = 0;
      function _Scheduler_rawSpawn(task) {
        var proc = {
          $: 0,
          e: _Scheduler_guid++,
          f: task,
          g: null,
          h: []
        };
        _Scheduler_enqueue(proc);
        return proc;
      }
      function _Scheduler_spawn(task) {
        return _Scheduler_binding(function(callback) {
          callback(_Scheduler_succeed(_Scheduler_rawSpawn(task)));
        });
      }
      function _Scheduler_rawSend(proc, msg) {
        proc.h.push(msg);
        _Scheduler_enqueue(proc);
      }
      var _Scheduler_send = F2(function(proc, msg) {
        return _Scheduler_binding(function(callback) {
          _Scheduler_rawSend(proc, msg);
          callback(_Scheduler_succeed(_Utils_Tuple0));
        });
      });
      function _Scheduler_kill(proc) {
        return _Scheduler_binding(function(callback) {
          var task = proc.f;
          if (task.$ === 2 && task.c) {
            task.c();
          }
          proc.f = null;
          callback(_Scheduler_succeed(_Utils_Tuple0));
        });
      }
      var _Scheduler_working = false;
      var _Scheduler_queue = [];
      function _Scheduler_enqueue(proc) {
        _Scheduler_queue.push(proc);
        if (_Scheduler_working) {
          return;
        }
        _Scheduler_working = true;
        while (proc = _Scheduler_queue.shift()) {
          _Scheduler_step(proc);
        }
        _Scheduler_working = false;
      }
      function _Scheduler_step(proc) {
        while (proc.f) {
          var rootTag = proc.f.$;
          if (rootTag === 0 || rootTag === 1) {
            while (proc.g && proc.g.$ !== rootTag) {
              proc.g = proc.g.i;
            }
            if (!proc.g) {
              return;
            }
            proc.f = proc.g.b(proc.f.a);
            proc.g = proc.g.i;
          } else if (rootTag === 2) {
            proc.f.c = proc.f.b(function(newRoot) {
              proc.f = newRoot;
              _Scheduler_enqueue(proc);
            });
            return;
          } else if (rootTag === 5) {
            if (proc.h.length === 0) {
              return;
            }
            proc.f = proc.f.b(proc.h.shift());
          } else {
            proc.g = {
              $: rootTag === 3 ? 0 : 1,
              b: proc.f.b,
              i: proc.g
            };
            proc.f = proc.f.d;
          }
        }
      }
      function _Bytes_width(bytes) {
        return bytes.byteLength;
      }
      var _Bytes_getHostEndianness = F2(function(le, be) {
        return _Scheduler_binding(function(callback) {
          callback(_Scheduler_succeed(new Uint8Array(new Uint32Array([1]))[0] === 1 ? le : be));
        });
      });
      function _Bytes_encode(encoder) {
        var mutableBytes = new DataView(new ArrayBuffer($elm$bytes$Bytes$Encode$getWidth(encoder)));
        $elm$bytes$Bytes$Encode$write(encoder)(mutableBytes)(0);
        return mutableBytes;
      }
      var _Bytes_write_i8 = F3(function(mb, i, n) {
        mb.setInt8(i, n);
        return i + 1;
      });
      var _Bytes_write_i16 = F4(function(mb, i, n, isLE) {
        mb.setInt16(i, n, isLE);
        return i + 2;
      });
      var _Bytes_write_i32 = F4(function(mb, i, n, isLE) {
        mb.setInt32(i, n, isLE);
        return i + 4;
      });
      var _Bytes_write_u8 = F3(function(mb, i, n) {
        mb.setUint8(i, n);
        return i + 1;
      });
      var _Bytes_write_u16 = F4(function(mb, i, n, isLE) {
        mb.setUint16(i, n, isLE);
        return i + 2;
      });
      var _Bytes_write_u32 = F4(function(mb, i, n, isLE) {
        mb.setUint32(i, n, isLE);
        return i + 4;
      });
      var _Bytes_write_f32 = F4(function(mb, i, n, isLE) {
        mb.setFloat32(i, n, isLE);
        return i + 4;
      });
      var _Bytes_write_f64 = F4(function(mb, i, n, isLE) {
        mb.setFloat64(i, n, isLE);
        return i + 8;
      });
      var _Bytes_write_bytes = F3(function(mb, offset, bytes) {
        for (var i = 0, len = bytes.byteLength, limit = len - 4; i <= limit; i += 4) {
          mb.setUint32(offset + i, bytes.getUint32(i));
        }
        for (; i < len; i++) {
          mb.setUint8(offset + i, bytes.getUint8(i));
        }
        return offset + len;
      });
      function _Bytes_getStringWidth(string) {
        for (var width = 0, i = 0; i < string.length; i++) {
          var code = string.charCodeAt(i);
          width += code < 128 ? 1 : code < 2048 ? 2 : code < 55296 || 56319 < code ? 3 : (i++, 4);
        }
        return width;
      }
      var _Bytes_write_string = F3(function(mb, offset, string) {
        for (var i = 0; i < string.length; i++) {
          var code = string.charCodeAt(i);
          offset += code < 128 ? (mb.setUint8(offset, code), 1) : code < 2048 ? (mb.setUint16(
            offset,
            49280 | (code >>> 6 & 31) << 8 | code & 63
            /* 0b00111111 */
          ), 2) : code < 55296 || 56319 < code ? (mb.setUint16(
            offset,
            57472 | (code >>> 12 & 15) << 8 | code >>> 6 & 63
            /* 0b00111111 */
          ), mb.setUint8(
            offset + 2,
            128 | code & 63
            /* 0b00111111 */
          ), 3) : (code = (code - 55296) * 1024 + string.charCodeAt(++i) - 56320 + 65536, mb.setUint32(
            offset,
            4034953344 | (code >>> 18 & 7) << 24 | (code >>> 12 & 63) << 16 | (code >>> 6 & 63) << 8 | code & 63
            /* 0b00111111 */
          ), 4);
        }
        return offset;
      });
      var _Bytes_decode = F2(function(decoder, bytes) {
        try {
          return $elm$core$Maybe$Just(A2(decoder, bytes, 0).b);
        } catch (e) {
          return $elm$core$Maybe$Nothing;
        }
      });
      var _Bytes_read_i8 = F2(function(bytes, offset) {
        return _Utils_Tuple2(offset + 1, bytes.getInt8(offset));
      });
      var _Bytes_read_i16 = F3(function(isLE, bytes, offset) {
        return _Utils_Tuple2(offset + 2, bytes.getInt16(offset, isLE));
      });
      var _Bytes_read_i32 = F3(function(isLE, bytes, offset) {
        return _Utils_Tuple2(offset + 4, bytes.getInt32(offset, isLE));
      });
      var _Bytes_read_u8 = F2(function(bytes, offset) {
        return _Utils_Tuple2(offset + 1, bytes.getUint8(offset));
      });
      var _Bytes_read_u16 = F3(function(isLE, bytes, offset) {
        return _Utils_Tuple2(offset + 2, bytes.getUint16(offset, isLE));
      });
      var _Bytes_read_u32 = F3(function(isLE, bytes, offset) {
        return _Utils_Tuple2(offset + 4, bytes.getUint32(offset, isLE));
      });
      var _Bytes_read_f32 = F3(function(isLE, bytes, offset) {
        return _Utils_Tuple2(offset + 4, bytes.getFloat32(offset, isLE));
      });
      var _Bytes_read_f64 = F3(function(isLE, bytes, offset) {
        return _Utils_Tuple2(offset + 8, bytes.getFloat64(offset, isLE));
      });
      var _Bytes_read_bytes = F3(function(len, bytes, offset) {
        return _Utils_Tuple2(offset + len, new DataView(bytes.buffer, bytes.byteOffset + offset, len));
      });
      var _Bytes_read_string = F3(function(len, bytes, offset) {
        var string = "";
        var end = offset + len;
        for (; offset < end; ) {
          var byte = bytes.getUint8(offset++);
          string += byte < 128 ? String.fromCharCode(byte) : (byte & 224) === 192 ? String.fromCharCode(
            (byte & 31) << 6 | bytes.getUint8(offset++) & 63
            /* 0b00111111 */
          ) : (byte & 240) === 224 ? String.fromCharCode(
            (byte & 15) << 12 | (bytes.getUint8(offset++) & 63) << 6 | bytes.getUint8(offset++) & 63
            /* 0b00111111 */
          ) : (byte = ((byte & 7) << 18 | (bytes.getUint8(offset++) & 63) << 12 | (bytes.getUint8(offset++) & 63) << 6 | bytes.getUint8(offset++) & 63) - 65536, String.fromCharCode(Math.floor(byte / 1024) + 55296, byte % 1024 + 56320));
        }
        return _Utils_Tuple2(offset, string);
      });
      var _Bytes_decodeFailure = F2(function() {
        throw 0;
      });
      var _Bitwise_and = F2(function(a, b) {
        return a & b;
      });
      var _Bitwise_or = F2(function(a, b) {
        return a | b;
      });
      var _Bitwise_xor = F2(function(a, b) {
        return a ^ b;
      });
      function _Bitwise_complement(a) {
        return ~a;
      }
      ;
      var _Bitwise_shiftLeftBy = F2(function(offset, a) {
        return a << offset;
      });
      var _Bitwise_shiftRightBy = F2(function(offset, a) {
        return a >> offset;
      });
      var _Bitwise_shiftRightZfBy = F2(function(offset, a) {
        return a >>> offset;
      });
      var _Parser_isSubString = F5(function(smallString, offset, row, col, bigString) {
        var smallLength = smallString.length;
        var isGood = offset + smallLength <= bigString.length;
        for (var i = 0; isGood && i < smallLength; ) {
          var code = bigString.charCodeAt(offset);
          isGood = smallString[i++] === bigString[offset++] && (code === 10 ? (row++, col = 1) : (col++, (code & 63488) === 55296 ? smallString[i++] === bigString[offset++] : 1));
        }
        return _Utils_Tuple3(isGood ? offset : -1, row, col);
      });
      var _Parser_isSubChar = F3(function(predicate, offset, string) {
        return string.length <= offset ? -1 : (string.charCodeAt(offset) & 63488) === 55296 ? predicate(_Utils_chr(string.substr(offset, 2))) ? offset + 2 : -1 : predicate(_Utils_chr(string[offset])) ? string[offset] === "\n" ? -2 : offset + 1 : -1;
      });
      var _Parser_isAsciiCode = F3(function(code, offset, string) {
        return string.charCodeAt(offset) === code;
      });
      var _Parser_chompBase10 = F2(function(offset, string) {
        for (; offset < string.length; offset++) {
          var code = string.charCodeAt(offset);
          if (code < 48 || 57 < code) {
            return offset;
          }
        }
        return offset;
      });
      var _Parser_consumeBase = F3(function(base, offset, string) {
        for (var total = 0; offset < string.length; offset++) {
          var digit = string.charCodeAt(offset) - 48;
          if (digit < 0 || base <= digit)
            break;
          total = base * total + digit;
        }
        return _Utils_Tuple2(offset, total);
      });
      var _Parser_consumeBase16 = F2(function(offset, string) {
        for (var total = 0; offset < string.length; offset++) {
          var code = string.charCodeAt(offset);
          if (48 <= code && code <= 57) {
            total = 16 * total + code - 48;
          } else if (65 <= code && code <= 70) {
            total = 16 * total + code - 55;
          } else if (97 <= code && code <= 102) {
            total = 16 * total + code - 87;
          } else {
            break;
          }
        }
        return _Utils_Tuple2(offset, total);
      });
      var _Parser_findSubString = F5(function(smallString, offset, row, col, bigString) {
        var newOffset = bigString.indexOf(smallString, offset);
        var target = newOffset < 0 ? bigString.length : newOffset + smallString.length;
        while (offset < target) {
          var code = bigString.charCodeAt(offset++);
          code === 10 ? (col = 1, row++) : (col++, (code & 63488) === 55296 && offset++);
        }
        return _Utils_Tuple3(newOffset, row, col);
      });
      function _Process_sleep(time) {
        return _Scheduler_binding(function(callback) {
          var id = setTimeout(function() {
            callback(_Scheduler_succeed(_Utils_Tuple0));
          }, time);
          return function() {
            clearTimeout(id);
          };
        });
      }
      var _Platform_worker = F4(function(impl, flagDecoder, debugMetadata, args) {
        return _Platform_initialize(
          flagDecoder,
          args,
          impl.dq,
          impl.d2,
          impl.dX,
          function() {
            return function() {
            };
          }
        );
      });
      function _Platform_initialize(flagDecoder, args, init, update, subscriptions, stepperBuilder) {
        var result = A2(_Json_run, flagDecoder, _Json_wrap(args ? args["flags"] : void 0));
        $elm$core$Result$isOk(result) || _Debug_crash(
          2
          /**_UNUSED/, _Json_errorToString(result.a) /**/
        );
        var managers = {};
        var initPair = init(result.a);
        var model = initPair.a;
        var stepper = stepperBuilder(sendToApp, model);
        var ports = _Platform_setupEffects(managers, sendToApp);
        function sendToApp(msg, viewMetadata) {
          var pair = A2(update, msg, model);
          stepper(model = pair.a, viewMetadata);
          _Platform_enqueueEffects(managers, pair.b, subscriptions(model));
        }
        _Platform_enqueueEffects(managers, initPair.b, subscriptions(model));
        return ports ? { ports } : {};
      }
      var _Platform_preload;
      function _Platform_registerPreload(url) {
        _Platform_preload.add(url);
      }
      var _Platform_effectManagers = {};
      function _Platform_setupEffects(managers, sendToApp) {
        var ports;
        for (var key in _Platform_effectManagers) {
          var manager = _Platform_effectManagers[key];
          if (manager.a) {
            ports = ports || {};
            ports[key] = manager.a(key, sendToApp);
          }
          managers[key] = _Platform_instantiateManager(manager, sendToApp);
        }
        return ports;
      }
      function _Platform_createManager(init, onEffects, onSelfMsg, cmdMap, subMap) {
        return {
          b: init,
          c: onEffects,
          d: onSelfMsg,
          e: cmdMap,
          f: subMap
        };
      }
      function _Platform_instantiateManager(info, sendToApp) {
        var router = {
          g: sendToApp,
          h: void 0
        };
        var onEffects = info.c;
        var onSelfMsg = info.d;
        var cmdMap = info.e;
        var subMap = info.f;
        function loop(state) {
          return A2(_Scheduler_andThen, loop, _Scheduler_receive(function(msg) {
            var value = msg.a;
            if (msg.$ === 0) {
              return A3(onSelfMsg, router, value, state);
            }
            return cmdMap && subMap ? A4(onEffects, router, value.i, value.j, state) : A3(onEffects, router, cmdMap ? value.i : value.j, state);
          }));
        }
        return router.h = _Scheduler_rawSpawn(A2(_Scheduler_andThen, loop, info.b));
      }
      var _Platform_sendToApp = F2(function(router, msg) {
        return _Scheduler_binding(function(callback) {
          router.g(msg);
          callback(_Scheduler_succeed(_Utils_Tuple0));
        });
      });
      var _Platform_sendToSelf = F2(function(router, msg) {
        return A2(_Scheduler_send, router.h, {
          $: 0,
          a: msg
        });
      });
      function _Platform_leaf(home) {
        return function(value) {
          return {
            $: 1,
            k: home,
            l: value
          };
        };
      }
      function _Platform_batch(list) {
        return {
          $: 2,
          m: list
        };
      }
      var _Platform_map = F2(function(tagger, bag) {
        return {
          $: 3,
          n: tagger,
          o: bag
        };
      });
      var _Platform_effectsQueue = [];
      var _Platform_effectsActive = false;
      function _Platform_enqueueEffects(managers, cmdBag, subBag) {
        _Platform_effectsQueue.push({ p: managers, q: cmdBag, r: subBag });
        if (_Platform_effectsActive)
          return;
        _Platform_effectsActive = true;
        for (var fx; fx = _Platform_effectsQueue.shift(); ) {
          _Platform_dispatchEffects(fx.p, fx.q, fx.r);
        }
        _Platform_effectsActive = false;
      }
      function _Platform_dispatchEffects(managers, cmdBag, subBag) {
        var effectsDict = {};
        _Platform_gatherEffects(true, cmdBag, effectsDict, null);
        _Platform_gatherEffects(false, subBag, effectsDict, null);
        for (var home in managers) {
          _Scheduler_rawSend(managers[home], {
            $: "fx",
            a: effectsDict[home] || { i: _List_Nil, j: _List_Nil }
          });
        }
      }
      function _Platform_gatherEffects(isCmd, bag, effectsDict, taggers) {
        switch (bag.$) {
          case 1:
            var home = bag.k;
            var effect = _Platform_toEffect(isCmd, home, taggers, bag.l);
            effectsDict[home] = _Platform_insert(isCmd, effect, effectsDict[home]);
            return;
          case 2:
            for (var list = bag.m; list.b; list = list.b) {
              _Platform_gatherEffects(isCmd, list.a, effectsDict, taggers);
            }
            return;
          case 3:
            _Platform_gatherEffects(isCmd, bag.o, effectsDict, {
              s: bag.n,
              t: taggers
            });
            return;
        }
      }
      function _Platform_toEffect(isCmd, home, taggers, value) {
        function applyTaggers(x) {
          for (var temp = taggers; temp; temp = temp.t) {
            x = temp.s(x);
          }
          return x;
        }
        var map = isCmd ? _Platform_effectManagers[home].e : _Platform_effectManagers[home].f;
        return A2(map, applyTaggers, value);
      }
      function _Platform_insert(isCmd, newEffect, effects) {
        effects = effects || { i: _List_Nil, j: _List_Nil };
        isCmd ? effects.i = _List_Cons(newEffect, effects.i) : effects.j = _List_Cons(newEffect, effects.j);
        return effects;
      }
      function _Platform_checkPortName(name) {
        if (_Platform_effectManagers[name]) {
          _Debug_crash(3, name);
        }
      }
      function _Platform_outgoingPort(name, converter) {
        _Platform_checkPortName(name);
        _Platform_effectManagers[name] = {
          e: _Platform_outgoingPortMap,
          u: converter,
          a: _Platform_setupOutgoingPort
        };
        return _Platform_leaf(name);
      }
      var _Platform_outgoingPortMap = F2(function(tagger, value) {
        return value;
      });
      function _Platform_setupOutgoingPort(name) {
        var subs = [];
        var converter = _Platform_effectManagers[name].u;
        var init = _Process_sleep(0);
        _Platform_effectManagers[name].b = init;
        _Platform_effectManagers[name].c = F3(function(router, cmdList, state) {
          for (; cmdList.b; cmdList = cmdList.b) {
            var currentSubs = subs;
            var value = _Json_unwrap(converter(cmdList.a));
            for (var i = 0; i < currentSubs.length; i++) {
              currentSubs[i](value);
            }
          }
          return init;
        });
        function subscribe(callback) {
          subs.push(callback);
        }
        function unsubscribe(callback) {
          subs = subs.slice();
          var index = subs.indexOf(callback);
          if (index >= 0) {
            subs.splice(index, 1);
          }
        }
        return {
          subscribe,
          unsubscribe
        };
      }
      function _Platform_incomingPort(name, converter) {
        _Platform_checkPortName(name);
        _Platform_effectManagers[name] = {
          f: _Platform_incomingPortMap,
          u: converter,
          a: _Platform_setupIncomingPort
        };
        return _Platform_leaf(name);
      }
      var _Platform_incomingPortMap = F2(function(tagger, finalTagger) {
        return function(value) {
          return tagger(finalTagger(value));
        };
      });
      function _Platform_setupIncomingPort(name, sendToApp) {
        var subs = _List_Nil;
        var converter = _Platform_effectManagers[name].u;
        var init = _Scheduler_succeed(null);
        _Platform_effectManagers[name].b = init;
        _Platform_effectManagers[name].c = F3(function(router, subList, state) {
          subs = subList;
          return init;
        });
        function send(incomingValue) {
          var result = A2(_Json_run, converter, _Json_wrap(incomingValue));
          $elm$core$Result$isOk(result) || _Debug_crash(4, name, result.a);
          var value = result.a;
          for (var temp = subs; temp.b; temp = temp.b) {
            sendToApp(temp.a(value));
          }
        }
        return { send };
      }
      function _Platform_export(exports2) {
        scope["Elm"] ? _Platform_mergeExportsProd(scope["Elm"], exports2) : scope["Elm"] = exports2;
      }
      function _Platform_mergeExportsProd(obj, exports2) {
        for (var name in exports2) {
          name in obj ? name == "init" ? _Debug_crash(6) : _Platform_mergeExportsProd(obj[name], exports2[name]) : obj[name] = exports2[name];
        }
      }
      function _Platform_export_UNUSED(exports2) {
        scope["Elm"] ? _Platform_mergeExportsDebug("Elm", scope["Elm"], exports2) : scope["Elm"] = exports2;
      }
      function _Platform_mergeExportsDebug(moduleName, obj, exports2) {
        for (var name in exports2) {
          name in obj ? name == "init" ? _Debug_crash(6, moduleName) : _Platform_mergeExportsDebug(moduleName + "." + name, obj[name], exports2[name]) : obj[name] = exports2[name];
        }
      }
      var _Http_toTask = F3(function(router, toTask, request) {
        return _Scheduler_binding(function(callback) {
          function done(response) {
            callback(toTask(request.av.a(response)));
          }
          var xhr = new XMLHttpRequest();
          xhr.addEventListener("error", function() {
            done($elm$http$Http$NetworkError_);
          });
          xhr.addEventListener("timeout", function() {
            done($elm$http$Http$Timeout_);
          });
          xhr.addEventListener("load", function() {
            done(_Http_toResponse(request.av.b, xhr));
          });
          $elm$core$Maybe$isJust(request.cL) && _Http_track(router, xhr, request.cL.a);
          try {
            xhr.open(request.Y, request.E, true);
          } catch (e) {
            return done($elm$http$Http$BadUrl_(request.E));
          }
          _Http_configureRequest(xhr, request);
          request.F.a && xhr.setRequestHeader("Content-Type", request.F.a);
          xhr.send(request.F.b);
          return function() {
            xhr.c = true;
            xhr.abort();
          };
        });
      });
      function _Http_configureRequest(xhr, request) {
        for (var headers = request.dk; headers.b; headers = headers.b) {
          xhr.setRequestHeader(headers.a.a, headers.a.b);
        }
        xhr.timeout = request.dZ.a || 0;
        xhr.responseType = request.av.d;
        xhr.withCredentials = request.c1;
      }
      function _Http_toResponse(toBody, xhr) {
        return A2(
          200 <= xhr.status && xhr.status < 300 ? $elm$http$Http$GoodStatus_ : $elm$http$Http$BadStatus_,
          _Http_toMetadata(xhr),
          toBody(xhr.response)
        );
      }
      function _Http_toMetadata(xhr) {
        return {
          E: xhr.responseURL,
          cE: xhr.status,
          dV: xhr.statusText,
          dk: _Http_parseHeaders(xhr.getAllResponseHeaders())
        };
      }
      function _Http_parseHeaders(rawHeaders) {
        if (!rawHeaders) {
          return $elm$core$Dict$empty;
        }
        var headers = $elm$core$Dict$empty;
        var headerPairs = rawHeaders.split("\r\n");
        for (var i = headerPairs.length; i--; ) {
          var headerPair = headerPairs[i];
          var index = headerPair.indexOf(": ");
          if (index > 0) {
            var key = headerPair.substring(0, index);
            var value = headerPair.substring(index + 2);
            headers = A3($elm$core$Dict$update, key, function(oldValue) {
              return $elm$core$Maybe$Just(
                $elm$core$Maybe$isJust(oldValue) ? value + ", " + oldValue.a : value
              );
            }, headers);
          }
        }
        return headers;
      }
      var _Http_expect = F3(function(type, toBody, toValue) {
        return {
          $: 0,
          d: type,
          b: toBody,
          a: toValue
        };
      });
      var _Http_mapExpect = F2(function(func, expect) {
        return {
          $: 0,
          d: expect.d,
          b: expect.b,
          a: function(x) {
            return func(expect.a(x));
          }
        };
      });
      function _Http_toDataView(arrayBuffer) {
        return new DataView(arrayBuffer);
      }
      var _Http_emptyBody = { $: 0 };
      var _Http_pair = F2(function(a, b) {
        return { $: 0, a, b };
      });
      function _Http_toFormData(parts) {
        for (var formData = new FormData(); parts.b; parts = parts.b) {
          var part = parts.a;
          formData.append(part.a, part.b);
        }
        return formData;
      }
      var _Http_bytesToBlob = F2(function(mime, bytes) {
        return new Blob([bytes], { type: mime });
      });
      function _Http_track(router, xhr, tracker) {
        xhr.upload.addEventListener("progress", function(event) {
          if (xhr.c) {
            return;
          }
          _Scheduler_rawSpawn(A2($elm$core$Platform$sendToSelf, router, _Utils_Tuple2(tracker, $elm$http$Http$Sending({
            dS: event.loaded,
            cA: event.total
          }))));
        });
        xhr.addEventListener("progress", function(event) {
          if (xhr.c) {
            return;
          }
          _Scheduler_rawSpawn(A2($elm$core$Platform$sendToSelf, router, _Utils_Tuple2(tracker, $elm$http$Http$Receiving({
            dI: event.loaded,
            cA: event.lengthComputable ? $elm$core$Maybe$Just(event.total) : $elm$core$Maybe$Nothing
          }))));
        });
      }
      function _Url_percentEncode(string) {
        return encodeURIComponent(string);
      }
      function _Url_percentDecode(string) {
        try {
          return $elm$core$Maybe$Just(decodeURIComponent(string));
        } catch (e) {
          return $elm$core$Maybe$Nothing;
        }
      }
      var $elm$core$List$cons = _List_cons;
      var $elm$core$Elm$JsArray$foldr = _JsArray_foldr;
      var $elm$core$Array$foldr = F3(
        function(func, baseCase, _v0) {
          var tree = _v0.c;
          var tail = _v0.d;
          var helper = F2(
            function(node, acc) {
              if (!node.$) {
                var subTree = node.a;
                return A3($elm$core$Elm$JsArray$foldr, helper, acc, subTree);
              } else {
                var values = node.a;
                return A3($elm$core$Elm$JsArray$foldr, func, acc, values);
              }
            }
          );
          return A3(
            $elm$core$Elm$JsArray$foldr,
            helper,
            A3($elm$core$Elm$JsArray$foldr, func, baseCase, tail),
            tree
          );
        }
      );
      var $elm$core$Array$toList = function(array) {
        return A3($elm$core$Array$foldr, $elm$core$List$cons, _List_Nil, array);
      };
      var $elm$core$Dict$foldr = F3(
        function(func, acc, t) {
          foldr:
            while (true) {
              if (t.$ === -2) {
                return acc;
              } else {
                var key = t.b;
                var value = t.c;
                var left = t.d;
                var right = t.e;
                var $temp$func = func, $temp$acc = A3(
                  func,
                  key,
                  value,
                  A3($elm$core$Dict$foldr, func, acc, right)
                ), $temp$t = left;
                func = $temp$func;
                acc = $temp$acc;
                t = $temp$t;
                continue foldr;
              }
            }
        }
      );
      var $elm$core$Dict$toList = function(dict) {
        return A3(
          $elm$core$Dict$foldr,
          F3(
            function(key, value, list) {
              return A2(
                $elm$core$List$cons,
                _Utils_Tuple2(key, value),
                list
              );
            }
          ),
          _List_Nil,
          dict
        );
      };
      var $elm$core$Dict$keys = function(dict) {
        return A3(
          $elm$core$Dict$foldr,
          F3(
            function(key, value, keyList) {
              return A2($elm$core$List$cons, key, keyList);
            }
          ),
          _List_Nil,
          dict
        );
      };
      var $elm$core$Set$toList = function(_v0) {
        var dict = _v0;
        return $elm$core$Dict$keys(dict);
      };
      var $elm$core$Basics$EQ = 1;
      var $elm$core$Basics$GT = 2;
      var $elm$core$Basics$LT = 0;
      var $author$project$Main$Continue = function(a) {
        return { $: 0, a };
      };
      var $elm$core$Maybe$Just = function(a) {
        return { $: 0, a };
      };
      var $elm$core$Maybe$Nothing = { $: 1 };
      var $elm$core$Result$Err = function(a) {
        return { $: 1, a };
      };
      var $elm$json$Json$Decode$Failure = F2(
        function(a, b) {
          return { $: 3, a, b };
        }
      );
      var $elm$json$Json$Decode$Field = F2(
        function(a, b) {
          return { $: 0, a, b };
        }
      );
      var $elm$json$Json$Decode$Index = F2(
        function(a, b) {
          return { $: 1, a, b };
        }
      );
      var $elm$core$Result$Ok = function(a) {
        return { $: 0, a };
      };
      var $elm$json$Json$Decode$OneOf = function(a) {
        return { $: 2, a };
      };
      var $elm$core$Basics$False = 1;
      var $elm$core$Basics$add = _Basics_add;
      var $elm$core$String$all = _String_all;
      var $elm$core$Basics$and = _Basics_and;
      var $elm$core$Basics$append = _Utils_append;
      var $elm$json$Json$Encode$encode = _Json_encode;
      var $elm$core$String$fromInt = _String_fromNumber;
      var $elm$core$String$join = F2(
        function(sep, chunks) {
          return A2(
            _String_join,
            sep,
            _List_toArray(chunks)
          );
        }
      );
      var $elm$core$String$split = F2(
        function(sep, string) {
          return _List_fromArray(
            A2(_String_split, sep, string)
          );
        }
      );
      var $elm$json$Json$Decode$indent = function(str) {
        return A2(
          $elm$core$String$join,
          "\n    ",
          A2($elm$core$String$split, "\n", str)
        );
      };
      var $elm$core$List$foldl = F3(
        function(func, acc, list) {
          foldl:
            while (true) {
              if (!list.b) {
                return acc;
              } else {
                var x = list.a;
                var xs = list.b;
                var $temp$func = func, $temp$acc = A2(func, x, acc), $temp$list = xs;
                func = $temp$func;
                acc = $temp$acc;
                list = $temp$list;
                continue foldl;
              }
            }
        }
      );
      var $elm$core$List$length = function(xs) {
        return A3(
          $elm$core$List$foldl,
          F2(
            function(_v0, i) {
              return i + 1;
            }
          ),
          0,
          xs
        );
      };
      var $elm$core$List$map2 = _List_map2;
      var $elm$core$Basics$le = _Utils_le;
      var $elm$core$Basics$sub = _Basics_sub;
      var $elm$core$List$rangeHelp = F3(
        function(lo, hi, list) {
          rangeHelp:
            while (true) {
              if (_Utils_cmp(lo, hi) < 1) {
                var $temp$lo = lo, $temp$hi = hi - 1, $temp$list = A2($elm$core$List$cons, hi, list);
                lo = $temp$lo;
                hi = $temp$hi;
                list = $temp$list;
                continue rangeHelp;
              } else {
                return list;
              }
            }
        }
      );
      var $elm$core$List$range = F2(
        function(lo, hi) {
          return A3($elm$core$List$rangeHelp, lo, hi, _List_Nil);
        }
      );
      var $elm$core$List$indexedMap = F2(
        function(f, xs) {
          return A3(
            $elm$core$List$map2,
            f,
            A2(
              $elm$core$List$range,
              0,
              $elm$core$List$length(xs) - 1
            ),
            xs
          );
        }
      );
      var $elm$core$Char$toCode = _Char_toCode;
      var $elm$core$Char$isLower = function(_char) {
        var code = $elm$core$Char$toCode(_char);
        return 97 <= code && code <= 122;
      };
      var $elm$core$Char$isUpper = function(_char) {
        var code = $elm$core$Char$toCode(_char);
        return code <= 90 && 65 <= code;
      };
      var $elm$core$Basics$or = _Basics_or;
      var $elm$core$Char$isAlpha = function(_char) {
        return $elm$core$Char$isLower(_char) || $elm$core$Char$isUpper(_char);
      };
      var $elm$core$Char$isDigit = function(_char) {
        var code = $elm$core$Char$toCode(_char);
        return code <= 57 && 48 <= code;
      };
      var $elm$core$Char$isAlphaNum = function(_char) {
        return $elm$core$Char$isLower(_char) || ($elm$core$Char$isUpper(_char) || $elm$core$Char$isDigit(_char));
      };
      var $elm$core$List$reverse = function(list) {
        return A3($elm$core$List$foldl, $elm$core$List$cons, _List_Nil, list);
      };
      var $elm$core$String$uncons = _String_uncons;
      var $elm$json$Json$Decode$errorOneOf = F2(
        function(i, error) {
          return "\n\n(" + ($elm$core$String$fromInt(i + 1) + (") " + $elm$json$Json$Decode$indent(
            $elm$json$Json$Decode$errorToString(error)
          )));
        }
      );
      var $elm$json$Json$Decode$errorToString = function(error) {
        return A2($elm$json$Json$Decode$errorToStringHelp, error, _List_Nil);
      };
      var $elm$json$Json$Decode$errorToStringHelp = F2(
        function(error, context) {
          errorToStringHelp:
            while (true) {
              switch (error.$) {
                case 0:
                  var f = error.a;
                  var err = error.b;
                  var isSimple = function() {
                    var _v1 = $elm$core$String$uncons(f);
                    if (_v1.$ === 1) {
                      return false;
                    } else {
                      var _v2 = _v1.a;
                      var _char = _v2.a;
                      var rest = _v2.b;
                      return $elm$core$Char$isAlpha(_char) && A2($elm$core$String$all, $elm$core$Char$isAlphaNum, rest);
                    }
                  }();
                  var fieldName = isSimple ? "." + f : "['" + (f + "']");
                  var $temp$error = err, $temp$context = A2($elm$core$List$cons, fieldName, context);
                  error = $temp$error;
                  context = $temp$context;
                  continue errorToStringHelp;
                case 1:
                  var i = error.a;
                  var err = error.b;
                  var indexName = "[" + ($elm$core$String$fromInt(i) + "]");
                  var $temp$error = err, $temp$context = A2($elm$core$List$cons, indexName, context);
                  error = $temp$error;
                  context = $temp$context;
                  continue errorToStringHelp;
                case 2:
                  var errors = error.a;
                  if (!errors.b) {
                    return "Ran into a Json.Decode.oneOf with no possibilities" + function() {
                      if (!context.b) {
                        return "!";
                      } else {
                        return " at json" + A2(
                          $elm$core$String$join,
                          "",
                          $elm$core$List$reverse(context)
                        );
                      }
                    }();
                  } else {
                    if (!errors.b.b) {
                      var err = errors.a;
                      var $temp$error = err, $temp$context = context;
                      error = $temp$error;
                      context = $temp$context;
                      continue errorToStringHelp;
                    } else {
                      var starter = function() {
                        if (!context.b) {
                          return "Json.Decode.oneOf";
                        } else {
                          return "The Json.Decode.oneOf at json" + A2(
                            $elm$core$String$join,
                            "",
                            $elm$core$List$reverse(context)
                          );
                        }
                      }();
                      var introduction = starter + (" failed in the following " + ($elm$core$String$fromInt(
                        $elm$core$List$length(errors)
                      ) + " ways:"));
                      return A2(
                        $elm$core$String$join,
                        "\n\n",
                        A2(
                          $elm$core$List$cons,
                          introduction,
                          A2($elm$core$List$indexedMap, $elm$json$Json$Decode$errorOneOf, errors)
                        )
                      );
                    }
                  }
                default:
                  var msg = error.a;
                  var json = error.b;
                  var introduction = function() {
                    if (!context.b) {
                      return "Problem with the given value:\n\n";
                    } else {
                      return "Problem with the value at json" + (A2(
                        $elm$core$String$join,
                        "",
                        $elm$core$List$reverse(context)
                      ) + ":\n\n    ");
                    }
                  }();
                  return introduction + ($elm$json$Json$Decode$indent(
                    A2($elm$json$Json$Encode$encode, 4, json)
                  ) + ("\n\n" + msg));
              }
            }
        }
      );
      var $elm$core$Array$branchFactor = 32;
      var $elm$core$Array$Array_elm_builtin = F4(
        function(a, b, c, d) {
          return { $: 0, a, b, c, d };
        }
      );
      var $elm$core$Elm$JsArray$empty = _JsArray_empty;
      var $elm$core$Basics$ceiling = _Basics_ceiling;
      var $elm$core$Basics$fdiv = _Basics_fdiv;
      var $elm$core$Basics$logBase = F2(
        function(base, number) {
          return _Basics_log(number) / _Basics_log(base);
        }
      );
      var $elm$core$Basics$toFloat = _Basics_toFloat;
      var $elm$core$Array$shiftStep = $elm$core$Basics$ceiling(
        A2($elm$core$Basics$logBase, 2, $elm$core$Array$branchFactor)
      );
      var $elm$core$Array$empty = A4($elm$core$Array$Array_elm_builtin, 0, $elm$core$Array$shiftStep, $elm$core$Elm$JsArray$empty, $elm$core$Elm$JsArray$empty);
      var $elm$core$Elm$JsArray$initialize = _JsArray_initialize;
      var $elm$core$Array$Leaf = function(a) {
        return { $: 1, a };
      };
      var $elm$core$Basics$apL = F2(
        function(f, x) {
          return f(x);
        }
      );
      var $elm$core$Basics$apR = F2(
        function(x, f) {
          return f(x);
        }
      );
      var $elm$core$Basics$eq = _Utils_equal;
      var $elm$core$Basics$floor = _Basics_floor;
      var $elm$core$Elm$JsArray$length = _JsArray_length;
      var $elm$core$Basics$gt = _Utils_gt;
      var $elm$core$Basics$max = F2(
        function(x, y) {
          return _Utils_cmp(x, y) > 0 ? x : y;
        }
      );
      var $elm$core$Basics$mul = _Basics_mul;
      var $elm$core$Array$SubTree = function(a) {
        return { $: 0, a };
      };
      var $elm$core$Elm$JsArray$initializeFromList = _JsArray_initializeFromList;
      var $elm$core$Array$compressNodes = F2(
        function(nodes, acc) {
          compressNodes:
            while (true) {
              var _v0 = A2($elm$core$Elm$JsArray$initializeFromList, $elm$core$Array$branchFactor, nodes);
              var node = _v0.a;
              var remainingNodes = _v0.b;
              var newAcc = A2(
                $elm$core$List$cons,
                $elm$core$Array$SubTree(node),
                acc
              );
              if (!remainingNodes.b) {
                return $elm$core$List$reverse(newAcc);
              } else {
                var $temp$nodes = remainingNodes, $temp$acc = newAcc;
                nodes = $temp$nodes;
                acc = $temp$acc;
                continue compressNodes;
              }
            }
        }
      );
      var $elm$core$Tuple$first = function(_v0) {
        var x = _v0.a;
        return x;
      };
      var $elm$core$Array$treeFromBuilder = F2(
        function(nodeList, nodeListSize) {
          treeFromBuilder:
            while (true) {
              var newNodeSize = $elm$core$Basics$ceiling(nodeListSize / $elm$core$Array$branchFactor);
              if (newNodeSize === 1) {
                return A2($elm$core$Elm$JsArray$initializeFromList, $elm$core$Array$branchFactor, nodeList).a;
              } else {
                var $temp$nodeList = A2($elm$core$Array$compressNodes, nodeList, _List_Nil), $temp$nodeListSize = newNodeSize;
                nodeList = $temp$nodeList;
                nodeListSize = $temp$nodeListSize;
                continue treeFromBuilder;
              }
            }
        }
      );
      var $elm$core$Array$builderToArray = F2(
        function(reverseNodeList, builder) {
          if (!builder.g) {
            return A4(
              $elm$core$Array$Array_elm_builtin,
              $elm$core$Elm$JsArray$length(builder.j),
              $elm$core$Array$shiftStep,
              $elm$core$Elm$JsArray$empty,
              builder.j
            );
          } else {
            var treeLen = builder.g * $elm$core$Array$branchFactor;
            var depth = $elm$core$Basics$floor(
              A2($elm$core$Basics$logBase, $elm$core$Array$branchFactor, treeLen - 1)
            );
            var correctNodeList = reverseNodeList ? $elm$core$List$reverse(builder.k) : builder.k;
            var tree = A2($elm$core$Array$treeFromBuilder, correctNodeList, builder.g);
            return A4(
              $elm$core$Array$Array_elm_builtin,
              $elm$core$Elm$JsArray$length(builder.j) + treeLen,
              A2($elm$core$Basics$max, 5, depth * $elm$core$Array$shiftStep),
              tree,
              builder.j
            );
          }
        }
      );
      var $elm$core$Basics$idiv = _Basics_idiv;
      var $elm$core$Basics$lt = _Utils_lt;
      var $elm$core$Array$initializeHelp = F5(
        function(fn, fromIndex, len, nodeList, tail) {
          initializeHelp:
            while (true) {
              if (fromIndex < 0) {
                return A2(
                  $elm$core$Array$builderToArray,
                  false,
                  { k: nodeList, g: len / $elm$core$Array$branchFactor | 0, j: tail }
                );
              } else {
                var leaf = $elm$core$Array$Leaf(
                  A3($elm$core$Elm$JsArray$initialize, $elm$core$Array$branchFactor, fromIndex, fn)
                );
                var $temp$fn = fn, $temp$fromIndex = fromIndex - $elm$core$Array$branchFactor, $temp$len = len, $temp$nodeList = A2($elm$core$List$cons, leaf, nodeList), $temp$tail = tail;
                fn = $temp$fn;
                fromIndex = $temp$fromIndex;
                len = $temp$len;
                nodeList = $temp$nodeList;
                tail = $temp$tail;
                continue initializeHelp;
              }
            }
        }
      );
      var $elm$core$Basics$remainderBy = _Basics_remainderBy;
      var $elm$core$Array$initialize = F2(
        function(len, fn) {
          if (len <= 0) {
            return $elm$core$Array$empty;
          } else {
            var tailLen = len % $elm$core$Array$branchFactor;
            var tail = A3($elm$core$Elm$JsArray$initialize, tailLen, len - tailLen, fn);
            var initialFromIndex = len - tailLen - $elm$core$Array$branchFactor;
            return A5($elm$core$Array$initializeHelp, fn, initialFromIndex, len, _List_Nil, tail);
          }
        }
      );
      var $elm$core$Basics$True = 0;
      var $elm$core$Result$isOk = function(result) {
        if (!result.$) {
          return true;
        } else {
          return false;
        }
      };
      var $elm$json$Json$Decode$andThen = _Json_andThen;
      var $elm$json$Json$Decode$null = _Json_decodeNull;
      var $author$project$Ports$continue = _Platform_incomingPort(
        "continue",
        $elm$json$Json$Decode$null(0)
      );
      var $elm$json$Json$Decode$field = _Json_decodeField;
      var $elm$json$Json$Decode$list = _Json_decodeList;
      var $elm$json$Json$Decode$map = _Json_map1;
      var $elm$json$Json$Decode$oneOf = _Json_oneOf;
      var $elm$json$Json$Encode$string = _Json_wrap;
      var $author$project$Ports$printAndExitFailure = _Platform_outgoingPort("printAndExitFailure", $elm$json$Json$Encode$string);
      var $author$project$Ports$printAndExitSuccess = _Platform_outgoingPort("printAndExitSuccess", $elm$json$Json$Encode$string);
      var $author$project$Main$ApiCommand = function(a) {
        return { $: 0, a };
      };
      var $author$project$Main$CustomCommand = function(a) {
        return { $: 1, a };
      };
      var $elm$core$Basics$identity = function(x) {
        return x;
      };
      var $dillonkearns$elm_cli_options_parser$Cli$Program$Config = $elm$core$Basics$identity;
      var $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$OptionsParser = $elm$core$Basics$identity;
      var $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$end = function(_v0) {
        var record = _v0;
        return record;
      };
      var $dillonkearns$elm_cli_options_parser$Cli$Program$add = F2(
        function(optionsParser, _v0) {
          var programRecord = _v0;
          var optionsParsers = programRecord.Z;
          return _Utils_update(
            programRecord,
            {
              Z: _Utils_ap(
                optionsParsers,
                _List_fromArray(
                  [
                    $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$end(optionsParser)
                  ]
                )
              )
            }
          );
        }
      );
      var $author$project$Custom$Command$PullApp = function(a) {
        return { $: 0, a };
      };
      var $author$project$Custom$Command$PullScenario = function(a) {
        return { $: 2, a };
      };
      var $author$project$Custom$Command$PushApp = function(a) {
        return { $: 1, a };
      };
      var $author$project$Custom$Command$PushScenario = function(a) {
        return { $: 3, a };
      };
      var $author$project$Custom$Command$Apps$Pull$Options = F5(
        function(sDKAppName, sDKAppVersion, output, domain, token) {
          return { dg: domain, aF: output, b: sDKAppName, d: sDKAppVersion, I: token };
        }
      );
      var $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$buildSubCommand = F2(
        function(subCommandName, cliOptionsConstructor) {
          return {
            N: function(_v0) {
              return $elm$core$Result$Ok(
                _Utils_Tuple2(_List_Nil, cliOptionsConstructor)
              );
            },
            bv: $elm$core$Maybe$Nothing,
            S: $elm$core$Maybe$Just(subCommandName),
            bb: _List_Nil
          };
        }
      );
      var $author$project$Token$Token = $elm$core$Basics$identity;
      var $elm$regex$Regex$Match = F4(
        function(match, index, number, submatches) {
          return { dp: index, dv: match, dx: number, dW: submatches };
        }
      );
      var $elm$regex$Regex$contains = _Regex_contains;
      var $elm$regex$Regex$fromStringWith = _Regex_fromStringWith;
      var $elm$regex$Regex$fromString = function(string) {
        return A2(
          $elm$regex$Regex$fromStringWith,
          { c6: false, aD: false },
          string
        );
      };
      var $elm$regex$Regex$never = _Regex_never;
      var $elm$core$Maybe$withDefault = F2(
        function(_default, maybe) {
          if (!maybe.$) {
            var value = maybe.a;
            return value;
          } else {
            return _default;
          }
        }
      );
      var $author$project$Token$validate = function(tokenString) {
        return A2(
          $elm$regex$Regex$contains,
          A2(
            $elm$core$Maybe$withDefault,
            $elm$regex$Regex$never,
            $elm$regex$Regex$fromString("^[0-9a-f\\-]+$")
          ),
          tokenString
        );
      };
      var $elm$core$Result$map = F2(
        function(func, ra) {
          if (!ra.$) {
            var a = ra.a;
            return $elm$core$Result$Ok(
              func(a)
            );
          } else {
            var e = ra.a;
            return $elm$core$Result$Err(e);
          }
        }
      );
      var $dillonkearns$elm_cli_options_parser$Cli$Decode$UnrecoverableValidationError = function(a) {
        return { $: 2, a };
      };
      var $dillonkearns$elm_cli_options_parser$Cli$Decode$Decoder = $elm$core$Basics$identity;
      var $elm$core$Result$andThen = F2(
        function(callback, result) {
          if (!result.$) {
            var value = result.a;
            return callback(value);
          } else {
            var msg = result.a;
            return $elm$core$Result$Err(msg);
          }
        }
      );
      var $elm$core$Basics$composeR = F3(
        function(f, g, x) {
          return g(
            f(x)
          );
        }
      );
      var $dillonkearns$elm_cli_options_parser$Cli$Decode$mapProcessingError = F2(
        function(mapFunction, _v0) {
          var _function = _v0;
          return A2(
            $elm$core$Basics$composeR,
            _function,
            function(fn) {
              return A2(
                $elm$core$Result$andThen,
                function(_v1) {
                  var validationErrors = _v1.a;
                  var value = _v1.b;
                  var _v2 = mapFunction(value);
                  if (!_v2.$) {
                    var mappedValue = _v2.a;
                    return $elm$core$Result$Ok(
                      _Utils_Tuple2(validationErrors, mappedValue)
                    );
                  } else {
                    var error = _v2.a;
                    return $elm$core$Result$Err(error);
                  }
                },
                fn
              );
            }
          );
        }
      );
      var $dillonkearns$elm_cli_options_parser$Cli$UsageSpec$name = function(usageSpec) {
        switch (usageSpec.$) {
          case 0:
            var option = usageSpec.a;
            var mutuallyExclusiveValues = usageSpec.b;
            var occurences = usageSpec.c;
            if (!option.$) {
              var flagName = option.a;
              return flagName;
            } else {
              var keywordArgName = option.a;
              return keywordArgName;
            }
          case 1:
            var operandOptionName = usageSpec.a;
            var mutuallyExclusiveValues = usageSpec.b;
            var occurences = usageSpec.c;
            return operandOptionName;
          default:
            var restArgsDescription = usageSpec.a;
            return restArgsDescription;
        }
      };
      var $dillonkearns$elm_cli_options_parser$Cli$Option$Option = $elm$core$Basics$identity;
      var $dillonkearns$elm_cli_options_parser$Cli$Option$updateDecoder = F2(
        function(mappedDecoder, _v0) {
          var option = _v0;
          var dataGrabber = option.ac;
          var usageSpec = option.J;
          var decoder = option.N;
          return {
            ac: dataGrabber,
            N: mappedDecoder(decoder),
            J: usageSpec
          };
        }
      );
      var $dillonkearns$elm_cli_options_parser$Cli$Option$validateMap = F2(
        function(mapFn, option) {
          var optionRecord = option;
          return A2(
            $dillonkearns$elm_cli_options_parser$Cli$Option$updateDecoder,
            function(decoder) {
              return A2(
                $dillonkearns$elm_cli_options_parser$Cli$Decode$mapProcessingError,
                function(value) {
                  var _v0 = mapFn(value);
                  if (!_v0.$) {
                    var mappedValue = _v0.a;
                    return $elm$core$Result$Ok(mappedValue);
                  } else {
                    var invalidReason = _v0.a;
                    return $elm$core$Result$Err(
                      $dillonkearns$elm_cli_options_parser$Cli$Decode$UnrecoverableValidationError(
                        {
                          ds: invalidReason,
                          b3: $dillonkearns$elm_cli_options_parser$Cli$UsageSpec$name(optionRecord.J)
                        }
                      )
                    );
                  }
                },
                decoder
              );
            },
            option
          );
        }
      );
      var $dillonkearns$elm_cli_options_parser$Cli$Option$validateMapIfPresent = F2(
        function(mapFn, cliSpec) {
          var dataGrabber = cliSpec.ac;
          var usageSpec = cliSpec.J;
          var decoder = cliSpec.N;
          return A2(
            $dillonkearns$elm_cli_options_parser$Cli$Option$validateMap,
            function(thing) {
              if (!thing.$) {
                var actualThing = thing.a;
                return A2(
                  $elm$core$Result$map,
                  $elm$core$Maybe$Just,
                  mapFn(actualThing)
                );
              } else {
                return $elm$core$Result$Ok($elm$core$Maybe$Nothing);
              }
            },
            cliSpec
          );
        }
      );
      var $author$project$Token$fromOptionalOption = $dillonkearns$elm_cli_options_parser$Cli$Option$validateMapIfPresent(
        function(string) {
          return $author$project$Token$validate(string) ? $elm$core$Result$Ok(string) : $elm$core$Result$Err("Token not valid");
        }
      );
      var $elm$core$Result$fromMaybe = F2(
        function(err, maybe) {
          if (!maybe.$) {
            var v = maybe.a;
            return $elm$core$Result$Ok(v);
          } else {
            return $elm$core$Result$Err(err);
          }
        }
      );
      var $elm$core$String$toInt = _String_toInt;
      var $author$project$Parse$int = A2(
        $elm$core$Basics$composeR,
        $elm$core$String$toInt,
        $elm$core$Result$fromMaybe("Expect integer.")
      );
      var $dillonkearns$elm_cli_options_parser$Cli$Decode$MatchError = function(a) {
        return { $: 0, a };
      };
      var $dillonkearns$elm_cli_options_parser$Occurences$Optional = 0;
      var $dillonkearns$elm_cli_options_parser$Cli$Decode$decoder = function(value) {
        return $elm$core$Result$Ok(
          _Utils_Tuple2(_List_Nil, value)
        );
      };
      var $dillonkearns$elm_cli_options_parser$Cli$Option$buildOption = F2(
        function(dataGrabber, usageSpec) {
          return { ac: dataGrabber, N: $dillonkearns$elm_cli_options_parser$Cli$Decode$decoder, J: usageSpec };
        }
      );
      var $elm_community$list_extra$List$Extra$find = F2(
        function(predicate, list) {
          find:
            while (true) {
              if (!list.b) {
                return $elm$core$Maybe$Nothing;
              } else {
                var first = list.a;
                var rest = list.b;
                if (predicate(first)) {
                  return $elm$core$Maybe$Just(first);
                } else {
                  var $temp$predicate = predicate, $temp$list = rest;
                  predicate = $temp$predicate;
                  list = $temp$list;
                  continue find;
                }
              }
            }
        }
      );
      var $dillonkearns$elm_cli_options_parser$Cli$UsageSpec$FlagOrKeywordArg = F3(
        function(a, b, c) {
          return { $: 0, a, b, c };
        }
      );
      var $dillonkearns$elm_cli_options_parser$Cli$UsageSpec$KeywordArg = function(a) {
        return { $: 1, a };
      };
      var $dillonkearns$elm_cli_options_parser$Cli$UsageSpec$keywordArg = F2(
        function(keywordArgName, occurences) {
          return A3(
            $dillonkearns$elm_cli_options_parser$Cli$UsageSpec$FlagOrKeywordArg,
            $dillonkearns$elm_cli_options_parser$Cli$UsageSpec$KeywordArg(keywordArgName),
            $elm$core$Maybe$Nothing,
            occurences
          );
        }
      );
      var $dillonkearns$elm_cli_options_parser$Cli$Option$optionalKeywordArg = function(optionName) {
        return A2(
          $dillonkearns$elm_cli_options_parser$Cli$Option$buildOption,
          function(_v0) {
            var operands = _v0.af;
            var options = _v0.aE;
            var _v1 = A2(
              $elm_community$list_extra$List$Extra$find,
              function(_v2) {
                var thisOptionName = _v2.a;
                var optionKind = _v2.b;
                return _Utils_eq(thisOptionName, optionName);
              },
              options
            );
            if (_v1.$ === 1) {
              return $elm$core$Result$Ok($elm$core$Maybe$Nothing);
            } else {
              if (_v1.a.b.$ === 1) {
                var _v3 = _v1.a;
                var optionArg = _v3.b.a;
                return $elm$core$Result$Ok(
                  $elm$core$Maybe$Just(optionArg)
                );
              } else {
                return $elm$core$Result$Err(
                  $dillonkearns$elm_cli_options_parser$Cli$Decode$MatchError("Expected option " + (optionName + " to have arg but found none."))
                );
              }
            }
          },
          A2($dillonkearns$elm_cli_options_parser$Cli$UsageSpec$keywordArg, optionName, 0)
        );
      };
      var $dillonkearns$elm_cli_options_parser$Occurences$Required = 1;
      var $elm$core$String$concat = function(strings) {
        return A2($elm$core$String$join, "", strings);
      };
      var $dillonkearns$elm_cli_options_parser$Cli$Option$listToString = function(list) {
        return $elm$core$String$concat(
          _List_fromArray(
            [
              "[",
              A2($elm$core$String$join, ", ", list),
              "]"
            ]
          )
        );
      };
      var $elm$core$List$foldrHelper = F4(
        function(fn, acc, ctr, ls) {
          if (!ls.b) {
            return acc;
          } else {
            var a = ls.a;
            var r1 = ls.b;
            if (!r1.b) {
              return A2(fn, a, acc);
            } else {
              var b = r1.a;
              var r2 = r1.b;
              if (!r2.b) {
                return A2(
                  fn,
                  a,
                  A2(fn, b, acc)
                );
              } else {
                var c = r2.a;
                var r3 = r2.b;
                if (!r3.b) {
                  return A2(
                    fn,
                    a,
                    A2(
                      fn,
                      b,
                      A2(fn, c, acc)
                    )
                  );
                } else {
                  var d = r3.a;
                  var r4 = r3.b;
                  var res = ctr > 500 ? A3(
                    $elm$core$List$foldl,
                    fn,
                    acc,
                    $elm$core$List$reverse(r4)
                  ) : A4($elm$core$List$foldrHelper, fn, acc, ctr + 1, r4);
                  return A2(
                    fn,
                    a,
                    A2(
                      fn,
                      b,
                      A2(
                        fn,
                        c,
                        A2(fn, d, res)
                      )
                    )
                  );
                }
              }
            }
          }
        }
      );
      var $elm$core$List$foldr = F3(
        function(fn, acc, ls) {
          return A4($elm$core$List$foldrHelper, fn, acc, 0, ls);
        }
      );
      var $elm$core$List$map = F2(
        function(f, xs) {
          return A3(
            $elm$core$List$foldr,
            F2(
              function(x, acc) {
                return A2(
                  $elm$core$List$cons,
                  f(x),
                  acc
                );
              }
            ),
            _List_Nil,
            xs
          );
        }
      );
      var $dillonkearns$elm_cli_options_parser$Tokenizer$parsedOptionToString = function(_v0) {
        var name = _v0.a;
        var optionKind = _v0.b;
        return name;
      };
      var $dillonkearns$elm_cli_options_parser$Cli$Option$requiredKeywordArg = function(optionName) {
        return A2(
          $dillonkearns$elm_cli_options_parser$Cli$Option$buildOption,
          function(_v0) {
            var operands = _v0.af;
            var options = _v0.aE;
            var _v1 = A2(
              $elm_community$list_extra$List$Extra$find,
              function(_v2) {
                var thisOptionName = _v2.a;
                var optionKind = _v2.b;
                return _Utils_eq(thisOptionName, optionName);
              },
              options
            );
            if (_v1.$ === 1) {
              return $elm$core$Result$Err(
                $dillonkearns$elm_cli_options_parser$Cli$Decode$MatchError(
                  "Expected to find option " + (optionName + (" but only found options " + $dillonkearns$elm_cli_options_parser$Cli$Option$listToString(
                    A2($elm$core$List$map, $dillonkearns$elm_cli_options_parser$Tokenizer$parsedOptionToString, options)
                  )))
                )
              );
            } else {
              if (_v1.a.b.$ === 1) {
                var _v3 = _v1.a;
                var optionArg = _v3.b.a;
                return $elm$core$Result$Ok(optionArg);
              } else {
                return $elm$core$Result$Err(
                  $dillonkearns$elm_cli_options_parser$Cli$Decode$MatchError("Expected option " + (optionName + " to have arg but found none."))
                );
              }
            }
          },
          A2($dillonkearns$elm_cli_options_parser$Cli$UsageSpec$keywordArg, optionName, 1)
        );
      };
      var $dillonkearns$elm_cli_options_parser$Cli$Decode$decodeFunction = function(_v0) {
        var decodeFn = _v0;
        return decodeFn;
      };
      var $elm$core$List$maybeCons = F3(
        function(f, mx, xs) {
          var _v0 = f(mx);
          if (!_v0.$) {
            var x = _v0.a;
            return A2($elm$core$List$cons, x, xs);
          } else {
            return xs;
          }
        }
      );
      var $elm$core$List$filterMap = F2(
        function(f, xs) {
          return A3(
            $elm$core$List$foldr,
            $elm$core$List$maybeCons(f),
            _List_Nil,
            xs
          );
        }
      );
      var $dillonkearns$elm_cli_options_parser$Cli$UsageSpec$operandCount = function(usageSpecs) {
        return $elm$core$List$length(
          A2(
            $elm$core$List$filterMap,
            function(spec) {
              switch (spec.$) {
                case 0:
                  return $elm$core$Maybe$Nothing;
                case 1:
                  var operandName = spec.a;
                  var mutuallyExclusiveValues = spec.b;
                  var occurences = spec.c;
                  return $elm$core$Maybe$Just(operandName);
                default:
                  return $elm$core$Maybe$Nothing;
              }
            },
            usageSpecs
          )
        );
      };
      var $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$resultMap = F2(
        function(mapFunction, result) {
          return A2(
            $elm$core$Result$map,
            function(_v0) {
              var validationErrors = _v0.a;
              var value = _v0.b;
              return _Utils_Tuple2(
                validationErrors,
                mapFunction(value)
              );
            },
            result
          );
        }
      );
      var $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$updateDecoder = F2(
        function(decoder, _v0) {
          var optionsParserRecord = _v0;
          return { N: decoder, bv: optionsParserRecord.bv, S: optionsParserRecord.S, bb: optionsParserRecord.bb };
        }
      );
      var $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$withCommon = F2(
        function(_v0, fullOptionsParser) {
          var innerOption = _v0;
          var optionsParser = fullOptionsParser;
          var decoder = optionsParser.N;
          var usageSpecs = optionsParser.bb;
          return function(_v4) {
            var record = _v4;
            return _Utils_update(
              record,
              {
                bb: _Utils_ap(
                  usageSpecs,
                  _List_fromArray(
                    [innerOption.J]
                  )
                )
              }
            );
          }(
            A2(
              $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$updateDecoder,
              function(optionsAndOperands) {
                return A2(
                  $elm$core$Result$andThen,
                  function(_v1) {
                    var validationErrors = _v1.a;
                    var fromValue = _v1.b;
                    var _v2 = A2(
                      $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$resultMap,
                      function(fn) {
                        return fn(fromValue);
                      },
                      decoder(optionsAndOperands)
                    );
                    if (!_v2.$) {
                      var _v3 = _v2.a;
                      var previousValidationErrors = _v3.a;
                      var thing = _v3.b;
                      return $elm$core$Result$Ok(
                        _Utils_Tuple2(
                          _Utils_ap(previousValidationErrors, validationErrors),
                          thing
                        )
                      );
                    } else {
                      var value = _v2;
                      return value;
                    }
                  },
                  A2(
                    $elm$core$Result$andThen,
                    $dillonkearns$elm_cli_options_parser$Cli$Decode$decodeFunction(innerOption.N),
                    innerOption.ac(
                      {
                        af: optionsAndOperands.af,
                        dB: $dillonkearns$elm_cli_options_parser$Cli$UsageSpec$operandCount(usageSpecs),
                        aE: optionsAndOperands.aE,
                        bb: optionsAndOperands.bb
                      }
                    )
                  )
                );
              },
              fullOptionsParser
            )
          );
        }
      );
      var $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with = $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$withCommon;
      var $author$project$Custom$Command$Apps$Pull$command = A2(
        $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
        $author$project$Token$fromOptionalOption(
          $dillonkearns$elm_cli_options_parser$Cli$Option$optionalKeywordArg("token")
        ),
        A2(
          $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
          $dillonkearns$elm_cli_options_parser$Cli$Option$optionalKeywordArg("domain"),
          A2(
            $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
            $dillonkearns$elm_cli_options_parser$Cli$Option$optionalKeywordArg("output"),
            A2(
              $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
              A2(
                $dillonkearns$elm_cli_options_parser$Cli$Option$validateMap,
                $author$project$Parse$int,
                $dillonkearns$elm_cli_options_parser$Cli$Option$requiredKeywordArg("sDKAppVersion")
              ),
              A2(
                $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
                $dillonkearns$elm_cli_options_parser$Cli$Option$requiredKeywordArg("sDKAppName"),
                A2($dillonkearns$elm_cli_options_parser$Cli$OptionsParser$buildSubCommand, "apps:pull", $author$project$Custom$Command$Apps$Pull$Options)
              )
            )
          )
        )
      );
      var $author$project$Custom$Command$Apps$Push$Options = F5(
        function(create, appDirectory, output, domain, token) {
          return { e: appDirectory, dc: create, dg: domain, aF: output, I: token };
        }
      );
      var $dillonkearns$elm_cli_options_parser$Tokenizer$Flag = { $: 0 };
      var $dillonkearns$elm_cli_options_parser$Tokenizer$ParsedOption = F2(
        function(a, b) {
          return { $: 0, a, b };
        }
      );
      var $dillonkearns$elm_cli_options_parser$Cli$UsageSpec$Flag = function(a) {
        return { $: 0, a };
      };
      var $dillonkearns$elm_cli_options_parser$Cli$UsageSpec$flag = F2(
        function(flagName, occurences) {
          return A3(
            $dillonkearns$elm_cli_options_parser$Cli$UsageSpec$FlagOrKeywordArg,
            $dillonkearns$elm_cli_options_parser$Cli$UsageSpec$Flag(flagName),
            $elm$core$Maybe$Nothing,
            occurences
          );
        }
      );
      var $elm$core$List$any = F2(
        function(isOkay, list) {
          any:
            while (true) {
              if (!list.b) {
                return false;
              } else {
                var x = list.a;
                var xs = list.b;
                if (isOkay(x)) {
                  return true;
                } else {
                  var $temp$isOkay = isOkay, $temp$list = xs;
                  isOkay = $temp$isOkay;
                  list = $temp$list;
                  continue any;
                }
              }
            }
        }
      );
      var $elm$core$List$member = F2(
        function(x, xs) {
          return A2(
            $elm$core$List$any,
            function(a) {
              return _Utils_eq(a, x);
            },
            xs
          );
        }
      );
      var $dillonkearns$elm_cli_options_parser$Cli$Option$flag = function(flagName) {
        return A2(
          $dillonkearns$elm_cli_options_parser$Cli$Option$buildOption,
          function(_v0) {
            var options = _v0.aE;
            return A2(
              $elm$core$List$member,
              A2($dillonkearns$elm_cli_options_parser$Tokenizer$ParsedOption, flagName, $dillonkearns$elm_cli_options_parser$Tokenizer$Flag),
              options
            ) ? $elm$core$Result$Ok(true) : $elm$core$Result$Ok(false);
          },
          A2($dillonkearns$elm_cli_options_parser$Cli$UsageSpec$flag, flagName, 0)
        );
      };
      var $author$project$Custom$Command$Apps$Push$command = A2(
        $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
        $author$project$Token$fromOptionalOption(
          $dillonkearns$elm_cli_options_parser$Cli$Option$optionalKeywordArg("token")
        ),
        A2(
          $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
          $dillonkearns$elm_cli_options_parser$Cli$Option$optionalKeywordArg("domain"),
          A2(
            $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
            $dillonkearns$elm_cli_options_parser$Cli$Option$optionalKeywordArg("output"),
            A2(
              $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
              $dillonkearns$elm_cli_options_parser$Cli$Option$requiredKeywordArg("appDirectory"),
              A2(
                $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
                $dillonkearns$elm_cli_options_parser$Cli$Option$flag("create"),
                A2($dillonkearns$elm_cli_options_parser$Cli$OptionsParser$buildSubCommand, "apps:push", $author$project$Custom$Command$Apps$Push$Options)
              )
            )
          )
        )
      );
      var $author$project$Custom$Command$Scenarios$Pull$Options = F8(
        function(scenarioId, blueprintId, draft, organizationId, teamId, output, domain, token) {
          return { aN: blueprintId, dg: domain, aT: draft, a3: organizationId, aF: output, ai: scenarioId, ba: teamId, I: token };
        }
      );
      var $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$withDoc = F2(
        function(docString, _v0) {
          var optionsParserRecord = _v0;
          return _Utils_update(
            optionsParserRecord,
            {
              bv: $elm$core$Maybe$Just(docString)
            }
          );
        }
      );
      var $author$project$Custom$Command$Scenarios$Pull$command = A2(
        $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$withDoc,
        "Retrieves a scenario package.",
        A2(
          $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
          $author$project$Token$fromOptionalOption(
            $dillonkearns$elm_cli_options_parser$Cli$Option$optionalKeywordArg("token")
          ),
          A2(
            $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
            $dillonkearns$elm_cli_options_parser$Cli$Option$optionalKeywordArg("domain"),
            A2(
              $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
              $dillonkearns$elm_cli_options_parser$Cli$Option$optionalKeywordArg("output"),
              A2(
                $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
                A2(
                  $dillonkearns$elm_cli_options_parser$Cli$Option$validateMap,
                  $author$project$Parse$int,
                  $dillonkearns$elm_cli_options_parser$Cli$Option$requiredKeywordArg("teamId")
                ),
                A2(
                  $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
                  A2(
                    $dillonkearns$elm_cli_options_parser$Cli$Option$validateMap,
                    $author$project$Parse$int,
                    $dillonkearns$elm_cli_options_parser$Cli$Option$requiredKeywordArg("organizationId")
                  ),
                  A2(
                    $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
                    $dillonkearns$elm_cli_options_parser$Cli$Option$flag("draft"),
                    A2(
                      $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
                      A2(
                        $dillonkearns$elm_cli_options_parser$Cli$Option$validateMapIfPresent,
                        $author$project$Parse$int,
                        $dillonkearns$elm_cli_options_parser$Cli$Option$optionalKeywordArg("blueprintId")
                      ),
                      A2(
                        $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
                        A2(
                          $dillonkearns$elm_cli_options_parser$Cli$Option$validateMap,
                          $author$project$Parse$int,
                          $dillonkearns$elm_cli_options_parser$Cli$Option$requiredKeywordArg("scenarioId")
                        ),
                        A2($dillonkearns$elm_cli_options_parser$Cli$OptionsParser$buildSubCommand, "scenarios:pull", $author$project$Custom$Command$Scenarios$Pull$Options)
                      )
                    )
                  )
                )
              )
            )
          )
        )
      );
      var $author$project$Custom$Command$Scenarios$Push$Options = F8(
        function(teamId, organizationId, _package, updateScenarioId, mapConnections, output, domain, token) {
          return { dg: domain, aZ: mapConnections, a3: organizationId, aF: output, u: _package, ba: teamId, I: token, cO: updateScenarioId };
        }
      );
      var $author$project$Custom$Command$Scenarios$Push$command = A2(
        $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
        $author$project$Token$fromOptionalOption(
          $dillonkearns$elm_cli_options_parser$Cli$Option$optionalKeywordArg("token")
        ),
        A2(
          $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
          $dillonkearns$elm_cli_options_parser$Cli$Option$optionalKeywordArg("domain"),
          A2(
            $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
            $dillonkearns$elm_cli_options_parser$Cli$Option$optionalKeywordArg("output"),
            A2(
              $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
              $dillonkearns$elm_cli_options_parser$Cli$Option$flag("mapConnections"),
              A2(
                $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
                A2(
                  $dillonkearns$elm_cli_options_parser$Cli$Option$validateMapIfPresent,
                  $author$project$Parse$int,
                  $dillonkearns$elm_cli_options_parser$Cli$Option$optionalKeywordArg("updateScenarioId")
                ),
                A2(
                  $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
                  $dillonkearns$elm_cli_options_parser$Cli$Option$requiredKeywordArg("package"),
                  A2(
                    $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
                    A2(
                      $dillonkearns$elm_cli_options_parser$Cli$Option$validateMap,
                      $author$project$Parse$int,
                      $dillonkearns$elm_cli_options_parser$Cli$Option$requiredKeywordArg("organizationId")
                    ),
                    A2(
                      $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
                      A2(
                        $dillonkearns$elm_cli_options_parser$Cli$Option$validateMap,
                        $author$project$Parse$int,
                        $dillonkearns$elm_cli_options_parser$Cli$Option$requiredKeywordArg("teamId")
                      ),
                      A2($dillonkearns$elm_cli_options_parser$Cli$OptionsParser$buildSubCommand, "scenarios:push", $author$project$Custom$Command$Scenarios$Push$Options)
                    )
                  )
                )
              )
            )
          )
        )
      );
      var $elm$core$Tuple$mapSecond = F2(
        function(func, _v0) {
          var x = _v0.a;
          var y = _v0.b;
          return _Utils_Tuple2(
            x,
            func(y)
          );
        }
      );
      var $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$map = F2(
        function(mapFunction, optionsParser) {
          var decoder = optionsParser.N;
          return A2(
            $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$updateDecoder,
            A2(
              $elm$core$Basics$composeR,
              decoder,
              $elm$core$Result$map(
                $elm$core$Tuple$mapSecond(mapFunction)
              )
            ),
            optionsParser
          );
        }
      );
      var $author$project$Custom$Command$commands = _List_fromArray(
        [
          A2($dillonkearns$elm_cli_options_parser$Cli$OptionsParser$map, $author$project$Custom$Command$PullApp, $author$project$Custom$Command$Apps$Pull$command),
          A2($dillonkearns$elm_cli_options_parser$Cli$OptionsParser$map, $author$project$Custom$Command$PushApp, $author$project$Custom$Command$Apps$Push$command),
          A2($dillonkearns$elm_cli_options_parser$Cli$OptionsParser$map, $author$project$Custom$Command$PullScenario, $author$project$Custom$Command$Scenarios$Pull$command),
          A2($dillonkearns$elm_cli_options_parser$Cli$OptionsParser$map, $author$project$Custom$Command$PushScenario, $author$project$Custom$Command$Scenarios$Push$command)
        ]
      );
      var $author$project$Gen$Command$CreateDataStores = function(a) {
        return { $: 36, a };
      };
      var $author$project$Gen$Command$CreateDataStructures = function(a) {
        return { $: 37, a };
      };
      var $author$project$Gen$Command$CreateHooks = function(a) {
        return { $: 42, a };
      };
      var $author$project$Gen$Command$CreateScenarios = function(a) {
        return { $: 47, a };
      };
      var $author$project$Gen$Command$CreateScenariosClone = function(a) {
        return { $: 49, a };
      };
      var $author$project$Gen$Command$GetAppsConnectionsSections = function(a) {
        return { $: 11, a };
      };
      var $author$project$Gen$Command$GetAppsFunctions = function(a) {
        return { $: 28, a };
      };
      var $author$project$Gen$Command$GetAppsFunctionsCode = function(a) {
        return { $: 29, a };
      };
      var $author$project$Gen$Command$GetAppsFunctionsTest = function(a) {
        return { $: 31, a };
      };
      var $author$project$Gen$Command$GetAppsIcon = function(a) {
        return { $: 3, a };
      };
      var $author$project$Gen$Command$GetAppsMetadata = function(a) {
        return { $: 1, a };
      };
      var $author$project$Gen$Command$GetAppsModule = function(a) {
        return { $: 14, a };
      };
      var $author$project$Gen$Command$GetAppsModules = function(a) {
        return { $: 13, a };
      };
      var $author$project$Gen$Command$GetAppsModulesSections = function(a) {
        return { $: 16, a };
      };
      var $author$project$Gen$Command$GetAppsReadme = function(a) {
        return { $: 7, a };
      };
      var $author$project$Gen$Command$GetAppsRpc = function(a) {
        return { $: 19, a };
      };
      var $author$project$Gen$Command$GetAppsRpcs = function(a) {
        return { $: 18, a };
      };
      var $author$project$Gen$Command$GetAppsRpcsSections = function(a) {
        return { $: 21, a };
      };
      var $author$project$Gen$Command$GetAppsSections = function(a) {
        return { $: 5, a };
      };
      var $author$project$Gen$Command$GetAppsWebhooksSections = function(a) {
        return { $: 26, a };
      };
      var $author$project$Gen$Command$GetConnection = function(a) {
        return { $: 33, a };
      };
      var $author$project$Gen$Command$GetDataStores = function(a) {
        return { $: 35, a };
      };
      var $author$project$Gen$Command$GetHooks = function(a) {
        return { $: 41, a };
      };
      var $author$project$Gen$Command$GetOrganizationsVariables = function(a) {
        return { $: 44, a };
      };
      var $author$project$Gen$Command$GetScenarios = function(a) {
        return { $: 46, a };
      };
      var $author$project$Gen$Command$GetScenariosBlueprints = function(a) {
        return { $: 50, a };
      };
      var $author$project$Gen$Command$GetTeamsVariables = function(a) {
        return { $: 51, a };
      };
      var $author$project$Gen$Command$ListApps = function(a) {
        return { $: 0, a };
      };
      var $author$project$Gen$Command$ListAppsConnections = function(a) {
        return { $: 9, a };
      };
      var $author$project$Gen$Command$ListAppsWebhook = function(a) {
        return { $: 24, a };
      };
      var $author$project$Gen$Command$ListAppsWebhooks = function(a) {
        return { $: 23, a };
      };
      var $author$project$Gen$Command$ListConnections = function(a) {
        return { $: 34, a };
      };
      var $author$project$Gen$Command$ListEnumsCountries = function(a) {
        return { $: 39, a };
      };
      var $author$project$Gen$Command$ListHooks = function(a) {
        return { $: 40, a };
      };
      var $author$project$Gen$Command$ListOrganizations = function(a) {
        return { $: 43, a };
      };
      var $author$project$Gen$Command$ListScenarios = function(a) {
        return { $: 45, a };
      };
      var $author$project$Gen$Command$SetAppsConnectionsSections = function(a) {
        return { $: 12, a };
      };
      var $author$project$Gen$Command$SetAppsFunctionsCode = function(a) {
        return { $: 30, a };
      };
      var $author$project$Gen$Command$SetAppsFunctionsTest = function(a) {
        return { $: 32, a };
      };
      var $author$project$Gen$Command$SetAppsIcon = function(a) {
        return { $: 4, a };
      };
      var $author$project$Gen$Command$SetAppsModulesSections = function(a) {
        return { $: 17, a };
      };
      var $author$project$Gen$Command$SetAppsReadme = function(a) {
        return { $: 8, a };
      };
      var $author$project$Gen$Command$SetAppsRpcsSections = function(a) {
        return { $: 22, a };
      };
      var $author$project$Gen$Command$SetAppsSections = function(a) {
        return { $: 6, a };
      };
      var $author$project$Gen$Command$SetAppsWebhooksSections = function(a) {
        return { $: 27, a };
      };
      var $author$project$Gen$Command$UpdateAppsConnectionsMetadata = function(a) {
        return { $: 10, a };
      };
      var $author$project$Gen$Command$UpdateAppsMetadata = function(a) {
        return { $: 2, a };
      };
      var $author$project$Gen$Command$UpdateAppsModule = function(a) {
        return { $: 15, a };
      };
      var $author$project$Gen$Command$UpdateAppsRpc = function(a) {
        return { $: 20, a };
      };
      var $author$project$Gen$Command$UpdateAppsWebhook = function(a) {
        return { $: 25, a };
      };
      var $author$project$Gen$Command$UpdateDataStructures = function(a) {
        return { $: 38, a };
      };
      var $author$project$Gen$Command$UpdateScenarios = function(a) {
        return { $: 48, a };
      };
      var $author$project$Gen$Command$Apps$Connections$List$Options = F6(
        function(domain, token, output, sDKAppName, all, opensource) {
          return { f: all, dg: domain, h: opensource, aF: output, b: sDKAppName, I: token };
        }
      );
      var $author$project$Gen$Command$Apps$Connections$List$command = A2(
        $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$withDoc,
        "Retrieves a list of all apps available to the user.<br />\n",
        A2(
          $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
          $dillonkearns$elm_cli_options_parser$Cli$Option$flag("opensource"),
          A2(
            $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
            $dillonkearns$elm_cli_options_parser$Cli$Option$flag("all"),
            A2(
              $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
              $dillonkearns$elm_cli_options_parser$Cli$Option$requiredKeywordArg("sDKAppName"),
              A2(
                $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
                $dillonkearns$elm_cli_options_parser$Cli$Option$optionalKeywordArg("output"),
                A2(
                  $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
                  $author$project$Token$fromOptionalOption(
                    $dillonkearns$elm_cli_options_parser$Cli$Option$optionalKeywordArg("token")
                  ),
                  A2(
                    $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
                    $dillonkearns$elm_cli_options_parser$Cli$Option$optionalKeywordArg("domain"),
                    A2($dillonkearns$elm_cli_options_parser$Cli$OptionsParser$buildSubCommand, "apps:connections:list", $author$project$Gen$Command$Apps$Connections$List$Options)
                  )
                )
              )
            )
          )
        )
      );
      var $author$project$Gen$Command$Apps$Connections$Metadata$Update$Options = F7(
        function(domain, token, output, sDKConnectionName, all, opensource, label) {
          return { f: all, dg: domain, bU: label, h: opensource, aF: output, dO: sDKConnectionName, I: token };
        }
      );
      var $author$project$Gen$Command$Apps$Connections$Metadata$Update$command = A2(
        $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$withDoc,
        "Retrieves a list of all apps available to the user.<br />\n",
        A2(
          $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
          $dillonkearns$elm_cli_options_parser$Cli$Option$optionalKeywordArg("label"),
          A2(
            $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
            $dillonkearns$elm_cli_options_parser$Cli$Option$flag("opensource"),
            A2(
              $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
              $dillonkearns$elm_cli_options_parser$Cli$Option$flag("all"),
              A2(
                $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
                $dillonkearns$elm_cli_options_parser$Cli$Option$requiredKeywordArg("sDKConnectionName"),
                A2(
                  $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
                  $dillonkearns$elm_cli_options_parser$Cli$Option$optionalKeywordArg("output"),
                  A2(
                    $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
                    $author$project$Token$fromOptionalOption(
                      $dillonkearns$elm_cli_options_parser$Cli$Option$optionalKeywordArg("token")
                    ),
                    A2(
                      $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
                      $dillonkearns$elm_cli_options_parser$Cli$Option$optionalKeywordArg("domain"),
                      A2($dillonkearns$elm_cli_options_parser$Cli$OptionsParser$buildSubCommand, "apps:connections:metadata:update", $author$project$Gen$Command$Apps$Connections$Metadata$Update$Options)
                    )
                  )
                )
              )
            )
          )
        )
      );
      var $author$project$Gen$Command$Apps$Connections$Sections$Get$Options = F7(
        function(domain, token, output, sDKConnectionName, sDKConnectionSection, all, opensource) {
          return { f: all, dg: domain, h: opensource, aF: output, dO: sDKConnectionName, dP: sDKConnectionSection, I: token };
        }
      );
      var $author$project$Gen$Command$Apps$Connections$Sections$Get$command = A2(
        $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$withDoc,
        "Available sections: api, parameters, scopes, scope, install, installSpec<br />\n",
        A2(
          $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
          $dillonkearns$elm_cli_options_parser$Cli$Option$flag("opensource"),
          A2(
            $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
            $dillonkearns$elm_cli_options_parser$Cli$Option$flag("all"),
            A2(
              $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
              $dillonkearns$elm_cli_options_parser$Cli$Option$requiredKeywordArg("sDKConnectionSection"),
              A2(
                $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
                $dillonkearns$elm_cli_options_parser$Cli$Option$requiredKeywordArg("sDKConnectionName"),
                A2(
                  $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
                  $dillonkearns$elm_cli_options_parser$Cli$Option$optionalKeywordArg("output"),
                  A2(
                    $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
                    $author$project$Token$fromOptionalOption(
                      $dillonkearns$elm_cli_options_parser$Cli$Option$optionalKeywordArg("token")
                    ),
                    A2(
                      $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
                      $dillonkearns$elm_cli_options_parser$Cli$Option$optionalKeywordArg("domain"),
                      A2($dillonkearns$elm_cli_options_parser$Cli$OptionsParser$buildSubCommand, "apps:connections:sections:get", $author$project$Gen$Command$Apps$Connections$Sections$Get$Options)
                    )
                  )
                )
              )
            )
          )
        )
      );
      var $author$project$Gen$Command$Apps$Connections$Sections$Set$Options = F8(
        function(domain, token, output, sDKConnectionName, sDKConnectionSection, all, opensource, body) {
          return { f: all, F: body, dg: domain, h: opensource, aF: output, dO: sDKConnectionName, dP: sDKConnectionSection, I: token };
        }
      );
      var $author$project$Api$Body$ApplicationJson = function(a) {
        return { $: 3, a };
      };
      var $author$project$Api$Body$applicationJson = function(jsonValue) {
        return $author$project$Api$Body$ApplicationJson(jsonValue);
      };
      var $elm$json$Json$Encode$object = function(pairs) {
        return _Json_wrap(
          A3(
            $elm$core$List$foldl,
            F2(
              function(_v0, obj) {
                var k = _v0.a;
                var v = _v0.b;
                return A3(_Json_addField, k, v, obj);
              }
            ),
            _Json_emptyObject(0),
            pairs
          )
        );
      };
      var $author$project$Parse$jsonValue = function(_v0) {
        return $elm$core$Result$Ok(
          $elm$json$Json$Encode$object(_List_Nil)
        );
      };
      var $dillonkearns$elm_cli_options_parser$Cli$Decode$map = F2(
        function(mapFunction, _v0) {
          var _function = _v0;
          return A2(
            $elm$core$Basics$composeR,
            _function,
            function(fn) {
              return A2(
                $elm$core$Result$map,
                function(_v1) {
                  var validationErrors = _v1.a;
                  var value = _v1.b;
                  return _Utils_Tuple2(
                    validationErrors,
                    mapFunction(value)
                  );
                },
                fn
              );
            }
          );
        }
      );
      var $dillonkearns$elm_cli_options_parser$Cli$Option$map = F2(
        function(mapFn, option) {
          return A2(
            $dillonkearns$elm_cli_options_parser$Cli$Option$updateDecoder,
            function(decoder) {
              return A2($dillonkearns$elm_cli_options_parser$Cli$Decode$map, mapFn, decoder);
            },
            option
          );
        }
      );
      var $author$project$Gen$Command$Apps$Connections$Sections$Set$command = A2(
        $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$withDoc,
        "Available sections: api, parameters, scopes, scope, installSpec, install<br />\n",
        A2(
          $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
          A2(
            $dillonkearns$elm_cli_options_parser$Cli$Option$validateMap,
            $elm$core$Basics$identity,
            A2(
              $dillonkearns$elm_cli_options_parser$Cli$Option$map,
              $elm$core$Result$map($author$project$Api$Body$applicationJson),
              A2(
                $dillonkearns$elm_cli_options_parser$Cli$Option$map,
                $author$project$Parse$jsonValue,
                $dillonkearns$elm_cli_options_parser$Cli$Option$requiredKeywordArg("body")
              )
            )
          ),
          A2(
            $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
            $dillonkearns$elm_cli_options_parser$Cli$Option$flag("opensource"),
            A2(
              $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
              $dillonkearns$elm_cli_options_parser$Cli$Option$flag("all"),
              A2(
                $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
                $dillonkearns$elm_cli_options_parser$Cli$Option$requiredKeywordArg("sDKConnectionSection"),
                A2(
                  $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
                  $dillonkearns$elm_cli_options_parser$Cli$Option$requiredKeywordArg("sDKConnectionName"),
                  A2(
                    $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
                    $dillonkearns$elm_cli_options_parser$Cli$Option$optionalKeywordArg("output"),
                    A2(
                      $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
                      $author$project$Token$fromOptionalOption(
                        $dillonkearns$elm_cli_options_parser$Cli$Option$optionalKeywordArg("token")
                      ),
                      A2(
                        $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
                        $dillonkearns$elm_cli_options_parser$Cli$Option$optionalKeywordArg("domain"),
                        A2($dillonkearns$elm_cli_options_parser$Cli$OptionsParser$buildSubCommand, "apps:connections:sections:set", $author$project$Gen$Command$Apps$Connections$Sections$Set$Options)
                      )
                    )
                  )
                )
              )
            )
          )
        )
      );
      var $author$project$Gen$Command$Apps$Functions$Code$Get$Options = F8(
        function(domain, token, output, sDKAppName, sDKAppVersion, sDKFunctionName, all, opensource) {
          return { f: all, dg: domain, h: opensource, aF: output, b: sDKAppName, d: sDKAppVersion, cq: sDKFunctionName, I: token };
        }
      );
      var $author$project$Gen$Command$Apps$Functions$Code$Get$command = A2(
        $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$withDoc,
        "Retrieves a list of all apps available to the user.<br />\n",
        A2(
          $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
          $dillonkearns$elm_cli_options_parser$Cli$Option$flag("opensource"),
          A2(
            $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
            $dillonkearns$elm_cli_options_parser$Cli$Option$flag("all"),
            A2(
              $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
              $dillonkearns$elm_cli_options_parser$Cli$Option$requiredKeywordArg("sDKFunctionName"),
              A2(
                $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
                $dillonkearns$elm_cli_options_parser$Cli$Option$requiredKeywordArg("sDKAppVersion"),
                A2(
                  $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
                  $dillonkearns$elm_cli_options_parser$Cli$Option$requiredKeywordArg("sDKAppName"),
                  A2(
                    $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
                    $dillonkearns$elm_cli_options_parser$Cli$Option$optionalKeywordArg("output"),
                    A2(
                      $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
                      $author$project$Token$fromOptionalOption(
                        $dillonkearns$elm_cli_options_parser$Cli$Option$optionalKeywordArg("token")
                      ),
                      A2(
                        $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
                        $dillonkearns$elm_cli_options_parser$Cli$Option$optionalKeywordArg("domain"),
                        A2($dillonkearns$elm_cli_options_parser$Cli$OptionsParser$buildSubCommand, "apps:functions:code:get", $author$project$Gen$Command$Apps$Functions$Code$Get$Options)
                      )
                    )
                  )
                )
              )
            )
          )
        )
      );
      var $author$project$Gen$Command$Apps$Functions$Code$Set$Options = F9(
        function(domain, token, output, sDKAppName, sDKAppVersion, sDKFunctionName, all, opensource, body) {
          return { f: all, F: body, dg: domain, h: opensource, aF: output, b: sDKAppName, d: sDKAppVersion, cq: sDKFunctionName, I: token };
        }
      );
      var $author$project$Api$Body$TextPlain = function(a) {
        return { $: 0, a };
      };
      var $author$project$Api$Body$textPlain = function(text) {
        return $author$project$Api$Body$TextPlain(text);
      };
      var $author$project$Gen$Command$Apps$Functions$Code$Set$command = A2(
        $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$withDoc,
        "Retrieves a list of all apps available to the user.<br />\n",
        A2(
          $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
          A2(
            $dillonkearns$elm_cli_options_parser$Cli$Option$map,
            $author$project$Api$Body$textPlain,
            $dillonkearns$elm_cli_options_parser$Cli$Option$requiredKeywordArg("body")
          ),
          A2(
            $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
            $dillonkearns$elm_cli_options_parser$Cli$Option$flag("opensource"),
            A2(
              $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
              $dillonkearns$elm_cli_options_parser$Cli$Option$flag("all"),
              A2(
                $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
                $dillonkearns$elm_cli_options_parser$Cli$Option$requiredKeywordArg("sDKFunctionName"),
                A2(
                  $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
                  $dillonkearns$elm_cli_options_parser$Cli$Option$requiredKeywordArg("sDKAppVersion"),
                  A2(
                    $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
                    $dillonkearns$elm_cli_options_parser$Cli$Option$requiredKeywordArg("sDKAppName"),
                    A2(
                      $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
                      $dillonkearns$elm_cli_options_parser$Cli$Option$optionalKeywordArg("output"),
                      A2(
                        $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
                        $author$project$Token$fromOptionalOption(
                          $dillonkearns$elm_cli_options_parser$Cli$Option$optionalKeywordArg("token")
                        ),
                        A2(
                          $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
                          $dillonkearns$elm_cli_options_parser$Cli$Option$optionalKeywordArg("domain"),
                          A2($dillonkearns$elm_cli_options_parser$Cli$OptionsParser$buildSubCommand, "apps:functions:code:set", $author$project$Gen$Command$Apps$Functions$Code$Set$Options)
                        )
                      )
                    )
                  )
                )
              )
            )
          )
        )
      );
      var $author$project$Gen$Command$Apps$Functions$Get$Options = F7(
        function(domain, token, output, sDKAppName, sDKAppVersion, all, opensource) {
          return { f: all, dg: domain, h: opensource, aF: output, b: sDKAppName, d: sDKAppVersion, I: token };
        }
      );
      var $author$project$Gen$Command$Apps$Functions$Get$command = A2(
        $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$withDoc,
        "Retrieves a list of all apps available to the user.<br />\n",
        A2(
          $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
          $dillonkearns$elm_cli_options_parser$Cli$Option$flag("opensource"),
          A2(
            $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
            $dillonkearns$elm_cli_options_parser$Cli$Option$flag("all"),
            A2(
              $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
              $dillonkearns$elm_cli_options_parser$Cli$Option$requiredKeywordArg("sDKAppVersion"),
              A2(
                $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
                $dillonkearns$elm_cli_options_parser$Cli$Option$requiredKeywordArg("sDKAppName"),
                A2(
                  $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
                  $dillonkearns$elm_cli_options_parser$Cli$Option$optionalKeywordArg("output"),
                  A2(
                    $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
                    $author$project$Token$fromOptionalOption(
                      $dillonkearns$elm_cli_options_parser$Cli$Option$optionalKeywordArg("token")
                    ),
                    A2(
                      $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
                      $dillonkearns$elm_cli_options_parser$Cli$Option$optionalKeywordArg("domain"),
                      A2($dillonkearns$elm_cli_options_parser$Cli$OptionsParser$buildSubCommand, "apps:functions:get", $author$project$Gen$Command$Apps$Functions$Get$Options)
                    )
                  )
                )
              )
            )
          )
        )
      );
      var $author$project$Gen$Command$Apps$Functions$Test$Get$Options = F8(
        function(domain, token, output, sDKAppName, sDKAppVersion, sDKFunctionName, all, opensource) {
          return { f: all, dg: domain, h: opensource, aF: output, b: sDKAppName, d: sDKAppVersion, cq: sDKFunctionName, I: token };
        }
      );
      var $author$project$Gen$Command$Apps$Functions$Test$Get$command = A2(
        $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$withDoc,
        "Retrieves a list of all apps available to the user.<br />\n",
        A2(
          $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
          $dillonkearns$elm_cli_options_parser$Cli$Option$flag("opensource"),
          A2(
            $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
            $dillonkearns$elm_cli_options_parser$Cli$Option$flag("all"),
            A2(
              $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
              $dillonkearns$elm_cli_options_parser$Cli$Option$requiredKeywordArg("sDKFunctionName"),
              A2(
                $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
                $dillonkearns$elm_cli_options_parser$Cli$Option$requiredKeywordArg("sDKAppVersion"),
                A2(
                  $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
                  $dillonkearns$elm_cli_options_parser$Cli$Option$requiredKeywordArg("sDKAppName"),
                  A2(
                    $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
                    $dillonkearns$elm_cli_options_parser$Cli$Option$optionalKeywordArg("output"),
                    A2(
                      $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
                      $author$project$Token$fromOptionalOption(
                        $dillonkearns$elm_cli_options_parser$Cli$Option$optionalKeywordArg("token")
                      ),
                      A2(
                        $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
                        $dillonkearns$elm_cli_options_parser$Cli$Option$optionalKeywordArg("domain"),
                        A2($dillonkearns$elm_cli_options_parser$Cli$OptionsParser$buildSubCommand, "apps:functions:test:get", $author$project$Gen$Command$Apps$Functions$Test$Get$Options)
                      )
                    )
                  )
                )
              )
            )
          )
        )
      );
      var $author$project$Gen$Command$Apps$Functions$Test$Set$Options = F9(
        function(domain, token, output, sDKAppName, sDKAppVersion, sDKFunctionName, all, opensource, body) {
          return { f: all, F: body, dg: domain, h: opensource, aF: output, b: sDKAppName, d: sDKAppVersion, cq: sDKFunctionName, I: token };
        }
      );
      var $author$project$Gen$Command$Apps$Functions$Test$Set$command = A2(
        $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$withDoc,
        "Retrieves a list of all apps available to the user.<br />\n",
        A2(
          $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
          A2(
            $dillonkearns$elm_cli_options_parser$Cli$Option$map,
            $author$project$Api$Body$textPlain,
            $dillonkearns$elm_cli_options_parser$Cli$Option$requiredKeywordArg("body")
          ),
          A2(
            $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
            $dillonkearns$elm_cli_options_parser$Cli$Option$flag("opensource"),
            A2(
              $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
              $dillonkearns$elm_cli_options_parser$Cli$Option$flag("all"),
              A2(
                $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
                $dillonkearns$elm_cli_options_parser$Cli$Option$requiredKeywordArg("sDKFunctionName"),
                A2(
                  $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
                  $dillonkearns$elm_cli_options_parser$Cli$Option$requiredKeywordArg("sDKAppVersion"),
                  A2(
                    $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
                    $dillonkearns$elm_cli_options_parser$Cli$Option$requiredKeywordArg("sDKAppName"),
                    A2(
                      $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
                      $dillonkearns$elm_cli_options_parser$Cli$Option$optionalKeywordArg("output"),
                      A2(
                        $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
                        $author$project$Token$fromOptionalOption(
                          $dillonkearns$elm_cli_options_parser$Cli$Option$optionalKeywordArg("token")
                        ),
                        A2(
                          $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
                          $dillonkearns$elm_cli_options_parser$Cli$Option$optionalKeywordArg("domain"),
                          A2($dillonkearns$elm_cli_options_parser$Cli$OptionsParser$buildSubCommand, "apps:functions:test:set", $author$project$Gen$Command$Apps$Functions$Test$Set$Options)
                        )
                      )
                    )
                  )
                )
              )
            )
          )
        )
      );
      var $author$project$Gen$Command$Apps$Icon$Get$Options = F8(
        function(domain, token, output, sDKAppName, sDKAppVersion, sDKAppIconSize, all, opensource) {
          return { f: all, dg: domain, h: opensource, aF: output, dM: sDKAppIconSize, b: sDKAppName, d: sDKAppVersion, I: token };
        }
      );
      var $author$project$Gen$Command$Apps$Icon$Get$command = A2(
        $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$withDoc,
        "Retrieves a list of all apps available to the user.<br />\n",
        A2(
          $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
          $dillonkearns$elm_cli_options_parser$Cli$Option$flag("opensource"),
          A2(
            $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
            $dillonkearns$elm_cli_options_parser$Cli$Option$flag("all"),
            A2(
              $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
              $dillonkearns$elm_cli_options_parser$Cli$Option$requiredKeywordArg("sDKAppIconSize"),
              A2(
                $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
                $dillonkearns$elm_cli_options_parser$Cli$Option$requiredKeywordArg("sDKAppVersion"),
                A2(
                  $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
                  $dillonkearns$elm_cli_options_parser$Cli$Option$requiredKeywordArg("sDKAppName"),
                  A2(
                    $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
                    $dillonkearns$elm_cli_options_parser$Cli$Option$optionalKeywordArg("output"),
                    A2(
                      $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
                      $author$project$Token$fromOptionalOption(
                        $dillonkearns$elm_cli_options_parser$Cli$Option$optionalKeywordArg("token")
                      ),
                      A2(
                        $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
                        $dillonkearns$elm_cli_options_parser$Cli$Option$optionalKeywordArg("domain"),
                        A2($dillonkearns$elm_cli_options_parser$Cli$OptionsParser$buildSubCommand, "apps:icon:get", $author$project$Gen$Command$Apps$Icon$Get$Options)
                      )
                    )
                  )
                )
              )
            )
          )
        )
      );
      var $author$project$Gen$Command$Apps$Icon$Set$Options = F8(
        function(domain, token, output, sDKAppName, sDKAppVersion, all, opensource, body) {
          return { f: all, F: body, dg: domain, h: opensource, aF: output, b: sDKAppName, d: sDKAppVersion, I: token };
        }
      );
      var $author$project$Api$Body$ImagePng = function(a) {
        return { $: 5, a };
      };
      var $author$project$Api$Body$imagePng = $author$project$Api$Body$ImagePng;
      var $elm$core$Maybe$map = F2(
        function(f, maybe) {
          if (!maybe.$) {
            var value = maybe.a;
            return $elm$core$Maybe$Just(
              f(value)
            );
          } else {
            return $elm$core$Maybe$Nothing;
          }
        }
      );
      var $elm$bytes$Bytes$Encode$getWidth = function(builder) {
        switch (builder.$) {
          case 0:
            return 1;
          case 1:
            return 2;
          case 2:
            return 4;
          case 3:
            return 1;
          case 4:
            return 2;
          case 5:
            return 4;
          case 6:
            return 4;
          case 7:
            return 8;
          case 8:
            var w = builder.a;
            return w;
          case 9:
            var w = builder.a;
            return w;
          default:
            var bs = builder.a;
            return _Bytes_width(bs);
        }
      };
      var $elm$bytes$Bytes$LE = 0;
      var $elm$bytes$Bytes$Encode$write = F3(
        function(builder, mb, offset) {
          switch (builder.$) {
            case 0:
              var n = builder.a;
              return A3(_Bytes_write_i8, mb, offset, n);
            case 1:
              var e = builder.a;
              var n = builder.b;
              return A4(_Bytes_write_i16, mb, offset, n, !e);
            case 2:
              var e = builder.a;
              var n = builder.b;
              return A4(_Bytes_write_i32, mb, offset, n, !e);
            case 3:
              var n = builder.a;
              return A3(_Bytes_write_u8, mb, offset, n);
            case 4:
              var e = builder.a;
              var n = builder.b;
              return A4(_Bytes_write_u16, mb, offset, n, !e);
            case 5:
              var e = builder.a;
              var n = builder.b;
              return A4(_Bytes_write_u32, mb, offset, n, !e);
            case 6:
              var e = builder.a;
              var n = builder.b;
              return A4(_Bytes_write_f32, mb, offset, n, !e);
            case 7:
              var e = builder.a;
              var n = builder.b;
              return A4(_Bytes_write_f64, mb, offset, n, !e);
            case 8:
              var bs = builder.b;
              return A3($elm$bytes$Bytes$Encode$writeSequence, bs, mb, offset);
            case 9:
              var s = builder.b;
              return A3(_Bytes_write_string, mb, offset, s);
            default:
              var bs = builder.a;
              return A3(_Bytes_write_bytes, mb, offset, bs);
          }
        }
      );
      var $elm$bytes$Bytes$Encode$writeSequence = F3(
        function(builders, mb, offset) {
          writeSequence:
            while (true) {
              if (!builders.b) {
                return offset;
              } else {
                var b = builders.a;
                var bs = builders.b;
                var $temp$builders = bs, $temp$mb = mb, $temp$offset = A3($elm$bytes$Bytes$Encode$write, b, mb, offset);
                builders = $temp$builders;
                mb = $temp$mb;
                offset = $temp$offset;
                continue writeSequence;
              }
            }
        }
      );
      var $elm$bytes$Bytes$Encode$encode = _Bytes_encode;
      var $elm$core$String$length = _String_length;
      var $elm$core$String$slice = _String_slice;
      var $elm$core$String$dropLeft = F2(
        function(n, string) {
          return n < 1 ? string : A3(
            $elm$core$String$slice,
            n,
            $elm$core$String$length(string),
            string
          );
        }
      );
      var $elm$bytes$Bytes$BE = 1;
      var $danfishgold$base64_bytes$Encode$isValidChar = function(c) {
        if ($elm$core$Char$isAlphaNum(c)) {
          return true;
        } else {
          switch (c) {
            case "+":
              return true;
            case "/":
              return true;
            default:
              return false;
          }
        }
      };
      var $elm$core$Bitwise$or = _Bitwise_or;
      var $elm$bytes$Bytes$Encode$Seq = F2(
        function(a, b) {
          return { $: 8, a, b };
        }
      );
      var $elm$bytes$Bytes$Encode$getWidths = F2(
        function(width, builders) {
          getWidths:
            while (true) {
              if (!builders.b) {
                return width;
              } else {
                var b = builders.a;
                var bs = builders.b;
                var $temp$width = width + $elm$bytes$Bytes$Encode$getWidth(b), $temp$builders = bs;
                width = $temp$width;
                builders = $temp$builders;
                continue getWidths;
              }
            }
        }
      );
      var $elm$bytes$Bytes$Encode$sequence = function(builders) {
        return A2(
          $elm$bytes$Bytes$Encode$Seq,
          A2($elm$bytes$Bytes$Encode$getWidths, 0, builders),
          builders
        );
      };
      var $elm$core$Bitwise$shiftLeftBy = _Bitwise_shiftLeftBy;
      var $elm$core$Bitwise$shiftRightBy = _Bitwise_shiftRightBy;
      var $elm$core$Basics$ge = _Utils_ge;
      var $elm$core$Basics$negate = function(n) {
        return -n;
      };
      var $danfishgold$base64_bytes$Encode$unsafeConvertChar = function(_char) {
        var key = $elm$core$Char$toCode(_char);
        if (key >= 65 && key <= 90) {
          return key - 65;
        } else {
          if (key >= 97 && key <= 122) {
            return key - 97 + 26;
          } else {
            if (key >= 48 && key <= 57) {
              return key - 48 + 26 + 26;
            } else {
              switch (_char) {
                case "+":
                  return 62;
                case "/":
                  return 63;
                default:
                  return -1;
              }
            }
          }
        }
      };
      var $elm$bytes$Bytes$Encode$U16 = F2(
        function(a, b) {
          return { $: 4, a, b };
        }
      );
      var $elm$bytes$Bytes$Encode$unsignedInt16 = $elm$bytes$Bytes$Encode$U16;
      var $elm$bytes$Bytes$Encode$U8 = function(a) {
        return { $: 3, a };
      };
      var $elm$bytes$Bytes$Encode$unsignedInt8 = $elm$bytes$Bytes$Encode$U8;
      var $danfishgold$base64_bytes$Encode$encodeCharacters = F4(
        function(a, b, c, d) {
          if ($danfishgold$base64_bytes$Encode$isValidChar(a) && $danfishgold$base64_bytes$Encode$isValidChar(b)) {
            var n2 = $danfishgold$base64_bytes$Encode$unsafeConvertChar(b);
            var n1 = $danfishgold$base64_bytes$Encode$unsafeConvertChar(a);
            if ("=" === d) {
              if ("=" === c) {
                var n = n1 << 18 | n2 << 12;
                var b1 = n >> 16;
                return $elm$core$Maybe$Just(
                  $elm$bytes$Bytes$Encode$unsignedInt8(b1)
                );
              } else {
                if ($danfishgold$base64_bytes$Encode$isValidChar(c)) {
                  var n3 = $danfishgold$base64_bytes$Encode$unsafeConvertChar(c);
                  var n = n1 << 18 | n2 << 12 | n3 << 6;
                  var combined = n >> 8;
                  return $elm$core$Maybe$Just(
                    A2($elm$bytes$Bytes$Encode$unsignedInt16, 1, combined)
                  );
                } else {
                  return $elm$core$Maybe$Nothing;
                }
              }
            } else {
              if ($danfishgold$base64_bytes$Encode$isValidChar(c) && $danfishgold$base64_bytes$Encode$isValidChar(d)) {
                var n4 = $danfishgold$base64_bytes$Encode$unsafeConvertChar(d);
                var n3 = $danfishgold$base64_bytes$Encode$unsafeConvertChar(c);
                var n = n1 << 18 | n2 << 12 | (n3 << 6 | n4);
                var combined = n >> 8;
                var b3 = n;
                return $elm$core$Maybe$Just(
                  $elm$bytes$Bytes$Encode$sequence(
                    _List_fromArray(
                      [
                        A2($elm$bytes$Bytes$Encode$unsignedInt16, 1, combined),
                        $elm$bytes$Bytes$Encode$unsignedInt8(b3)
                      ]
                    )
                  )
                );
              } else {
                return $elm$core$Maybe$Nothing;
              }
            }
          } else {
            return $elm$core$Maybe$Nothing;
          }
        }
      );
      var $elm$core$String$left = F2(
        function(n, string) {
          return n < 1 ? "" : A3($elm$core$String$slice, 0, n, string);
        }
      );
      var $elm$core$String$foldr = _String_foldr;
      var $elm$core$String$toList = function(string) {
        return A3($elm$core$String$foldr, $elm$core$List$cons, _List_Nil, string);
      };
      var $danfishgold$base64_bytes$Encode$encodeChunks = F2(
        function(input, accum) {
          encodeChunks:
            while (true) {
              var _v0 = $elm$core$String$toList(
                A2($elm$core$String$left, 4, input)
              );
              _v0$4:
                while (true) {
                  if (!_v0.b) {
                    return $elm$core$Maybe$Just(accum);
                  } else {
                    if (_v0.b.b) {
                      if (_v0.b.b.b) {
                        if (_v0.b.b.b.b) {
                          if (!_v0.b.b.b.b.b) {
                            var a = _v0.a;
                            var _v1 = _v0.b;
                            var b = _v1.a;
                            var _v2 = _v1.b;
                            var c = _v2.a;
                            var _v3 = _v2.b;
                            var d = _v3.a;
                            var _v4 = A4($danfishgold$base64_bytes$Encode$encodeCharacters, a, b, c, d);
                            if (!_v4.$) {
                              var enc = _v4.a;
                              var $temp$input = A2($elm$core$String$dropLeft, 4, input), $temp$accum = A2($elm$core$List$cons, enc, accum);
                              input = $temp$input;
                              accum = $temp$accum;
                              continue encodeChunks;
                            } else {
                              return $elm$core$Maybe$Nothing;
                            }
                          } else {
                            break _v0$4;
                          }
                        } else {
                          var a = _v0.a;
                          var _v5 = _v0.b;
                          var b = _v5.a;
                          var _v6 = _v5.b;
                          var c = _v6.a;
                          var _v7 = A4($danfishgold$base64_bytes$Encode$encodeCharacters, a, b, c, "=");
                          if (_v7.$ === 1) {
                            return $elm$core$Maybe$Nothing;
                          } else {
                            var enc = _v7.a;
                            return $elm$core$Maybe$Just(
                              A2($elm$core$List$cons, enc, accum)
                            );
                          }
                        }
                      } else {
                        var a = _v0.a;
                        var _v8 = _v0.b;
                        var b = _v8.a;
                        var _v9 = A4($danfishgold$base64_bytes$Encode$encodeCharacters, a, b, "=", "=");
                        if (_v9.$ === 1) {
                          return $elm$core$Maybe$Nothing;
                        } else {
                          var enc = _v9.a;
                          return $elm$core$Maybe$Just(
                            A2($elm$core$List$cons, enc, accum)
                          );
                        }
                      }
                    } else {
                      break _v0$4;
                    }
                  }
                }
              return $elm$core$Maybe$Nothing;
            }
        }
      );
      var $danfishgold$base64_bytes$Encode$encoder = function(string) {
        return A2(
          $elm$core$Maybe$map,
          A2($elm$core$Basics$composeR, $elm$core$List$reverse, $elm$bytes$Bytes$Encode$sequence),
          A2($danfishgold$base64_bytes$Encode$encodeChunks, string, _List_Nil)
        );
      };
      var $danfishgold$base64_bytes$Encode$toBytes = function(string) {
        return A2(
          $elm$core$Maybe$map,
          $elm$bytes$Bytes$Encode$encode,
          $danfishgold$base64_bytes$Encode$encoder(string)
        );
      };
      var $danfishgold$base64_bytes$Base64$toBytes = $danfishgold$base64_bytes$Encode$toBytes;
      var $author$project$Gen$Command$Apps$Icon$Set$command = A2(
        $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$withDoc,
        "Retrieves a list of all apps available to the user.<br />\n",
        A2(
          $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
          A2(
            $dillonkearns$elm_cli_options_parser$Cli$Option$validateMap,
            $elm$core$Result$fromMaybe("Could not parse Base64 input."),
            A2(
              $dillonkearns$elm_cli_options_parser$Cli$Option$map,
              $elm$core$Maybe$map($author$project$Api$Body$imagePng),
              A2(
                $dillonkearns$elm_cli_options_parser$Cli$Option$map,
                $danfishgold$base64_bytes$Base64$toBytes,
                $dillonkearns$elm_cli_options_parser$Cli$Option$requiredKeywordArg("body")
              )
            )
          ),
          A2(
            $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
            $dillonkearns$elm_cli_options_parser$Cli$Option$flag("opensource"),
            A2(
              $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
              $dillonkearns$elm_cli_options_parser$Cli$Option$flag("all"),
              A2(
                $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
                $dillonkearns$elm_cli_options_parser$Cli$Option$requiredKeywordArg("sDKAppVersion"),
                A2(
                  $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
                  $dillonkearns$elm_cli_options_parser$Cli$Option$requiredKeywordArg("sDKAppName"),
                  A2(
                    $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
                    $dillonkearns$elm_cli_options_parser$Cli$Option$optionalKeywordArg("output"),
                    A2(
                      $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
                      $author$project$Token$fromOptionalOption(
                        $dillonkearns$elm_cli_options_parser$Cli$Option$optionalKeywordArg("token")
                      ),
                      A2(
                        $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
                        $dillonkearns$elm_cli_options_parser$Cli$Option$optionalKeywordArg("domain"),
                        A2($dillonkearns$elm_cli_options_parser$Cli$OptionsParser$buildSubCommand, "apps:icon:set", $author$project$Gen$Command$Apps$Icon$Set$Options)
                      )
                    )
                  )
                )
              )
            )
          )
        )
      );
      var $author$project$Gen$Command$Apps$List$Options = F5(
        function(domain, token, output, all, cols) {
          return { f: all, aO: cols, dg: domain, aF: output, I: token };
        }
      );
      var $elm$json$Json$Decode$decodeString = _Json_runOnString;
      var $elm$core$Result$mapError = F2(
        function(f, result) {
          if (!result.$) {
            var v = result.a;
            return $elm$core$Result$Ok(v);
          } else {
            var e = result.a;
            return $elm$core$Result$Err(
              f(e)
            );
          }
        }
      );
      var $elm$json$Json$Decode$string = _Json_decodeString;
      var $author$project$Parse$stringList = A2(
        $elm$core$Basics$composeR,
        $elm$json$Json$Decode$decodeString(
          $elm$json$Json$Decode$list($elm$json$Json$Decode$string)
        ),
        $elm$core$Result$mapError(
          function(_v0) {
            return "Expect array of strings";
          }
        )
      );
      var $author$project$Gen$Command$Apps$List$command = A2(
        $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$withDoc,
        "Retrieves a collection of all apps available to the authenticated user.",
        A2(
          $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
          A2(
            $dillonkearns$elm_cli_options_parser$Cli$Option$validateMapIfPresent,
            $author$project$Parse$stringList,
            $dillonkearns$elm_cli_options_parser$Cli$Option$optionalKeywordArg("cols")
          ),
          A2(
            $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
            $dillonkearns$elm_cli_options_parser$Cli$Option$flag("all"),
            A2(
              $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
              $dillonkearns$elm_cli_options_parser$Cli$Option$optionalKeywordArg("output"),
              A2(
                $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
                $author$project$Token$fromOptionalOption(
                  $dillonkearns$elm_cli_options_parser$Cli$Option$optionalKeywordArg("token")
                ),
                A2(
                  $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
                  $dillonkearns$elm_cli_options_parser$Cli$Option$optionalKeywordArg("domain"),
                  A2($dillonkearns$elm_cli_options_parser$Cli$OptionsParser$buildSubCommand, "apps:list", $author$project$Gen$Command$Apps$List$Options)
                )
              )
            )
          )
        )
      );
      var $author$project$Gen$Command$Apps$Metadata$Get$Options = F7(
        function(domain, token, output, sDKAppName, sDKAppVersion, all, opensource) {
          return { f: all, dg: domain, h: opensource, aF: output, b: sDKAppName, d: sDKAppVersion, I: token };
        }
      );
      var $author$project$Gen$Command$Apps$Metadata$Get$command = A2(
        $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$withDoc,
        "",
        A2(
          $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
          $dillonkearns$elm_cli_options_parser$Cli$Option$flag("opensource"),
          A2(
            $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
            $dillonkearns$elm_cli_options_parser$Cli$Option$flag("all"),
            A2(
              $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
              A2(
                $dillonkearns$elm_cli_options_parser$Cli$Option$validateMap,
                $author$project$Parse$int,
                $dillonkearns$elm_cli_options_parser$Cli$Option$requiredKeywordArg("sDKAppVersion")
              ),
              A2(
                $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
                $dillonkearns$elm_cli_options_parser$Cli$Option$requiredKeywordArg("sDKAppName"),
                A2(
                  $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
                  $dillonkearns$elm_cli_options_parser$Cli$Option$optionalKeywordArg("output"),
                  A2(
                    $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
                    $author$project$Token$fromOptionalOption(
                      $dillonkearns$elm_cli_options_parser$Cli$Option$optionalKeywordArg("token")
                    ),
                    A2(
                      $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
                      $dillonkearns$elm_cli_options_parser$Cli$Option$optionalKeywordArg("domain"),
                      A2($dillonkearns$elm_cli_options_parser$Cli$OptionsParser$buildSubCommand, "apps:metadata:get", $author$project$Gen$Command$Apps$Metadata$Get$Options)
                    )
                  )
                )
              )
            )
          )
        )
      );
      var $author$project$Gen$Command$Apps$Metadata$Update$Options = F8(
        function(domain, token, output, sDKAppName, sDKAppVersion, all, opensource, body) {
          return { f: all, F: body, dg: domain, h: opensource, aF: output, b: sDKAppName, d: sDKAppVersion, I: token };
        }
      );
      var $author$project$Gen$Command$Apps$Metadata$Update$command = A2(
        $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$withDoc,
        "",
        A2(
          $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
          A2(
            $dillonkearns$elm_cli_options_parser$Cli$Option$validateMap,
            $elm$core$Basics$identity,
            A2(
              $dillonkearns$elm_cli_options_parser$Cli$Option$map,
              $elm$core$Result$map($author$project$Api$Body$applicationJson),
              A2(
                $dillonkearns$elm_cli_options_parser$Cli$Option$map,
                $author$project$Parse$jsonValue,
                $dillonkearns$elm_cli_options_parser$Cli$Option$requiredKeywordArg("body")
              )
            )
          ),
          A2(
            $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
            $dillonkearns$elm_cli_options_parser$Cli$Option$flag("opensource"),
            A2(
              $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
              $dillonkearns$elm_cli_options_parser$Cli$Option$flag("all"),
              A2(
                $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
                A2(
                  $dillonkearns$elm_cli_options_parser$Cli$Option$validateMap,
                  $author$project$Parse$int,
                  $dillonkearns$elm_cli_options_parser$Cli$Option$requiredKeywordArg("sDKAppVersion")
                ),
                A2(
                  $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
                  $dillonkearns$elm_cli_options_parser$Cli$Option$requiredKeywordArg("sDKAppName"),
                  A2(
                    $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
                    $dillonkearns$elm_cli_options_parser$Cli$Option$optionalKeywordArg("output"),
                    A2(
                      $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
                      $author$project$Token$fromOptionalOption(
                        $dillonkearns$elm_cli_options_parser$Cli$Option$optionalKeywordArg("token")
                      ),
                      A2(
                        $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
                        $dillonkearns$elm_cli_options_parser$Cli$Option$optionalKeywordArg("domain"),
                        A2($dillonkearns$elm_cli_options_parser$Cli$OptionsParser$buildSubCommand, "apps:metadata:update", $author$project$Gen$Command$Apps$Metadata$Update$Options)
                      )
                    )
                  )
                )
              )
            )
          )
        )
      );
      var $author$project$Gen$Command$Apps$Module$Get$Options = F8(
        function(domain, token, output, sDKAppName, sDKAppVersion, sDKModuleName, all, opensource) {
          return { f: all, dg: domain, h: opensource, aF: output, b: sDKAppName, d: sDKAppVersion, cr: sDKModuleName, I: token };
        }
      );
      var $author$project$Gen$Command$Apps$Module$Get$command = A2(
        $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$withDoc,
        "Retrieves a list of all apps available to the user.<br />\n",
        A2(
          $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
          $dillonkearns$elm_cli_options_parser$Cli$Option$flag("opensource"),
          A2(
            $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
            $dillonkearns$elm_cli_options_parser$Cli$Option$flag("all"),
            A2(
              $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
              $dillonkearns$elm_cli_options_parser$Cli$Option$requiredKeywordArg("sDKModuleName"),
              A2(
                $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
                $dillonkearns$elm_cli_options_parser$Cli$Option$requiredKeywordArg("sDKAppVersion"),
                A2(
                  $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
                  $dillonkearns$elm_cli_options_parser$Cli$Option$requiredKeywordArg("sDKAppName"),
                  A2(
                    $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
                    $dillonkearns$elm_cli_options_parser$Cli$Option$optionalKeywordArg("output"),
                    A2(
                      $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
                      $author$project$Token$fromOptionalOption(
                        $dillonkearns$elm_cli_options_parser$Cli$Option$optionalKeywordArg("token")
                      ),
                      A2(
                        $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
                        $dillonkearns$elm_cli_options_parser$Cli$Option$optionalKeywordArg("domain"),
                        A2($dillonkearns$elm_cli_options_parser$Cli$OptionsParser$buildSubCommand, "apps:module:get", $author$project$Gen$Command$Apps$Module$Get$Options)
                      )
                    )
                  )
                )
              )
            )
          )
        )
      );
      var $author$project$Gen$Command$Apps$Module$Update$Options = function(domain) {
        return function(token) {
          return function(output) {
            return function(sDKAppName) {
              return function(sDKAppVersion) {
                return function(sDKModuleName) {
                  return function(all) {
                    return function(opensource) {
                      return function(label) {
                        return function(description) {
                          return function(connection) {
                            return { f: all, bp: connection, bv: description, dg: domain, bU: label, h: opensource, aF: output, b: sDKAppName, d: sDKAppVersion, cr: sDKModuleName, I: token };
                          };
                        };
                      };
                    };
                  };
                };
              };
            };
          };
        };
      };
      var $author$project$Gen$Command$Apps$Module$Update$command = A2(
        $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$withDoc,
        "Retrieves a list of all apps available to the user.<br />\n",
        A2(
          $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
          $dillonkearns$elm_cli_options_parser$Cli$Option$optionalKeywordArg("connection"),
          A2(
            $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
            $dillonkearns$elm_cli_options_parser$Cli$Option$optionalKeywordArg("description"),
            A2(
              $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
              $dillonkearns$elm_cli_options_parser$Cli$Option$optionalKeywordArg("label"),
              A2(
                $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
                $dillonkearns$elm_cli_options_parser$Cli$Option$flag("opensource"),
                A2(
                  $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
                  $dillonkearns$elm_cli_options_parser$Cli$Option$flag("all"),
                  A2(
                    $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
                    $dillonkearns$elm_cli_options_parser$Cli$Option$requiredKeywordArg("sDKModuleName"),
                    A2(
                      $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
                      $dillonkearns$elm_cli_options_parser$Cli$Option$requiredKeywordArg("sDKAppVersion"),
                      A2(
                        $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
                        $dillonkearns$elm_cli_options_parser$Cli$Option$requiredKeywordArg("sDKAppName"),
                        A2(
                          $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
                          $dillonkearns$elm_cli_options_parser$Cli$Option$optionalKeywordArg("output"),
                          A2(
                            $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
                            $author$project$Token$fromOptionalOption(
                              $dillonkearns$elm_cli_options_parser$Cli$Option$optionalKeywordArg("token")
                            ),
                            A2(
                              $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
                              $dillonkearns$elm_cli_options_parser$Cli$Option$optionalKeywordArg("domain"),
                              A2($dillonkearns$elm_cli_options_parser$Cli$OptionsParser$buildSubCommand, "apps:module:update", $author$project$Gen$Command$Apps$Module$Update$Options)
                            )
                          )
                        )
                      )
                    )
                  )
                )
              )
            )
          )
        )
      );
      var $author$project$Gen$Command$Apps$Modules$Get$Options = F7(
        function(domain, token, output, sDKAppName, sDKAppVersion, all, opensource) {
          return { f: all, dg: domain, h: opensource, aF: output, b: sDKAppName, d: sDKAppVersion, I: token };
        }
      );
      var $author$project$Gen$Command$Apps$Modules$Get$command = A2(
        $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$withDoc,
        "Retrieves a list of all apps available to the user.<br />\n",
        A2(
          $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
          $dillonkearns$elm_cli_options_parser$Cli$Option$flag("opensource"),
          A2(
            $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
            $dillonkearns$elm_cli_options_parser$Cli$Option$flag("all"),
            A2(
              $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
              $dillonkearns$elm_cli_options_parser$Cli$Option$requiredKeywordArg("sDKAppVersion"),
              A2(
                $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
                $dillonkearns$elm_cli_options_parser$Cli$Option$requiredKeywordArg("sDKAppName"),
                A2(
                  $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
                  $dillonkearns$elm_cli_options_parser$Cli$Option$optionalKeywordArg("output"),
                  A2(
                    $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
                    $author$project$Token$fromOptionalOption(
                      $dillonkearns$elm_cli_options_parser$Cli$Option$optionalKeywordArg("token")
                    ),
                    A2(
                      $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
                      $dillonkearns$elm_cli_options_parser$Cli$Option$optionalKeywordArg("domain"),
                      A2($dillonkearns$elm_cli_options_parser$Cli$OptionsParser$buildSubCommand, "apps:modules:get", $author$project$Gen$Command$Apps$Modules$Get$Options)
                    )
                  )
                )
              )
            )
          )
        )
      );
      var $author$project$Gen$Command$Apps$Modules$Sections$Get$Options = F9(
        function(domain, token, output, sDKAppName, sDKAppVersion, sDKModuleName, sDKModuleSection, all, opensource) {
          return { f: all, dg: domain, h: opensource, aF: output, b: sDKAppName, d: sDKAppVersion, cr: sDKModuleName, dQ: sDKModuleSection, I: token };
        }
      );
      var $author$project$Gen$Command$Apps$Modules$Sections$Get$command = A2(
        $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$withDoc,
        "Available sections: api, epoch, parameters, expect, interface, samples, scope<br />\n",
        A2(
          $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
          $dillonkearns$elm_cli_options_parser$Cli$Option$flag("opensource"),
          A2(
            $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
            $dillonkearns$elm_cli_options_parser$Cli$Option$flag("all"),
            A2(
              $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
              $dillonkearns$elm_cli_options_parser$Cli$Option$requiredKeywordArg("sDKModuleSection"),
              A2(
                $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
                $dillonkearns$elm_cli_options_parser$Cli$Option$requiredKeywordArg("sDKModuleName"),
                A2(
                  $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
                  $dillonkearns$elm_cli_options_parser$Cli$Option$requiredKeywordArg("sDKAppVersion"),
                  A2(
                    $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
                    $dillonkearns$elm_cli_options_parser$Cli$Option$requiredKeywordArg("sDKAppName"),
                    A2(
                      $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
                      $dillonkearns$elm_cli_options_parser$Cli$Option$optionalKeywordArg("output"),
                      A2(
                        $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
                        $author$project$Token$fromOptionalOption(
                          $dillonkearns$elm_cli_options_parser$Cli$Option$optionalKeywordArg("token")
                        ),
                        A2(
                          $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
                          $dillonkearns$elm_cli_options_parser$Cli$Option$optionalKeywordArg("domain"),
                          A2($dillonkearns$elm_cli_options_parser$Cli$OptionsParser$buildSubCommand, "apps:modules:sections:get", $author$project$Gen$Command$Apps$Modules$Sections$Get$Options)
                        )
                      )
                    )
                  )
                )
              )
            )
          )
        )
      );
      var $author$project$Gen$Command$Apps$Modules$Sections$Set$Options = function(domain) {
        return function(token) {
          return function(output) {
            return function(sDKAppName) {
              return function(sDKAppVersion) {
                return function(sDKModuleName) {
                  return function(sDKModuleSection) {
                    return function(all) {
                      return function(opensource) {
                        return function(url) {
                          return function(method) {
                            return function(qs) {
                              return function(body) {
                                return function(headers) {
                                  return function(response) {
                                    return { f: all, F: body, dg: domain, dk: headers, Y: method, h: opensource, aF: output, ag: qs, ah: response, b: sDKAppName, d: sDKAppVersion, cr: sDKModuleName, dQ: sDKModuleSection, I: token, E: url };
                                  };
                                };
                              };
                            };
                          };
                        };
                      };
                    };
                  };
                };
              };
            };
          };
        };
      };
      var $author$project$Gen$Command$Apps$Modules$Sections$Set$command = A2(
        $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$withDoc,
        "Available sections: api, epoch, parameters, expect, interface, samples, scope<br />\n",
        A2(
          $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
          A2(
            $dillonkearns$elm_cli_options_parser$Cli$Option$validateMapIfPresent,
            $author$project$Parse$jsonValue,
            $dillonkearns$elm_cli_options_parser$Cli$Option$optionalKeywordArg("response")
          ),
          A2(
            $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
            A2(
              $dillonkearns$elm_cli_options_parser$Cli$Option$validateMapIfPresent,
              $author$project$Parse$jsonValue,
              $dillonkearns$elm_cli_options_parser$Cli$Option$optionalKeywordArg("headers")
            ),
            A2(
              $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
              A2(
                $dillonkearns$elm_cli_options_parser$Cli$Option$validateMapIfPresent,
                $author$project$Parse$jsonValue,
                $dillonkearns$elm_cli_options_parser$Cli$Option$optionalKeywordArg("body")
              ),
              A2(
                $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
                A2(
                  $dillonkearns$elm_cli_options_parser$Cli$Option$validateMapIfPresent,
                  $author$project$Parse$jsonValue,
                  $dillonkearns$elm_cli_options_parser$Cli$Option$optionalKeywordArg("qs")
                ),
                A2(
                  $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
                  $dillonkearns$elm_cli_options_parser$Cli$Option$optionalKeywordArg("method"),
                  A2(
                    $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
                    $dillonkearns$elm_cli_options_parser$Cli$Option$optionalKeywordArg("url"),
                    A2(
                      $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
                      $dillonkearns$elm_cli_options_parser$Cli$Option$flag("opensource"),
                      A2(
                        $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
                        $dillonkearns$elm_cli_options_parser$Cli$Option$flag("all"),
                        A2(
                          $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
                          $dillonkearns$elm_cli_options_parser$Cli$Option$requiredKeywordArg("sDKModuleSection"),
                          A2(
                            $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
                            $dillonkearns$elm_cli_options_parser$Cli$Option$requiredKeywordArg("sDKModuleName"),
                            A2(
                              $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
                              $dillonkearns$elm_cli_options_parser$Cli$Option$requiredKeywordArg("sDKAppVersion"),
                              A2(
                                $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
                                $dillonkearns$elm_cli_options_parser$Cli$Option$requiredKeywordArg("sDKAppName"),
                                A2(
                                  $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
                                  $dillonkearns$elm_cli_options_parser$Cli$Option$optionalKeywordArg("output"),
                                  A2(
                                    $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
                                    $author$project$Token$fromOptionalOption(
                                      $dillonkearns$elm_cli_options_parser$Cli$Option$optionalKeywordArg("token")
                                    ),
                                    A2(
                                      $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
                                      $dillonkearns$elm_cli_options_parser$Cli$Option$optionalKeywordArg("domain"),
                                      A2($dillonkearns$elm_cli_options_parser$Cli$OptionsParser$buildSubCommand, "apps:modules:sections:set", $author$project$Gen$Command$Apps$Modules$Sections$Set$Options)
                                    )
                                  )
                                )
                              )
                            )
                          )
                        )
                      )
                    )
                  )
                )
              )
            )
          )
        )
      );
      var $author$project$Gen$Command$Apps$Readme$Get$Options = F7(
        function(domain, token, output, sDKAppName, sDKAppVersion, all, opensource) {
          return { f: all, dg: domain, h: opensource, aF: output, b: sDKAppName, d: sDKAppVersion, I: token };
        }
      );
      var $author$project$Gen$Command$Apps$Readme$Get$command = A2(
        $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$withDoc,
        "",
        A2(
          $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
          $dillonkearns$elm_cli_options_parser$Cli$Option$flag("opensource"),
          A2(
            $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
            $dillonkearns$elm_cli_options_parser$Cli$Option$flag("all"),
            A2(
              $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
              A2(
                $dillonkearns$elm_cli_options_parser$Cli$Option$validateMap,
                $author$project$Parse$int,
                $dillonkearns$elm_cli_options_parser$Cli$Option$requiredKeywordArg("sDKAppVersion")
              ),
              A2(
                $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
                $dillonkearns$elm_cli_options_parser$Cli$Option$requiredKeywordArg("sDKAppName"),
                A2(
                  $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
                  $dillonkearns$elm_cli_options_parser$Cli$Option$optionalKeywordArg("output"),
                  A2(
                    $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
                    $author$project$Token$fromOptionalOption(
                      $dillonkearns$elm_cli_options_parser$Cli$Option$optionalKeywordArg("token")
                    ),
                    A2(
                      $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
                      $dillonkearns$elm_cli_options_parser$Cli$Option$optionalKeywordArg("domain"),
                      A2($dillonkearns$elm_cli_options_parser$Cli$OptionsParser$buildSubCommand, "apps:readme:get", $author$project$Gen$Command$Apps$Readme$Get$Options)
                    )
                  )
                )
              )
            )
          )
        )
      );
      var $author$project$Gen$Command$Apps$Readme$Set$Options = F8(
        function(domain, token, output, sDKAppName, sDKAppVersion, all, opensource, body) {
          return { f: all, F: body, dg: domain, h: opensource, aF: output, b: sDKAppName, d: sDKAppVersion, I: token };
        }
      );
      var $author$project$Gen$Command$Apps$Readme$Set$command = A2(
        $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$withDoc,
        "",
        A2(
          $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
          A2(
            $dillonkearns$elm_cli_options_parser$Cli$Option$map,
            $author$project$Api$Body$textPlain,
            $dillonkearns$elm_cli_options_parser$Cli$Option$requiredKeywordArg("body")
          ),
          A2(
            $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
            $dillonkearns$elm_cli_options_parser$Cli$Option$flag("opensource"),
            A2(
              $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
              $dillonkearns$elm_cli_options_parser$Cli$Option$flag("all"),
              A2(
                $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
                $dillonkearns$elm_cli_options_parser$Cli$Option$requiredKeywordArg("sDKAppVersion"),
                A2(
                  $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
                  $dillonkearns$elm_cli_options_parser$Cli$Option$requiredKeywordArg("sDKAppName"),
                  A2(
                    $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
                    $dillonkearns$elm_cli_options_parser$Cli$Option$optionalKeywordArg("output"),
                    A2(
                      $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
                      $author$project$Token$fromOptionalOption(
                        $dillonkearns$elm_cli_options_parser$Cli$Option$optionalKeywordArg("token")
                      ),
                      A2(
                        $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
                        $dillonkearns$elm_cli_options_parser$Cli$Option$optionalKeywordArg("domain"),
                        A2($dillonkearns$elm_cli_options_parser$Cli$OptionsParser$buildSubCommand, "apps:readme:set", $author$project$Gen$Command$Apps$Readme$Set$Options)
                      )
                    )
                  )
                )
              )
            )
          )
        )
      );
      var $author$project$Gen$Command$Apps$Rpc$Get$Options = F8(
        function(domain, token, output, sDKAppName, sDKAppVersion, sDKRpcName, all, opensource) {
          return { f: all, dg: domain, h: opensource, aF: output, b: sDKAppName, d: sDKAppVersion, a6: sDKRpcName, I: token };
        }
      );
      var $author$project$Gen$Command$Apps$Rpc$Get$command = A2(
        $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$withDoc,
        "Retrieves a list of all apps available to the user.<br />\n",
        A2(
          $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
          $dillonkearns$elm_cli_options_parser$Cli$Option$flag("opensource"),
          A2(
            $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
            $dillonkearns$elm_cli_options_parser$Cli$Option$flag("all"),
            A2(
              $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
              $dillonkearns$elm_cli_options_parser$Cli$Option$requiredKeywordArg("sDKRpcName"),
              A2(
                $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
                $dillonkearns$elm_cli_options_parser$Cli$Option$requiredKeywordArg("sDKAppVersion"),
                A2(
                  $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
                  $dillonkearns$elm_cli_options_parser$Cli$Option$requiredKeywordArg("sDKAppName"),
                  A2(
                    $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
                    $dillonkearns$elm_cli_options_parser$Cli$Option$optionalKeywordArg("output"),
                    A2(
                      $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
                      $author$project$Token$fromOptionalOption(
                        $dillonkearns$elm_cli_options_parser$Cli$Option$optionalKeywordArg("token")
                      ),
                      A2(
                        $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
                        $dillonkearns$elm_cli_options_parser$Cli$Option$optionalKeywordArg("domain"),
                        A2($dillonkearns$elm_cli_options_parser$Cli$OptionsParser$buildSubCommand, "apps:rpc:get", $author$project$Gen$Command$Apps$Rpc$Get$Options)
                      )
                    )
                  )
                )
              )
            )
          )
        )
      );
      var $author$project$Gen$Command$Apps$Rpc$Update$Options = F9(
        function(domain, token, output, sDKAppName, sDKAppVersion, sDKRpcName, all, opensource, label) {
          return { f: all, dg: domain, bU: label, h: opensource, aF: output, b: sDKAppName, d: sDKAppVersion, a6: sDKRpcName, I: token };
        }
      );
      var $author$project$Gen$Command$Apps$Rpc$Update$command = A2(
        $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$withDoc,
        "Retrieves a list of all apps available to the user.<br />\n",
        A2(
          $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
          $dillonkearns$elm_cli_options_parser$Cli$Option$optionalKeywordArg("label"),
          A2(
            $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
            $dillonkearns$elm_cli_options_parser$Cli$Option$flag("opensource"),
            A2(
              $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
              $dillonkearns$elm_cli_options_parser$Cli$Option$flag("all"),
              A2(
                $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
                $dillonkearns$elm_cli_options_parser$Cli$Option$requiredKeywordArg("sDKRpcName"),
                A2(
                  $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
                  $dillonkearns$elm_cli_options_parser$Cli$Option$requiredKeywordArg("sDKAppVersion"),
                  A2(
                    $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
                    $dillonkearns$elm_cli_options_parser$Cli$Option$requiredKeywordArg("sDKAppName"),
                    A2(
                      $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
                      $dillonkearns$elm_cli_options_parser$Cli$Option$optionalKeywordArg("output"),
                      A2(
                        $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
                        $author$project$Token$fromOptionalOption(
                          $dillonkearns$elm_cli_options_parser$Cli$Option$optionalKeywordArg("token")
                        ),
                        A2(
                          $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
                          $dillonkearns$elm_cli_options_parser$Cli$Option$optionalKeywordArg("domain"),
                          A2($dillonkearns$elm_cli_options_parser$Cli$OptionsParser$buildSubCommand, "apps:rpc:update", $author$project$Gen$Command$Apps$Rpc$Update$Options)
                        )
                      )
                    )
                  )
                )
              )
            )
          )
        )
      );
      var $author$project$Gen$Command$Apps$Rpcs$Get$Options = F7(
        function(domain, token, output, sDKAppName, sDKAppVersion, all, opensource) {
          return { f: all, dg: domain, h: opensource, aF: output, b: sDKAppName, d: sDKAppVersion, I: token };
        }
      );
      var $author$project$Gen$Command$Apps$Rpcs$Get$command = A2(
        $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$withDoc,
        "Retrieves a list of all apps available to the user.<br />\n",
        A2(
          $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
          $dillonkearns$elm_cli_options_parser$Cli$Option$flag("opensource"),
          A2(
            $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
            $dillonkearns$elm_cli_options_parser$Cli$Option$flag("all"),
            A2(
              $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
              $dillonkearns$elm_cli_options_parser$Cli$Option$requiredKeywordArg("sDKAppVersion"),
              A2(
                $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
                $dillonkearns$elm_cli_options_parser$Cli$Option$requiredKeywordArg("sDKAppName"),
                A2(
                  $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
                  $dillonkearns$elm_cli_options_parser$Cli$Option$optionalKeywordArg("output"),
                  A2(
                    $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
                    $author$project$Token$fromOptionalOption(
                      $dillonkearns$elm_cli_options_parser$Cli$Option$optionalKeywordArg("token")
                    ),
                    A2(
                      $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
                      $dillonkearns$elm_cli_options_parser$Cli$Option$optionalKeywordArg("domain"),
                      A2($dillonkearns$elm_cli_options_parser$Cli$OptionsParser$buildSubCommand, "apps:rpcs:get", $author$project$Gen$Command$Apps$Rpcs$Get$Options)
                    )
                  )
                )
              )
            )
          )
        )
      );
      var $author$project$Gen$Command$Apps$Rpcs$Sections$Get$Options = F9(
        function(domain, token, output, sDKAppName, sDKAppVersion, sDKRpcName, sDKRpcSection, all, opensource) {
          return { f: all, dg: domain, h: opensource, aF: output, b: sDKAppName, d: sDKAppVersion, a6: sDKRpcName, cs: sDKRpcSection, I: token };
        }
      );
      var $author$project$Gen$Command$Apps$Rpcs$Sections$Get$command = A2(
        $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$withDoc,
        "Available sections: api, parameters<br />\n",
        A2(
          $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
          $dillonkearns$elm_cli_options_parser$Cli$Option$flag("opensource"),
          A2(
            $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
            $dillonkearns$elm_cli_options_parser$Cli$Option$flag("all"),
            A2(
              $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
              $dillonkearns$elm_cli_options_parser$Cli$Option$requiredKeywordArg("sDKRpcSection"),
              A2(
                $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
                $dillonkearns$elm_cli_options_parser$Cli$Option$requiredKeywordArg("sDKRpcName"),
                A2(
                  $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
                  $dillonkearns$elm_cli_options_parser$Cli$Option$requiredKeywordArg("sDKAppVersion"),
                  A2(
                    $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
                    $dillonkearns$elm_cli_options_parser$Cli$Option$requiredKeywordArg("sDKAppName"),
                    A2(
                      $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
                      $dillonkearns$elm_cli_options_parser$Cli$Option$optionalKeywordArg("output"),
                      A2(
                        $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
                        $author$project$Token$fromOptionalOption(
                          $dillonkearns$elm_cli_options_parser$Cli$Option$optionalKeywordArg("token")
                        ),
                        A2(
                          $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
                          $dillonkearns$elm_cli_options_parser$Cli$Option$optionalKeywordArg("domain"),
                          A2($dillonkearns$elm_cli_options_parser$Cli$OptionsParser$buildSubCommand, "apps:rpcs:sections:get", $author$project$Gen$Command$Apps$Rpcs$Sections$Get$Options)
                        )
                      )
                    )
                  )
                )
              )
            )
          )
        )
      );
      var $author$project$Gen$Command$Apps$Rpcs$Sections$Set$Options = function(domain) {
        return function(token) {
          return function(output) {
            return function(sDKAppName) {
              return function(sDKAppVersion) {
                return function(sDKRpcName) {
                  return function(sDKRpcSection) {
                    return function(all) {
                      return function(opensource) {
                        return function(url) {
                          return function(method) {
                            return function(qs) {
                              return function(body) {
                                return function(headers) {
                                  return function(response) {
                                    return { f: all, F: body, dg: domain, dk: headers, Y: method, h: opensource, aF: output, ag: qs, ah: response, b: sDKAppName, d: sDKAppVersion, a6: sDKRpcName, cs: sDKRpcSection, I: token, E: url };
                                  };
                                };
                              };
                            };
                          };
                        };
                      };
                    };
                  };
                };
              };
            };
          };
        };
      };
      var $author$project$Gen$Command$Apps$Rpcs$Sections$Set$command = A2(
        $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$withDoc,
        "Available sections: api, parameters<br />\n",
        A2(
          $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
          A2(
            $dillonkearns$elm_cli_options_parser$Cli$Option$validateMapIfPresent,
            $author$project$Parse$jsonValue,
            $dillonkearns$elm_cli_options_parser$Cli$Option$optionalKeywordArg("response")
          ),
          A2(
            $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
            A2(
              $dillonkearns$elm_cli_options_parser$Cli$Option$validateMapIfPresent,
              $author$project$Parse$jsonValue,
              $dillonkearns$elm_cli_options_parser$Cli$Option$optionalKeywordArg("headers")
            ),
            A2(
              $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
              A2(
                $dillonkearns$elm_cli_options_parser$Cli$Option$validateMapIfPresent,
                $author$project$Parse$jsonValue,
                $dillonkearns$elm_cli_options_parser$Cli$Option$optionalKeywordArg("body")
              ),
              A2(
                $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
                A2(
                  $dillonkearns$elm_cli_options_parser$Cli$Option$validateMapIfPresent,
                  $author$project$Parse$jsonValue,
                  $dillonkearns$elm_cli_options_parser$Cli$Option$optionalKeywordArg("qs")
                ),
                A2(
                  $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
                  $dillonkearns$elm_cli_options_parser$Cli$Option$optionalKeywordArg("method"),
                  A2(
                    $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
                    $dillonkearns$elm_cli_options_parser$Cli$Option$optionalKeywordArg("url"),
                    A2(
                      $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
                      $dillonkearns$elm_cli_options_parser$Cli$Option$flag("opensource"),
                      A2(
                        $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
                        $dillonkearns$elm_cli_options_parser$Cli$Option$flag("all"),
                        A2(
                          $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
                          $dillonkearns$elm_cli_options_parser$Cli$Option$requiredKeywordArg("sDKRpcSection"),
                          A2(
                            $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
                            $dillonkearns$elm_cli_options_parser$Cli$Option$requiredKeywordArg("sDKRpcName"),
                            A2(
                              $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
                              $dillonkearns$elm_cli_options_parser$Cli$Option$requiredKeywordArg("sDKAppVersion"),
                              A2(
                                $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
                                $dillonkearns$elm_cli_options_parser$Cli$Option$requiredKeywordArg("sDKAppName"),
                                A2(
                                  $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
                                  $dillonkearns$elm_cli_options_parser$Cli$Option$optionalKeywordArg("output"),
                                  A2(
                                    $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
                                    $author$project$Token$fromOptionalOption(
                                      $dillonkearns$elm_cli_options_parser$Cli$Option$optionalKeywordArg("token")
                                    ),
                                    A2(
                                      $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
                                      $dillonkearns$elm_cli_options_parser$Cli$Option$optionalKeywordArg("domain"),
                                      A2($dillonkearns$elm_cli_options_parser$Cli$OptionsParser$buildSubCommand, "apps:rpcs:sections:set", $author$project$Gen$Command$Apps$Rpcs$Sections$Set$Options)
                                    )
                                  )
                                )
                              )
                            )
                          )
                        )
                      )
                    )
                  )
                )
              )
            )
          )
        )
      );
      var $author$project$Gen$Command$Apps$Sections$Get$Options = F8(
        function(domain, token, output, sDKAppName, sDKAppVersion, sDKAppSection, all, opensource) {
          return { f: all, dg: domain, h: opensource, aF: output, b: sDKAppName, dN: sDKAppSection, d: sDKAppVersion, I: token };
        }
      );
      var $author$project$Gen$Command$Apps$Sections$Get$command = A2(
        $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$withDoc,
        "",
        A2(
          $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
          $dillonkearns$elm_cli_options_parser$Cli$Option$flag("opensource"),
          A2(
            $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
            $dillonkearns$elm_cli_options_parser$Cli$Option$flag("all"),
            A2(
              $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
              $dillonkearns$elm_cli_options_parser$Cli$Option$requiredKeywordArg("sDKAppSection"),
              A2(
                $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
                A2(
                  $dillonkearns$elm_cli_options_parser$Cli$Option$validateMap,
                  $author$project$Parse$int,
                  $dillonkearns$elm_cli_options_parser$Cli$Option$requiredKeywordArg("sDKAppVersion")
                ),
                A2(
                  $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
                  $dillonkearns$elm_cli_options_parser$Cli$Option$requiredKeywordArg("sDKAppName"),
                  A2(
                    $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
                    $dillonkearns$elm_cli_options_parser$Cli$Option$optionalKeywordArg("output"),
                    A2(
                      $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
                      $author$project$Token$fromOptionalOption(
                        $dillonkearns$elm_cli_options_parser$Cli$Option$optionalKeywordArg("token")
                      ),
                      A2(
                        $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
                        $dillonkearns$elm_cli_options_parser$Cli$Option$optionalKeywordArg("domain"),
                        A2($dillonkearns$elm_cli_options_parser$Cli$OptionsParser$buildSubCommand, "apps:sections:get", $author$project$Gen$Command$Apps$Sections$Get$Options)
                      )
                    )
                  )
                )
              )
            )
          )
        )
      );
      var $author$project$Gen$Command$Apps$Sections$Set$Options = F9(
        function(domain, token, output, sDKAppName, sDKAppVersion, sDKAppSection, all, opensource, body) {
          return { f: all, F: body, dg: domain, h: opensource, aF: output, b: sDKAppName, dN: sDKAppSection, d: sDKAppVersion, I: token };
        }
      );
      var $author$project$Gen$Command$Apps$Sections$Set$command = A2(
        $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$withDoc,
        "Available sections: base, groups, install, installSpec<br />\n",
        A2(
          $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
          A2(
            $dillonkearns$elm_cli_options_parser$Cli$Option$validateMap,
            $elm$core$Basics$identity,
            A2(
              $dillonkearns$elm_cli_options_parser$Cli$Option$map,
              $elm$core$Result$map($author$project$Api$Body$applicationJson),
              A2(
                $dillonkearns$elm_cli_options_parser$Cli$Option$map,
                $author$project$Parse$jsonValue,
                $dillonkearns$elm_cli_options_parser$Cli$Option$requiredKeywordArg("body")
              )
            )
          ),
          A2(
            $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
            $dillonkearns$elm_cli_options_parser$Cli$Option$flag("opensource"),
            A2(
              $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
              $dillonkearns$elm_cli_options_parser$Cli$Option$flag("all"),
              A2(
                $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
                $dillonkearns$elm_cli_options_parser$Cli$Option$requiredKeywordArg("sDKAppSection"),
                A2(
                  $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
                  A2(
                    $dillonkearns$elm_cli_options_parser$Cli$Option$validateMap,
                    $author$project$Parse$int,
                    $dillonkearns$elm_cli_options_parser$Cli$Option$requiredKeywordArg("sDKAppVersion")
                  ),
                  A2(
                    $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
                    $dillonkearns$elm_cli_options_parser$Cli$Option$requiredKeywordArg("sDKAppName"),
                    A2(
                      $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
                      $dillonkearns$elm_cli_options_parser$Cli$Option$optionalKeywordArg("output"),
                      A2(
                        $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
                        $author$project$Token$fromOptionalOption(
                          $dillonkearns$elm_cli_options_parser$Cli$Option$optionalKeywordArg("token")
                        ),
                        A2(
                          $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
                          $dillonkearns$elm_cli_options_parser$Cli$Option$optionalKeywordArg("domain"),
                          A2($dillonkearns$elm_cli_options_parser$Cli$OptionsParser$buildSubCommand, "apps:sections:set", $author$project$Gen$Command$Apps$Sections$Set$Options)
                        )
                      )
                    )
                  )
                )
              )
            )
          )
        )
      );
      var $author$project$Gen$Command$Apps$Webhook$List$Options = F6(
        function(domain, token, output, sDKWebhookName, all, opensource) {
          return { f: all, dg: domain, h: opensource, aF: output, ct: sDKWebhookName, I: token };
        }
      );
      var $author$project$Gen$Command$Apps$Webhook$List$command = A2(
        $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$withDoc,
        "Retrieves a list of all apps available to the user.<br />\n",
        A2(
          $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
          $dillonkearns$elm_cli_options_parser$Cli$Option$flag("opensource"),
          A2(
            $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
            $dillonkearns$elm_cli_options_parser$Cli$Option$flag("all"),
            A2(
              $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
              $dillonkearns$elm_cli_options_parser$Cli$Option$requiredKeywordArg("sDKWebhookName"),
              A2(
                $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
                $dillonkearns$elm_cli_options_parser$Cli$Option$optionalKeywordArg("output"),
                A2(
                  $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
                  $author$project$Token$fromOptionalOption(
                    $dillonkearns$elm_cli_options_parser$Cli$Option$optionalKeywordArg("token")
                  ),
                  A2(
                    $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
                    $dillonkearns$elm_cli_options_parser$Cli$Option$optionalKeywordArg("domain"),
                    A2($dillonkearns$elm_cli_options_parser$Cli$OptionsParser$buildSubCommand, "apps:webhook:list", $author$project$Gen$Command$Apps$Webhook$List$Options)
                  )
                )
              )
            )
          )
        )
      );
      var $author$project$Gen$Command$Apps$Webhook$Update$Options = F7(
        function(domain, token, output, sDKWebhookName, all, opensource, label) {
          return { f: all, dg: domain, bU: label, h: opensource, aF: output, ct: sDKWebhookName, I: token };
        }
      );
      var $author$project$Gen$Command$Apps$Webhook$Update$command = A2(
        $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$withDoc,
        "Retrieves a list of all apps available to the user.<br />\n",
        A2(
          $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
          $dillonkearns$elm_cli_options_parser$Cli$Option$optionalKeywordArg("label"),
          A2(
            $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
            $dillonkearns$elm_cli_options_parser$Cli$Option$flag("opensource"),
            A2(
              $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
              $dillonkearns$elm_cli_options_parser$Cli$Option$flag("all"),
              A2(
                $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
                $dillonkearns$elm_cli_options_parser$Cli$Option$requiredKeywordArg("sDKWebhookName"),
                A2(
                  $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
                  $dillonkearns$elm_cli_options_parser$Cli$Option$optionalKeywordArg("output"),
                  A2(
                    $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
                    $author$project$Token$fromOptionalOption(
                      $dillonkearns$elm_cli_options_parser$Cli$Option$optionalKeywordArg("token")
                    ),
                    A2(
                      $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
                      $dillonkearns$elm_cli_options_parser$Cli$Option$optionalKeywordArg("domain"),
                      A2($dillonkearns$elm_cli_options_parser$Cli$OptionsParser$buildSubCommand, "apps:webhook:update", $author$project$Gen$Command$Apps$Webhook$Update$Options)
                    )
                  )
                )
              )
            )
          )
        )
      );
      var $author$project$Gen$Command$Apps$Webhooks$List$Options = F6(
        function(domain, token, output, sDKAppName, all, opensource) {
          return { f: all, dg: domain, h: opensource, aF: output, b: sDKAppName, I: token };
        }
      );
      var $author$project$Gen$Command$Apps$Webhooks$List$command = A2(
        $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$withDoc,
        "Retrieves a list of all apps available to the user.<br />\n",
        A2(
          $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
          $dillonkearns$elm_cli_options_parser$Cli$Option$flag("opensource"),
          A2(
            $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
            $dillonkearns$elm_cli_options_parser$Cli$Option$flag("all"),
            A2(
              $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
              $dillonkearns$elm_cli_options_parser$Cli$Option$requiredKeywordArg("sDKAppName"),
              A2(
                $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
                $dillonkearns$elm_cli_options_parser$Cli$Option$optionalKeywordArg("output"),
                A2(
                  $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
                  $author$project$Token$fromOptionalOption(
                    $dillonkearns$elm_cli_options_parser$Cli$Option$optionalKeywordArg("token")
                  ),
                  A2(
                    $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
                    $dillonkearns$elm_cli_options_parser$Cli$Option$optionalKeywordArg("domain"),
                    A2($dillonkearns$elm_cli_options_parser$Cli$OptionsParser$buildSubCommand, "apps:webhooks:list", $author$project$Gen$Command$Apps$Webhooks$List$Options)
                  )
                )
              )
            )
          )
        )
      );
      var $author$project$Gen$Command$Apps$Webhooks$Sections$Get$Options = F8(
        function(domain, token, output, sDKWebhookName, sDKWebhookSection, all, opensource, api) {
          return { f: all, c2: api, dg: domain, h: opensource, aF: output, ct: sDKWebhookName, dR: sDKWebhookSection, I: token };
        }
      );
      var $author$project$Gen$Command$Apps$Webhooks$Sections$Get$command = A2(
        $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$withDoc,
        "Available sections are: api, parameters, attach, detach, scope<br />\n",
        A2(
          $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
          $dillonkearns$elm_cli_options_parser$Cli$Option$optionalKeywordArg("api"),
          A2(
            $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
            $dillonkearns$elm_cli_options_parser$Cli$Option$flag("opensource"),
            A2(
              $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
              $dillonkearns$elm_cli_options_parser$Cli$Option$flag("all"),
              A2(
                $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
                $dillonkearns$elm_cli_options_parser$Cli$Option$requiredKeywordArg("sDKWebhookSection"),
                A2(
                  $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
                  $dillonkearns$elm_cli_options_parser$Cli$Option$requiredKeywordArg("sDKWebhookName"),
                  A2(
                    $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
                    $dillonkearns$elm_cli_options_parser$Cli$Option$optionalKeywordArg("output"),
                    A2(
                      $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
                      $author$project$Token$fromOptionalOption(
                        $dillonkearns$elm_cli_options_parser$Cli$Option$optionalKeywordArg("token")
                      ),
                      A2(
                        $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
                        $dillonkearns$elm_cli_options_parser$Cli$Option$optionalKeywordArg("domain"),
                        A2($dillonkearns$elm_cli_options_parser$Cli$OptionsParser$buildSubCommand, "apps:webhooks:sections:get", $author$project$Gen$Command$Apps$Webhooks$Sections$Get$Options)
                      )
                    )
                  )
                )
              )
            )
          )
        )
      );
      var $author$project$Gen$Command$Apps$Webhooks$Sections$Set$Options = F8(
        function(domain, token, output, sDKWebhookName, sDKWebhookSection, all, opensource, body) {
          return { f: all, F: body, dg: domain, h: opensource, aF: output, ct: sDKWebhookName, dR: sDKWebhookSection, I: token };
        }
      );
      var $author$project$Gen$Command$Apps$Webhooks$Sections$Set$command = A2(
        $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$withDoc,
        "Available sections are: api, parameters, attach, detach, scope<br />\n",
        A2(
          $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
          A2(
            $dillonkearns$elm_cli_options_parser$Cli$Option$validateMap,
            $elm$core$Basics$identity,
            A2(
              $dillonkearns$elm_cli_options_parser$Cli$Option$map,
              $elm$core$Result$map($author$project$Api$Body$applicationJson),
              A2(
                $dillonkearns$elm_cli_options_parser$Cli$Option$map,
                $author$project$Parse$jsonValue,
                $dillonkearns$elm_cli_options_parser$Cli$Option$requiredKeywordArg("body")
              )
            )
          ),
          A2(
            $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
            $dillonkearns$elm_cli_options_parser$Cli$Option$flag("opensource"),
            A2(
              $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
              $dillonkearns$elm_cli_options_parser$Cli$Option$flag("all"),
              A2(
                $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
                $dillonkearns$elm_cli_options_parser$Cli$Option$requiredKeywordArg("sDKWebhookSection"),
                A2(
                  $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
                  $dillonkearns$elm_cli_options_parser$Cli$Option$requiredKeywordArg("sDKWebhookName"),
                  A2(
                    $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
                    $dillonkearns$elm_cli_options_parser$Cli$Option$optionalKeywordArg("output"),
                    A2(
                      $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
                      $author$project$Token$fromOptionalOption(
                        $dillonkearns$elm_cli_options_parser$Cli$Option$optionalKeywordArg("token")
                      ),
                      A2(
                        $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
                        $dillonkearns$elm_cli_options_parser$Cli$Option$optionalKeywordArg("domain"),
                        A2($dillonkearns$elm_cli_options_parser$Cli$OptionsParser$buildSubCommand, "apps:webhooks:sections:set", $author$project$Gen$Command$Apps$Webhooks$Sections$Set$Options)
                      )
                    )
                  )
                )
              )
            )
          )
        )
      );
      var $author$project$Gen$Command$Connection$Get$Options = F5(
        function(domain, token, output, connectionId, cols) {
          return { aO: cols, da: connectionId, dg: domain, aF: output, I: token };
        }
      );
      var $author$project$Gen$Command$Connection$Get$command = A2(
        $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$withDoc,
        "Retrieves details of a connection with a given ID.",
        A2(
          $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
          A2(
            $dillonkearns$elm_cli_options_parser$Cli$Option$validateMapIfPresent,
            $author$project$Parse$stringList,
            $dillonkearns$elm_cli_options_parser$Cli$Option$optionalKeywordArg("cols")
          ),
          A2(
            $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
            A2(
              $dillonkearns$elm_cli_options_parser$Cli$Option$validateMap,
              $author$project$Parse$int,
              $dillonkearns$elm_cli_options_parser$Cli$Option$requiredKeywordArg("connectionId")
            ),
            A2(
              $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
              $dillonkearns$elm_cli_options_parser$Cli$Option$optionalKeywordArg("output"),
              A2(
                $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
                $author$project$Token$fromOptionalOption(
                  $dillonkearns$elm_cli_options_parser$Cli$Option$optionalKeywordArg("token")
                ),
                A2(
                  $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
                  $dillonkearns$elm_cli_options_parser$Cli$Option$optionalKeywordArg("domain"),
                  A2($dillonkearns$elm_cli_options_parser$Cli$OptionsParser$buildSubCommand, "connection:get", $author$project$Gen$Command$Connection$Get$Options)
                )
              )
            )
          )
        )
      );
      var $author$project$Gen$Command$Connections$List$Options = F6(
        function(domain, token, output, teamId, type_, cols) {
          return { aO: cols, dg: domain, aF: output, ba: teamId, I: token, d0: type_ };
        }
      );
      var $author$project$Gen$Command$Connections$List$command = A2(
        $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$withDoc,
        "Retrieves a collection of all connections for a team with a given ID. Returned connections are sorted by name in ascending order.",
        A2(
          $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
          A2(
            $dillonkearns$elm_cli_options_parser$Cli$Option$validateMapIfPresent,
            $author$project$Parse$stringList,
            $dillonkearns$elm_cli_options_parser$Cli$Option$optionalKeywordArg("cols")
          ),
          A2(
            $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
            A2(
              $dillonkearns$elm_cli_options_parser$Cli$Option$validateMapIfPresent,
              $author$project$Parse$stringList,
              $dillonkearns$elm_cli_options_parser$Cli$Option$optionalKeywordArg("type")
            ),
            A2(
              $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
              A2(
                $dillonkearns$elm_cli_options_parser$Cli$Option$validateMap,
                $author$project$Parse$int,
                $dillonkearns$elm_cli_options_parser$Cli$Option$requiredKeywordArg("teamId")
              ),
              A2(
                $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
                $dillonkearns$elm_cli_options_parser$Cli$Option$optionalKeywordArg("output"),
                A2(
                  $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
                  $author$project$Token$fromOptionalOption(
                    $dillonkearns$elm_cli_options_parser$Cli$Option$optionalKeywordArg("token")
                  ),
                  A2(
                    $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
                    $dillonkearns$elm_cli_options_parser$Cli$Option$optionalKeywordArg("domain"),
                    A2($dillonkearns$elm_cli_options_parser$Cli$OptionsParser$buildSubCommand, "connections:list", $author$project$Gen$Command$Connections$List$Options)
                  )
                )
              )
            )
          )
        )
      );
      var $author$project$Gen$Command$DataStores$Create$Options = F7(
        function(domain, token, output, name, teamId, datastructureId, maxSizeMB) {
          return { bs: datastructureId, dg: domain, b$: maxSizeMB, b3: name, aF: output, ba: teamId, I: token };
        }
      );
      var $author$project$Gen$Command$DataStores$Create$command = A2(
        $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$withDoc,
        "Creates a new data store with data passed in the request body. In the response, it returns all details of the created data store.",
        A2(
          $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
          A2(
            $dillonkearns$elm_cli_options_parser$Cli$Option$validateMap,
            $author$project$Parse$int,
            $dillonkearns$elm_cli_options_parser$Cli$Option$requiredKeywordArg("maxSizeMB")
          ),
          A2(
            $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
            A2(
              $dillonkearns$elm_cli_options_parser$Cli$Option$validateMap,
              $author$project$Parse$int,
              $dillonkearns$elm_cli_options_parser$Cli$Option$requiredKeywordArg("datastructureId")
            ),
            A2(
              $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
              A2(
                $dillonkearns$elm_cli_options_parser$Cli$Option$validateMap,
                $author$project$Parse$int,
                $dillonkearns$elm_cli_options_parser$Cli$Option$requiredKeywordArg("teamId")
              ),
              A2(
                $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
                $dillonkearns$elm_cli_options_parser$Cli$Option$requiredKeywordArg("name"),
                A2(
                  $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
                  $dillonkearns$elm_cli_options_parser$Cli$Option$optionalKeywordArg("output"),
                  A2(
                    $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
                    $author$project$Token$fromOptionalOption(
                      $dillonkearns$elm_cli_options_parser$Cli$Option$optionalKeywordArg("token")
                    ),
                    A2(
                      $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
                      $dillonkearns$elm_cli_options_parser$Cli$Option$optionalKeywordArg("domain"),
                      A2($dillonkearns$elm_cli_options_parser$Cli$OptionsParser$buildSubCommand, "dataStores:create", $author$project$Gen$Command$DataStores$Create$Options)
                    )
                  )
                )
              )
            )
          )
        )
      );
      var $author$project$Gen$Command$DataStores$Get$Options = F5(
        function(domain, token, output, dataStoreId, cols) {
          return { aO: cols, df: dataStoreId, dg: domain, aF: output, I: token };
        }
      );
      var $author$project$Gen$Command$DataStores$Get$command = A2(
        $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$withDoc,
        "Retrieves details of a data store with a given ID.",
        A2(
          $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
          A2(
            $dillonkearns$elm_cli_options_parser$Cli$Option$validateMapIfPresent,
            $author$project$Parse$stringList,
            $dillonkearns$elm_cli_options_parser$Cli$Option$optionalKeywordArg("cols")
          ),
          A2(
            $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
            A2(
              $dillonkearns$elm_cli_options_parser$Cli$Option$validateMap,
              $author$project$Parse$int,
              $dillonkearns$elm_cli_options_parser$Cli$Option$requiredKeywordArg("dataStoreId")
            ),
            A2(
              $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
              $dillonkearns$elm_cli_options_parser$Cli$Option$optionalKeywordArg("output"),
              A2(
                $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
                $author$project$Token$fromOptionalOption(
                  $dillonkearns$elm_cli_options_parser$Cli$Option$optionalKeywordArg("token")
                ),
                A2(
                  $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
                  $dillonkearns$elm_cli_options_parser$Cli$Option$optionalKeywordArg("domain"),
                  A2($dillonkearns$elm_cli_options_parser$Cli$OptionsParser$buildSubCommand, "dataStores:get", $author$project$Gen$Command$DataStores$Get$Options)
                )
              )
            )
          )
        )
      );
      var $author$project$Gen$Command$DataStructures$Create$Options = F7(
        function(domain, token, output, teamId, name, strict, spec) {
          return { dg: domain, b3: name, aF: output, cC: spec, cF: strict, ba: teamId, I: token };
        }
      );
      var $author$project$Gen$Command$DataStructures$Create$command = A2(
        $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$withDoc,
        "Creates a new data structure with data passed in the request body. In the response, it returns all details of the created data structure including its full specification.",
        A2(
          $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
          A2(
            $dillonkearns$elm_cli_options_parser$Cli$Option$validateMap,
            $author$project$Parse$stringList,
            $dillonkearns$elm_cli_options_parser$Cli$Option$requiredKeywordArg("spec")
          ),
          A2(
            $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
            $dillonkearns$elm_cli_options_parser$Cli$Option$flag("strict"),
            A2(
              $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
              $dillonkearns$elm_cli_options_parser$Cli$Option$requiredKeywordArg("name"),
              A2(
                $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
                A2(
                  $dillonkearns$elm_cli_options_parser$Cli$Option$validateMap,
                  $author$project$Parse$int,
                  $dillonkearns$elm_cli_options_parser$Cli$Option$requiredKeywordArg("teamId")
                ),
                A2(
                  $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
                  $dillonkearns$elm_cli_options_parser$Cli$Option$optionalKeywordArg("output"),
                  A2(
                    $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
                    $author$project$Token$fromOptionalOption(
                      $dillonkearns$elm_cli_options_parser$Cli$Option$optionalKeywordArg("token")
                    ),
                    A2(
                      $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
                      $dillonkearns$elm_cli_options_parser$Cli$Option$optionalKeywordArg("domain"),
                      A2($dillonkearns$elm_cli_options_parser$Cli$OptionsParser$buildSubCommand, "dataStructures:create", $author$project$Gen$Command$DataStructures$Create$Options)
                    )
                  )
                )
              )
            )
          )
        )
      );
      var $author$project$Gen$Command$DataStructures$Update$Options = F7(
        function(domain, token, output, dataStructureId, name, strict, spec) {
          return { ap: dataStructureId, dg: domain, b3: name, aF: output, cC: spec, cF: strict, I: token };
        }
      );
      var $author$project$Gen$Command$DataStructures$Update$command = A2(
        $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$withDoc,
        "Updates a data structure with a given ID by passing new values in the request body. Any property that is not provided will be left unchanged. In the response, it returns all details of the updated data structure including properties that were not changed.",
        A2(
          $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
          A2(
            $dillonkearns$elm_cli_options_parser$Cli$Option$validateMapIfPresent,
            $author$project$Parse$stringList,
            $dillonkearns$elm_cli_options_parser$Cli$Option$optionalKeywordArg("spec")
          ),
          A2(
            $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
            A2(
              $dillonkearns$elm_cli_options_parser$Cli$Option$map,
              $elm$core$Maybe$Just,
              $dillonkearns$elm_cli_options_parser$Cli$Option$flag("strict")
            ),
            A2(
              $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
              $dillonkearns$elm_cli_options_parser$Cli$Option$optionalKeywordArg("name"),
              A2(
                $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
                A2(
                  $dillonkearns$elm_cli_options_parser$Cli$Option$validateMap,
                  $author$project$Parse$int,
                  $dillonkearns$elm_cli_options_parser$Cli$Option$requiredKeywordArg("dataStructureId")
                ),
                A2(
                  $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
                  $dillonkearns$elm_cli_options_parser$Cli$Option$optionalKeywordArg("output"),
                  A2(
                    $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
                    $author$project$Token$fromOptionalOption(
                      $dillonkearns$elm_cli_options_parser$Cli$Option$optionalKeywordArg("token")
                    ),
                    A2(
                      $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
                      $dillonkearns$elm_cli_options_parser$Cli$Option$optionalKeywordArg("domain"),
                      A2($dillonkearns$elm_cli_options_parser$Cli$OptionsParser$buildSubCommand, "dataStructures:update", $author$project$Gen$Command$DataStructures$Update$Options)
                    )
                  )
                )
              )
            )
          )
        )
      );
      var $author$project$Gen$Command$Enums$Countries$List$Options = F3(
        function(domain, token, output) {
          return { dg: domain, aF: output, I: token };
        }
      );
      var $author$project$Gen$Command$Enums$Countries$List$command = A2(
        $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$withDoc,
        "Gets the list of countries and their `countryId` values in the `id` column. The `countryId` is a required parameter when you create a new organization with the API call `POST /organizations`.",
        A2(
          $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
          $dillonkearns$elm_cli_options_parser$Cli$Option$optionalKeywordArg("output"),
          A2(
            $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
            $author$project$Token$fromOptionalOption(
              $dillonkearns$elm_cli_options_parser$Cli$Option$optionalKeywordArg("token")
            ),
            A2(
              $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
              $dillonkearns$elm_cli_options_parser$Cli$Option$optionalKeywordArg("domain"),
              A2($dillonkearns$elm_cli_options_parser$Cli$OptionsParser$buildSubCommand, "enums:countries:list", $author$project$Gen$Command$Enums$Countries$List$Options)
            )
          )
        )
      );
      var $author$project$Gen$Command$Hooks$Create$Options = F9(
        function(domain, token, output, name, teamId, typeName, method, headers, stringify) {
          return { dg: domain, dk: headers, Y: method, b3: name, aF: output, cG: stringify, ba: teamId, I: token, d$: typeName };
        }
      );
      var $author$project$Gen$Command$Hooks$Create$command = A2(
        $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$withDoc,
        "Creates a new hook with data passed in the request body. In the response, it returns all details of the created hook.",
        A2(
          $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
          $dillonkearns$elm_cli_options_parser$Cli$Option$flag("stringify"),
          A2(
            $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
            $dillonkearns$elm_cli_options_parser$Cli$Option$flag("headers"),
            A2(
              $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
              $dillonkearns$elm_cli_options_parser$Cli$Option$flag("method"),
              A2(
                $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
                $dillonkearns$elm_cli_options_parser$Cli$Option$requiredKeywordArg("typeName"),
                A2(
                  $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
                  A2(
                    $dillonkearns$elm_cli_options_parser$Cli$Option$validateMap,
                    $author$project$Parse$int,
                    $dillonkearns$elm_cli_options_parser$Cli$Option$requiredKeywordArg("teamId")
                  ),
                  A2(
                    $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
                    $dillonkearns$elm_cli_options_parser$Cli$Option$requiredKeywordArg("name"),
                    A2(
                      $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
                      $dillonkearns$elm_cli_options_parser$Cli$Option$optionalKeywordArg("output"),
                      A2(
                        $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
                        $author$project$Token$fromOptionalOption(
                          $dillonkearns$elm_cli_options_parser$Cli$Option$optionalKeywordArg("token")
                        ),
                        A2(
                          $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
                          $dillonkearns$elm_cli_options_parser$Cli$Option$optionalKeywordArg("domain"),
                          A2($dillonkearns$elm_cli_options_parser$Cli$OptionsParser$buildSubCommand, "hooks:create", $author$project$Gen$Command$Hooks$Create$Options)
                        )
                      )
                    )
                  )
                )
              )
            )
          )
        )
      );
      var $author$project$Gen$Command$Hooks$Get$Options = F4(
        function(domain, token, output, hookId) {
          return { dg: domain, dn: hookId, aF: output, I: token };
        }
      );
      var $author$project$Gen$Command$Hooks$Get$command = A2(
        $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$withDoc,
        "Retrieves details of a hook with a given ID including hooks data.",
        A2(
          $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
          A2(
            $dillonkearns$elm_cli_options_parser$Cli$Option$validateMap,
            $author$project$Parse$int,
            $dillonkearns$elm_cli_options_parser$Cli$Option$requiredKeywordArg("hookId")
          ),
          A2(
            $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
            $dillonkearns$elm_cli_options_parser$Cli$Option$optionalKeywordArg("output"),
            A2(
              $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
              $author$project$Token$fromOptionalOption(
                $dillonkearns$elm_cli_options_parser$Cli$Option$optionalKeywordArg("token")
              ),
              A2(
                $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
                $dillonkearns$elm_cli_options_parser$Cli$Option$optionalKeywordArg("domain"),
                A2($dillonkearns$elm_cli_options_parser$Cli$OptionsParser$buildSubCommand, "hooks:get", $author$project$Gen$Command$Hooks$Get$Options)
              )
            )
          )
        )
      );
      var $author$project$Gen$Command$Hooks$List$Options = F7(
        function(domain, token, output, teamId, typeName, assigned, viewForScenarioId) {
          return { bg: assigned, dg: domain, aF: output, ba: teamId, I: token, d$: typeName, cR: viewForScenarioId };
        }
      );
      var $author$project$Gen$Command$Hooks$List$command = A2(
        $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$withDoc,
        "Retrieves a collection of all hooks for a team with a given ID. Returned hooks are sorted by name in ascending order.",
        A2(
          $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
          A2(
            $dillonkearns$elm_cli_options_parser$Cli$Option$validateMapIfPresent,
            $author$project$Parse$int,
            $dillonkearns$elm_cli_options_parser$Cli$Option$optionalKeywordArg("viewForScenarioId")
          ),
          A2(
            $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
            $dillonkearns$elm_cli_options_parser$Cli$Option$flag("assigned"),
            A2(
              $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
              $dillonkearns$elm_cli_options_parser$Cli$Option$optionalKeywordArg("typeName"),
              A2(
                $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
                A2(
                  $dillonkearns$elm_cli_options_parser$Cli$Option$validateMap,
                  $author$project$Parse$int,
                  $dillonkearns$elm_cli_options_parser$Cli$Option$requiredKeywordArg("teamId")
                ),
                A2(
                  $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
                  $dillonkearns$elm_cli_options_parser$Cli$Option$optionalKeywordArg("output"),
                  A2(
                    $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
                    $author$project$Token$fromOptionalOption(
                      $dillonkearns$elm_cli_options_parser$Cli$Option$optionalKeywordArg("token")
                    ),
                    A2(
                      $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
                      $dillonkearns$elm_cli_options_parser$Cli$Option$optionalKeywordArg("domain"),
                      A2($dillonkearns$elm_cli_options_parser$Cli$OptionsParser$buildSubCommand, "hooks:list", $author$project$Gen$Command$Hooks$List$Options)
                    )
                  )
                )
              )
            )
          )
        )
      );
      var $author$project$Gen$Command$Organizations$List$Options = function(domain) {
        return function(token) {
          return function(output) {
            return function(zone) {
              return function(externalId) {
                return function(cols) {
                  return function(pgSortBy) {
                    return function(pgOffset) {
                      return function(pgSortDir) {
                        return function(pgLimit) {
                          return { aO: cols, dg: domain, bC: externalId, aF: output, b9: pgLimit, ca: pgOffset, cc: pgSortBy, cd: pgSortDir, I: token, c_: zone };
                        };
                      };
                    };
                  };
                };
              };
            };
          };
        };
      };
      var $author$project$Gen$Command$Organizations$List$command = A2(
        $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$withDoc,
        "Retrieves a collection of all organizations, in which the user has membership. The response contains information about the organization `name`, `organizationId` and `timezoneId`. You can get more data about the user organizations with specifying the `cols[]` query parameter.\n\nHowever, the values for parameters `license`, `serviceName` and `isPaused` are returned only for organizations in your current Make zone.\n\nReturned organizations are sorted by the organization name in ascending order by default. You can specify sorting order with the query parameter `pg[sortBy].`",
        A2(
          $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
          A2(
            $dillonkearns$elm_cli_options_parser$Cli$Option$validateMapIfPresent,
            $author$project$Parse$int,
            $dillonkearns$elm_cli_options_parser$Cli$Option$optionalKeywordArg("pgLimit")
          ),
          A2(
            $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
            $dillonkearns$elm_cli_options_parser$Cli$Option$optionalKeywordArg("pgSortDir"),
            A2(
              $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
              A2(
                $dillonkearns$elm_cli_options_parser$Cli$Option$validateMapIfPresent,
                $author$project$Parse$int,
                $dillonkearns$elm_cli_options_parser$Cli$Option$optionalKeywordArg("pgOffset")
              ),
              A2(
                $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
                $dillonkearns$elm_cli_options_parser$Cli$Option$optionalKeywordArg("pgSortBy"),
                A2(
                  $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
                  A2(
                    $dillonkearns$elm_cli_options_parser$Cli$Option$validateMapIfPresent,
                    $author$project$Parse$stringList,
                    $dillonkearns$elm_cli_options_parser$Cli$Option$optionalKeywordArg("cols")
                  ),
                  A2(
                    $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
                    $dillonkearns$elm_cli_options_parser$Cli$Option$optionalKeywordArg("externalId"),
                    A2(
                      $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
                      $dillonkearns$elm_cli_options_parser$Cli$Option$optionalKeywordArg("zone"),
                      A2(
                        $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
                        $dillonkearns$elm_cli_options_parser$Cli$Option$optionalKeywordArg("output"),
                        A2(
                          $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
                          $author$project$Token$fromOptionalOption(
                            $dillonkearns$elm_cli_options_parser$Cli$Option$optionalKeywordArg("token")
                          ),
                          A2(
                            $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
                            $dillonkearns$elm_cli_options_parser$Cli$Option$optionalKeywordArg("domain"),
                            A2($dillonkearns$elm_cli_options_parser$Cli$OptionsParser$buildSubCommand, "organizations:list", $author$project$Gen$Command$Organizations$List$Options)
                          )
                        )
                      )
                    )
                  )
                )
              )
            )
          )
        )
      );
      var $author$project$Gen$Command$Organizations$Variables$Get$Options = F4(
        function(domain, token, output, organizationId) {
          return { dg: domain, a3: organizationId, aF: output, I: token };
        }
      );
      var $author$project$Gen$Command$Organizations$Variables$Get$command = A2(
        $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$withDoc,
        'Retrieves the collection of organization variables. The response contains all organization variables if your account has the custom variables feature available. Otherwise, the response contains only Make system variables.\n\nCheck availability of the custom variables feature with the API call `GET /organizations/{organizationId}`. If the response contains `"customVariables": true` pair in the `license` object then you have access to the custom variables feature.\n\nRefer to the [Make pricing page](https://www.make.com/en/help/general/pricing-parameters) for Make pricing plans overview.',
        A2(
          $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
          A2(
            $dillonkearns$elm_cli_options_parser$Cli$Option$validateMap,
            $author$project$Parse$int,
            $dillonkearns$elm_cli_options_parser$Cli$Option$requiredKeywordArg("organizationId")
          ),
          A2(
            $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
            $dillonkearns$elm_cli_options_parser$Cli$Option$optionalKeywordArg("output"),
            A2(
              $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
              $author$project$Token$fromOptionalOption(
                $dillonkearns$elm_cli_options_parser$Cli$Option$optionalKeywordArg("token")
              ),
              A2(
                $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
                $dillonkearns$elm_cli_options_parser$Cli$Option$optionalKeywordArg("domain"),
                A2($dillonkearns$elm_cli_options_parser$Cli$OptionsParser$buildSubCommand, "organizations:variables:get", $author$project$Gen$Command$Organizations$Variables$Get$Options)
              )
            )
          )
        )
      );
      var $author$project$Gen$Command$Scenarios$Blueprints$Get$Options = F6(
        function(domain, token, output, scenarioId, blueprintId, draft) {
          return { aN: blueprintId, dg: domain, aT: draft, aF: output, ai: scenarioId, I: token };
        }
      );
      var $author$project$Gen$Command$Scenarios$Blueprints$Get$command = A2(
        $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$withDoc,
        "Retrieves a blueprint of a scenario with a given ID.",
        A2(
          $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
          $dillonkearns$elm_cli_options_parser$Cli$Option$flag("draft"),
          A2(
            $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
            A2(
              $dillonkearns$elm_cli_options_parser$Cli$Option$validateMapIfPresent,
              $author$project$Parse$int,
              $dillonkearns$elm_cli_options_parser$Cli$Option$optionalKeywordArg("blueprintId")
            ),
            A2(
              $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
              A2(
                $dillonkearns$elm_cli_options_parser$Cli$Option$validateMap,
                $author$project$Parse$int,
                $dillonkearns$elm_cli_options_parser$Cli$Option$requiredKeywordArg("scenarioId")
              ),
              A2(
                $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
                $dillonkearns$elm_cli_options_parser$Cli$Option$optionalKeywordArg("output"),
                A2(
                  $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
                  $author$project$Token$fromOptionalOption(
                    $dillonkearns$elm_cli_options_parser$Cli$Option$optionalKeywordArg("token")
                  ),
                  A2(
                    $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
                    $dillonkearns$elm_cli_options_parser$Cli$Option$optionalKeywordArg("domain"),
                    A2($dillonkearns$elm_cli_options_parser$Cli$OptionsParser$buildSubCommand, "scenarios:blueprints:get", $author$project$Gen$Command$Scenarios$Blueprints$Get$Options)
                  )
                )
              )
            )
          )
        )
      );
      var $author$project$Gen$Command$Scenarios$Clone$Create$Options = function(domain) {
        return function(token) {
          return function(output) {
            return function(scenarioId) {
              return function(organizationId) {
                return function(cols) {
                  return function(confirmed) {
                    return function(notAnalyze) {
                      return function(name) {
                        return function(teamId) {
                          return function(account) {
                            return function(key) {
                              return function(hook) {
                                return function(device) {
                                  return function(udt) {
                                    return function(datastore) {
                                      return function(states) {
                                        return { be: account, aO: cols, bo: confirmed, aQ: datastore, bw: device, dg: domain, aX: hook, bT: key, b3: name, b4: notAnalyze, a3: organizationId, aF: output, ai: scenarioId, cD: states, ba: teamId, I: token, d1: udt };
                                      };
                                    };
                                  };
                                };
                              };
                            };
                          };
                        };
                      };
                    };
                  };
                };
              };
            };
          };
        };
      };
      var $author$project$Gen$Command$Scenarios$Clone$Create$command = A2(
        $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$withDoc,
        "Clones the specified scenario. The response contains all information about the scenario clone.\n\nYou have to know which app integrations the scenario contains. You can get a list of apps used in the scenario with the API call `GET /scenarios/{scenarioId}` in the `usedPackages` array.\n\nIf you are cloning the scenario to a different team and the scenario contains an app module, webhook or data store, you have to either:\n\n- map the entity ID to a different entity with the correct properties. For example, you can map an app module connection to a different connection of the same app with the same scopes, or\n - use the `notAnalyze` query parameter to turn off the scenario clone blueprint analysis.\n\nWhen you turn off the scenario blueprint analysis you can map the entity ID to the `null` value, which omits the entity settings.\n\nThe scenario blueprint analysis makes sure that the scenario clone will work without further changes. If you turn off the scenario blueprint analysis check the configuration of all entities in the scenario clone.\n\nRefer to the request body parameters description and examples for more information.",
        A2(
          $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
          $dillonkearns$elm_cli_options_parser$Cli$Option$flag("states"),
          A2(
            $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
            A2(
              $dillonkearns$elm_cli_options_parser$Cli$Option$validateMapIfPresent,
              $author$project$Parse$jsonValue,
              $dillonkearns$elm_cli_options_parser$Cli$Option$optionalKeywordArg("datastore")
            ),
            A2(
              $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
              A2(
                $dillonkearns$elm_cli_options_parser$Cli$Option$validateMapIfPresent,
                $author$project$Parse$jsonValue,
                $dillonkearns$elm_cli_options_parser$Cli$Option$optionalKeywordArg("udt")
              ),
              A2(
                $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
                A2(
                  $dillonkearns$elm_cli_options_parser$Cli$Option$validateMapIfPresent,
                  $author$project$Parse$jsonValue,
                  $dillonkearns$elm_cli_options_parser$Cli$Option$optionalKeywordArg("device")
                ),
                A2(
                  $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
                  A2(
                    $dillonkearns$elm_cli_options_parser$Cli$Option$validateMapIfPresent,
                    $author$project$Parse$jsonValue,
                    $dillonkearns$elm_cli_options_parser$Cli$Option$optionalKeywordArg("hook")
                  ),
                  A2(
                    $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
                    A2(
                      $dillonkearns$elm_cli_options_parser$Cli$Option$validateMapIfPresent,
                      $author$project$Parse$jsonValue,
                      $dillonkearns$elm_cli_options_parser$Cli$Option$optionalKeywordArg("key")
                    ),
                    A2(
                      $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
                      A2(
                        $dillonkearns$elm_cli_options_parser$Cli$Option$validateMapIfPresent,
                        $author$project$Parse$jsonValue,
                        $dillonkearns$elm_cli_options_parser$Cli$Option$optionalKeywordArg("account")
                      ),
                      A2(
                        $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
                        A2(
                          $dillonkearns$elm_cli_options_parser$Cli$Option$validateMap,
                          $author$project$Parse$int,
                          $dillonkearns$elm_cli_options_parser$Cli$Option$requiredKeywordArg("teamId")
                        ),
                        A2(
                          $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
                          $dillonkearns$elm_cli_options_parser$Cli$Option$requiredKeywordArg("name"),
                          A2(
                            $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
                            $dillonkearns$elm_cli_options_parser$Cli$Option$flag("notAnalyze"),
                            A2(
                              $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
                              $dillonkearns$elm_cli_options_parser$Cli$Option$flag("confirmed"),
                              A2(
                                $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
                                A2(
                                  $dillonkearns$elm_cli_options_parser$Cli$Option$validateMapIfPresent,
                                  $author$project$Parse$stringList,
                                  $dillonkearns$elm_cli_options_parser$Cli$Option$optionalKeywordArg("cols")
                                ),
                                A2(
                                  $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
                                  A2(
                                    $dillonkearns$elm_cli_options_parser$Cli$Option$validateMap,
                                    $author$project$Parse$int,
                                    $dillonkearns$elm_cli_options_parser$Cli$Option$requiredKeywordArg("organizationId")
                                  ),
                                  A2(
                                    $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
                                    A2(
                                      $dillonkearns$elm_cli_options_parser$Cli$Option$validateMap,
                                      $author$project$Parse$int,
                                      $dillonkearns$elm_cli_options_parser$Cli$Option$requiredKeywordArg("scenarioId")
                                    ),
                                    A2(
                                      $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
                                      $dillonkearns$elm_cli_options_parser$Cli$Option$optionalKeywordArg("output"),
                                      A2(
                                        $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
                                        $author$project$Token$fromOptionalOption(
                                          $dillonkearns$elm_cli_options_parser$Cli$Option$optionalKeywordArg("token")
                                        ),
                                        A2(
                                          $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
                                          $dillonkearns$elm_cli_options_parser$Cli$Option$optionalKeywordArg("domain"),
                                          A2($dillonkearns$elm_cli_options_parser$Cli$OptionsParser$buildSubCommand, "scenarios:clone:create", $author$project$Gen$Command$Scenarios$Clone$Create$Options)
                                        )
                                      )
                                    )
                                  )
                                )
                              )
                            )
                          )
                        )
                      )
                    )
                  )
                )
              )
            )
          )
        )
      );
      var $author$project$Gen$Command$Scenarios$Create$Options = function(domain) {
        return function(token) {
          return function(output) {
            return function(cols) {
              return function(confirmed) {
                return function(blueprint) {
                  return function(teamId) {
                    return function(scheduling) {
                      return function(folderId) {
                        return function(basedon) {
                          return { c5: basedon, bk: blueprint, aO: cols, bo: confirmed, dg: domain, bF: folderId, aF: output, cx: scheduling, ba: teamId, I: token };
                        };
                      };
                    };
                  };
                };
              };
            };
          };
        };
      };
      var $author$project$Gen$Command$Scenarios$Create$command = A2(
        $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$withDoc,
        "Creates a new scenario with data passed in the request body. In the response, it returns all details of the created scenario including its blueprint.",
        A2(
          $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
          A2(
            $dillonkearns$elm_cli_options_parser$Cli$Option$validateMapIfPresent,
            $author$project$Parse$int,
            $dillonkearns$elm_cli_options_parser$Cli$Option$optionalKeywordArg("basedon")
          ),
          A2(
            $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
            A2(
              $dillonkearns$elm_cli_options_parser$Cli$Option$validateMapIfPresent,
              $author$project$Parse$int,
              $dillonkearns$elm_cli_options_parser$Cli$Option$optionalKeywordArg("folderId")
            ),
            A2(
              $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
              $dillonkearns$elm_cli_options_parser$Cli$Option$requiredKeywordArg("scheduling"),
              A2(
                $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
                A2(
                  $dillonkearns$elm_cli_options_parser$Cli$Option$validateMap,
                  $author$project$Parse$int,
                  $dillonkearns$elm_cli_options_parser$Cli$Option$requiredKeywordArg("teamId")
                ),
                A2(
                  $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
                  $dillonkearns$elm_cli_options_parser$Cli$Option$requiredKeywordArg("blueprint"),
                  A2(
                    $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
                    $dillonkearns$elm_cli_options_parser$Cli$Option$flag("confirmed"),
                    A2(
                      $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
                      A2(
                        $dillonkearns$elm_cli_options_parser$Cli$Option$validateMapIfPresent,
                        $author$project$Parse$stringList,
                        $dillonkearns$elm_cli_options_parser$Cli$Option$optionalKeywordArg("cols")
                      ),
                      A2(
                        $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
                        $dillonkearns$elm_cli_options_parser$Cli$Option$optionalKeywordArg("output"),
                        A2(
                          $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
                          $author$project$Token$fromOptionalOption(
                            $dillonkearns$elm_cli_options_parser$Cli$Option$optionalKeywordArg("token")
                          ),
                          A2(
                            $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
                            $dillonkearns$elm_cli_options_parser$Cli$Option$optionalKeywordArg("domain"),
                            A2($dillonkearns$elm_cli_options_parser$Cli$OptionsParser$buildSubCommand, "scenarios:create", $author$project$Gen$Command$Scenarios$Create$Options)
                          )
                        )
                      )
                    )
                  )
                )
              )
            )
          )
        )
      );
      var $author$project$Gen$Command$Scenarios$Get$Options = F5(
        function(domain, token, output, scenarioId, cols) {
          return { aO: cols, dg: domain, aF: output, ai: scenarioId, I: token };
        }
      );
      var $author$project$Gen$Command$Scenarios$Get$command = A2(
        $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$withDoc,
        "Retrieves all available properties of a scenario with a given ID. The returned details do not include a scenario blueprint. If you want to get a scenario blueprint, refer to the [Get scenario blueprint](/scenarios-scenarioId-blueprint-get) endpoint.",
        A2(
          $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
          A2(
            $dillonkearns$elm_cli_options_parser$Cli$Option$validateMapIfPresent,
            $author$project$Parse$stringList,
            $dillonkearns$elm_cli_options_parser$Cli$Option$optionalKeywordArg("cols")
          ),
          A2(
            $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
            A2(
              $dillonkearns$elm_cli_options_parser$Cli$Option$validateMap,
              $author$project$Parse$int,
              $dillonkearns$elm_cli_options_parser$Cli$Option$requiredKeywordArg("scenarioId")
            ),
            A2(
              $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
              $dillonkearns$elm_cli_options_parser$Cli$Option$optionalKeywordArg("output"),
              A2(
                $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
                $author$project$Token$fromOptionalOption(
                  $dillonkearns$elm_cli_options_parser$Cli$Option$optionalKeywordArg("token")
                ),
                A2(
                  $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
                  $dillonkearns$elm_cli_options_parser$Cli$Option$optionalKeywordArg("domain"),
                  A2($dillonkearns$elm_cli_options_parser$Cli$OptionsParser$buildSubCommand, "scenarios:get", $author$project$Gen$Command$Scenarios$Get$Options)
                )
              )
            )
          )
        )
      );
      var $author$project$Gen$Command$Scenarios$List$Options = function(domain) {
        return function(token) {
          return function(output) {
            return function(teamId) {
              return function(organizationId) {
                return function(id) {
                  return function(folderId) {
                    return function(islinked) {
                      return function(cols) {
                        return function(pgOffset) {
                          return function(pgLimit) {
                            return function(pgSortBy) {
                              return function(pgSortDir) {
                                return function(pgReturnTotalCount) {
                                  return { aO: cols, dg: domain, bF: folderId, ad: id, bR: islinked, a3: organizationId, aF: output, b9: pgLimit, ca: pgOffset, cb: pgReturnTotalCount, cc: pgSortBy, cd: pgSortDir, ba: teamId, I: token };
                                };
                              };
                            };
                          };
                        };
                      };
                    };
                  };
                };
              };
            };
          };
        };
      };
      var $author$project$Gen$Command$Scenarios$List$command = A2(
        $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$withDoc,
        "Retrieves a collection of all scenarios for a team or an organization with a given ID. Returned scenarios are sorted by proprietary setting in descending order.",
        A2(
          $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
          $dillonkearns$elm_cli_options_parser$Cli$Option$flag("pgReturnTotalCount"),
          A2(
            $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
            $dillonkearns$elm_cli_options_parser$Cli$Option$optionalKeywordArg("pgSortDir"),
            A2(
              $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
              $dillonkearns$elm_cli_options_parser$Cli$Option$optionalKeywordArg("pgSortBy"),
              A2(
                $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
                A2(
                  $dillonkearns$elm_cli_options_parser$Cli$Option$validateMapIfPresent,
                  $author$project$Parse$int,
                  $dillonkearns$elm_cli_options_parser$Cli$Option$optionalKeywordArg("pgLimit")
                ),
                A2(
                  $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
                  A2(
                    $dillonkearns$elm_cli_options_parser$Cli$Option$validateMapIfPresent,
                    $author$project$Parse$int,
                    $dillonkearns$elm_cli_options_parser$Cli$Option$optionalKeywordArg("pgOffset")
                  ),
                  A2(
                    $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
                    A2(
                      $dillonkearns$elm_cli_options_parser$Cli$Option$validateMapIfPresent,
                      $author$project$Parse$stringList,
                      $dillonkearns$elm_cli_options_parser$Cli$Option$optionalKeywordArg("cols")
                    ),
                    A2(
                      $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
                      $dillonkearns$elm_cli_options_parser$Cli$Option$flag("islinked"),
                      A2(
                        $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
                        A2(
                          $dillonkearns$elm_cli_options_parser$Cli$Option$validateMapIfPresent,
                          $author$project$Parse$int,
                          $dillonkearns$elm_cli_options_parser$Cli$Option$optionalKeywordArg("folderId")
                        ),
                        A2(
                          $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
                          A2(
                            $dillonkearns$elm_cli_options_parser$Cli$Option$validateMapIfPresent,
                            $author$project$Parse$stringList,
                            $dillonkearns$elm_cli_options_parser$Cli$Option$optionalKeywordArg("id")
                          ),
                          A2(
                            $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
                            A2(
                              $dillonkearns$elm_cli_options_parser$Cli$Option$validateMapIfPresent,
                              $author$project$Parse$int,
                              $dillonkearns$elm_cli_options_parser$Cli$Option$optionalKeywordArg("organizationId")
                            ),
                            A2(
                              $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
                              A2(
                                $dillonkearns$elm_cli_options_parser$Cli$Option$validateMapIfPresent,
                                $author$project$Parse$int,
                                $dillonkearns$elm_cli_options_parser$Cli$Option$optionalKeywordArg("teamId")
                              ),
                              A2(
                                $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
                                $dillonkearns$elm_cli_options_parser$Cli$Option$optionalKeywordArg("output"),
                                A2(
                                  $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
                                  $author$project$Token$fromOptionalOption(
                                    $dillonkearns$elm_cli_options_parser$Cli$Option$optionalKeywordArg("token")
                                  ),
                                  A2(
                                    $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
                                    $dillonkearns$elm_cli_options_parser$Cli$Option$optionalKeywordArg("domain"),
                                    A2($dillonkearns$elm_cli_options_parser$Cli$OptionsParser$buildSubCommand, "scenarios:list", $author$project$Gen$Command$Scenarios$List$Options)
                                  )
                                )
                              )
                            )
                          )
                        )
                      )
                    )
                  )
                )
              )
            )
          )
        )
      );
      var $author$project$Gen$Command$Scenarios$Update$Options = function(domain) {
        return function(token) {
          return function(output) {
            return function(scenarioId) {
              return function(cols) {
                return function(confirmed) {
                  return function(blueprint) {
                    return function(scheduling) {
                      return function(folderId) {
                        return function(name) {
                          return { bk: blueprint, aO: cols, bo: confirmed, dg: domain, bF: folderId, b3: name, aF: output, ai: scenarioId, cx: scheduling, I: token };
                        };
                      };
                    };
                  };
                };
              };
            };
          };
        };
      };
      var $author$project$Gen$Command$Scenarios$Update$command = A2(
        $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$withDoc,
        "Updates a scenario with a given ID by passing new values in the request body. Any property that is not provided will be left unchanged. In the response, it returns all details of the updated scenario including properties that were not changed.",
        A2(
          $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
          $dillonkearns$elm_cli_options_parser$Cli$Option$optionalKeywordArg("name"),
          A2(
            $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
            A2(
              $dillonkearns$elm_cli_options_parser$Cli$Option$validateMapIfPresent,
              $author$project$Parse$int,
              $dillonkearns$elm_cli_options_parser$Cli$Option$optionalKeywordArg("folderId")
            ),
            A2(
              $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
              $dillonkearns$elm_cli_options_parser$Cli$Option$optionalKeywordArg("scheduling"),
              A2(
                $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
                $dillonkearns$elm_cli_options_parser$Cli$Option$optionalKeywordArg("blueprint"),
                A2(
                  $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
                  $dillonkearns$elm_cli_options_parser$Cli$Option$flag("confirmed"),
                  A2(
                    $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
                    A2(
                      $dillonkearns$elm_cli_options_parser$Cli$Option$validateMapIfPresent,
                      $author$project$Parse$stringList,
                      $dillonkearns$elm_cli_options_parser$Cli$Option$optionalKeywordArg("cols")
                    ),
                    A2(
                      $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
                      A2(
                        $dillonkearns$elm_cli_options_parser$Cli$Option$validateMap,
                        $author$project$Parse$int,
                        $dillonkearns$elm_cli_options_parser$Cli$Option$requiredKeywordArg("scenarioId")
                      ),
                      A2(
                        $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
                        $dillonkearns$elm_cli_options_parser$Cli$Option$optionalKeywordArg("output"),
                        A2(
                          $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
                          $author$project$Token$fromOptionalOption(
                            $dillonkearns$elm_cli_options_parser$Cli$Option$optionalKeywordArg("token")
                          ),
                          A2(
                            $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
                            $dillonkearns$elm_cli_options_parser$Cli$Option$optionalKeywordArg("domain"),
                            A2($dillonkearns$elm_cli_options_parser$Cli$OptionsParser$buildSubCommand, "scenarios:update", $author$project$Gen$Command$Scenarios$Update$Options)
                          )
                        )
                      )
                    )
                  )
                )
              )
            )
          )
        )
      );
      var $author$project$Gen$Command$Teams$Variables$Get$Options = F4(
        function(domain, token, output, teamId) {
          return { dg: domain, aF: output, ba: teamId, I: token };
        }
      );
      var $author$project$Gen$Command$Teams$Variables$Get$command = A2(
        $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$withDoc,
        'Retrieves the collection of team variables. The response contains all team variables if your account has the custom variables feature available. Otherwise, the response contains only Make system variables.\n\nCheck availability of the custom variables feature with the API call `GET /organizations/{organizationId}` for the organization to which the team belongs. If the response contains `"customVariables": true` pair in the `license` object then you have access to the custom variables feature.\n\nRefer to the [Make pricing page](https://www.make.com/en/help/general/pricing-parameters) for Make pricing plans overview.',
        A2(
          $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
          A2(
            $dillonkearns$elm_cli_options_parser$Cli$Option$validateMap,
            $author$project$Parse$int,
            $dillonkearns$elm_cli_options_parser$Cli$Option$requiredKeywordArg("teamId")
          ),
          A2(
            $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
            $dillonkearns$elm_cli_options_parser$Cli$Option$optionalKeywordArg("output"),
            A2(
              $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
              $author$project$Token$fromOptionalOption(
                $dillonkearns$elm_cli_options_parser$Cli$Option$optionalKeywordArg("token")
              ),
              A2(
                $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$with,
                $dillonkearns$elm_cli_options_parser$Cli$Option$optionalKeywordArg("domain"),
                A2($dillonkearns$elm_cli_options_parser$Cli$OptionsParser$buildSubCommand, "teams:variables:get", $author$project$Gen$Command$Teams$Variables$Get$Options)
              )
            )
          )
        )
      );
      var $author$project$Gen$Command$commands = _List_fromArray(
        [
          A2($dillonkearns$elm_cli_options_parser$Cli$OptionsParser$map, $author$project$Gen$Command$ListApps, $author$project$Gen$Command$Apps$List$command),
          A2($dillonkearns$elm_cli_options_parser$Cli$OptionsParser$map, $author$project$Gen$Command$GetAppsMetadata, $author$project$Gen$Command$Apps$Metadata$Get$command),
          A2($dillonkearns$elm_cli_options_parser$Cli$OptionsParser$map, $author$project$Gen$Command$UpdateAppsMetadata, $author$project$Gen$Command$Apps$Metadata$Update$command),
          A2($dillonkearns$elm_cli_options_parser$Cli$OptionsParser$map, $author$project$Gen$Command$GetAppsIcon, $author$project$Gen$Command$Apps$Icon$Get$command),
          A2($dillonkearns$elm_cli_options_parser$Cli$OptionsParser$map, $author$project$Gen$Command$SetAppsIcon, $author$project$Gen$Command$Apps$Icon$Set$command),
          A2($dillonkearns$elm_cli_options_parser$Cli$OptionsParser$map, $author$project$Gen$Command$GetAppsSections, $author$project$Gen$Command$Apps$Sections$Get$command),
          A2($dillonkearns$elm_cli_options_parser$Cli$OptionsParser$map, $author$project$Gen$Command$SetAppsSections, $author$project$Gen$Command$Apps$Sections$Set$command),
          A2($dillonkearns$elm_cli_options_parser$Cli$OptionsParser$map, $author$project$Gen$Command$GetAppsReadme, $author$project$Gen$Command$Apps$Readme$Get$command),
          A2($dillonkearns$elm_cli_options_parser$Cli$OptionsParser$map, $author$project$Gen$Command$SetAppsReadme, $author$project$Gen$Command$Apps$Readme$Set$command),
          A2($dillonkearns$elm_cli_options_parser$Cli$OptionsParser$map, $author$project$Gen$Command$ListAppsConnections, $author$project$Gen$Command$Apps$Connections$List$command),
          A2($dillonkearns$elm_cli_options_parser$Cli$OptionsParser$map, $author$project$Gen$Command$UpdateAppsConnectionsMetadata, $author$project$Gen$Command$Apps$Connections$Metadata$Update$command),
          A2($dillonkearns$elm_cli_options_parser$Cli$OptionsParser$map, $author$project$Gen$Command$GetAppsConnectionsSections, $author$project$Gen$Command$Apps$Connections$Sections$Get$command),
          A2($dillonkearns$elm_cli_options_parser$Cli$OptionsParser$map, $author$project$Gen$Command$SetAppsConnectionsSections, $author$project$Gen$Command$Apps$Connections$Sections$Set$command),
          A2($dillonkearns$elm_cli_options_parser$Cli$OptionsParser$map, $author$project$Gen$Command$GetAppsModules, $author$project$Gen$Command$Apps$Modules$Get$command),
          A2($dillonkearns$elm_cli_options_parser$Cli$OptionsParser$map, $author$project$Gen$Command$GetAppsModule, $author$project$Gen$Command$Apps$Module$Get$command),
          A2($dillonkearns$elm_cli_options_parser$Cli$OptionsParser$map, $author$project$Gen$Command$UpdateAppsModule, $author$project$Gen$Command$Apps$Module$Update$command),
          A2($dillonkearns$elm_cli_options_parser$Cli$OptionsParser$map, $author$project$Gen$Command$GetAppsModulesSections, $author$project$Gen$Command$Apps$Modules$Sections$Get$command),
          A2($dillonkearns$elm_cli_options_parser$Cli$OptionsParser$map, $author$project$Gen$Command$SetAppsModulesSections, $author$project$Gen$Command$Apps$Modules$Sections$Set$command),
          A2($dillonkearns$elm_cli_options_parser$Cli$OptionsParser$map, $author$project$Gen$Command$GetAppsRpcs, $author$project$Gen$Command$Apps$Rpcs$Get$command),
          A2($dillonkearns$elm_cli_options_parser$Cli$OptionsParser$map, $author$project$Gen$Command$GetAppsRpc, $author$project$Gen$Command$Apps$Rpc$Get$command),
          A2($dillonkearns$elm_cli_options_parser$Cli$OptionsParser$map, $author$project$Gen$Command$UpdateAppsRpc, $author$project$Gen$Command$Apps$Rpc$Update$command),
          A2($dillonkearns$elm_cli_options_parser$Cli$OptionsParser$map, $author$project$Gen$Command$GetAppsRpcsSections, $author$project$Gen$Command$Apps$Rpcs$Sections$Get$command),
          A2($dillonkearns$elm_cli_options_parser$Cli$OptionsParser$map, $author$project$Gen$Command$SetAppsRpcsSections, $author$project$Gen$Command$Apps$Rpcs$Sections$Set$command),
          A2($dillonkearns$elm_cli_options_parser$Cli$OptionsParser$map, $author$project$Gen$Command$ListAppsWebhooks, $author$project$Gen$Command$Apps$Webhooks$List$command),
          A2($dillonkearns$elm_cli_options_parser$Cli$OptionsParser$map, $author$project$Gen$Command$ListAppsWebhook, $author$project$Gen$Command$Apps$Webhook$List$command),
          A2($dillonkearns$elm_cli_options_parser$Cli$OptionsParser$map, $author$project$Gen$Command$UpdateAppsWebhook, $author$project$Gen$Command$Apps$Webhook$Update$command),
          A2($dillonkearns$elm_cli_options_parser$Cli$OptionsParser$map, $author$project$Gen$Command$GetAppsWebhooksSections, $author$project$Gen$Command$Apps$Webhooks$Sections$Get$command),
          A2($dillonkearns$elm_cli_options_parser$Cli$OptionsParser$map, $author$project$Gen$Command$SetAppsWebhooksSections, $author$project$Gen$Command$Apps$Webhooks$Sections$Set$command),
          A2($dillonkearns$elm_cli_options_parser$Cli$OptionsParser$map, $author$project$Gen$Command$GetAppsFunctions, $author$project$Gen$Command$Apps$Functions$Get$command),
          A2($dillonkearns$elm_cli_options_parser$Cli$OptionsParser$map, $author$project$Gen$Command$GetAppsFunctionsCode, $author$project$Gen$Command$Apps$Functions$Code$Get$command),
          A2($dillonkearns$elm_cli_options_parser$Cli$OptionsParser$map, $author$project$Gen$Command$SetAppsFunctionsCode, $author$project$Gen$Command$Apps$Functions$Code$Set$command),
          A2($dillonkearns$elm_cli_options_parser$Cli$OptionsParser$map, $author$project$Gen$Command$GetAppsFunctionsTest, $author$project$Gen$Command$Apps$Functions$Test$Get$command),
          A2($dillonkearns$elm_cli_options_parser$Cli$OptionsParser$map, $author$project$Gen$Command$SetAppsFunctionsTest, $author$project$Gen$Command$Apps$Functions$Test$Set$command),
          A2($dillonkearns$elm_cli_options_parser$Cli$OptionsParser$map, $author$project$Gen$Command$GetConnection, $author$project$Gen$Command$Connection$Get$command),
          A2($dillonkearns$elm_cli_options_parser$Cli$OptionsParser$map, $author$project$Gen$Command$ListConnections, $author$project$Gen$Command$Connections$List$command),
          A2($dillonkearns$elm_cli_options_parser$Cli$OptionsParser$map, $author$project$Gen$Command$GetDataStores, $author$project$Gen$Command$DataStores$Get$command),
          A2($dillonkearns$elm_cli_options_parser$Cli$OptionsParser$map, $author$project$Gen$Command$CreateDataStores, $author$project$Gen$Command$DataStores$Create$command),
          A2($dillonkearns$elm_cli_options_parser$Cli$OptionsParser$map, $author$project$Gen$Command$CreateDataStructures, $author$project$Gen$Command$DataStructures$Create$command),
          A2($dillonkearns$elm_cli_options_parser$Cli$OptionsParser$map, $author$project$Gen$Command$UpdateDataStructures, $author$project$Gen$Command$DataStructures$Update$command),
          A2($dillonkearns$elm_cli_options_parser$Cli$OptionsParser$map, $author$project$Gen$Command$ListEnumsCountries, $author$project$Gen$Command$Enums$Countries$List$command),
          A2($dillonkearns$elm_cli_options_parser$Cli$OptionsParser$map, $author$project$Gen$Command$ListHooks, $author$project$Gen$Command$Hooks$List$command),
          A2($dillonkearns$elm_cli_options_parser$Cli$OptionsParser$map, $author$project$Gen$Command$GetHooks, $author$project$Gen$Command$Hooks$Get$command),
          A2($dillonkearns$elm_cli_options_parser$Cli$OptionsParser$map, $author$project$Gen$Command$CreateHooks, $author$project$Gen$Command$Hooks$Create$command),
          A2($dillonkearns$elm_cli_options_parser$Cli$OptionsParser$map, $author$project$Gen$Command$ListOrganizations, $author$project$Gen$Command$Organizations$List$command),
          A2($dillonkearns$elm_cli_options_parser$Cli$OptionsParser$map, $author$project$Gen$Command$GetOrganizationsVariables, $author$project$Gen$Command$Organizations$Variables$Get$command),
          A2($dillonkearns$elm_cli_options_parser$Cli$OptionsParser$map, $author$project$Gen$Command$ListScenarios, $author$project$Gen$Command$Scenarios$List$command),
          A2($dillonkearns$elm_cli_options_parser$Cli$OptionsParser$map, $author$project$Gen$Command$GetScenarios, $author$project$Gen$Command$Scenarios$Get$command),
          A2($dillonkearns$elm_cli_options_parser$Cli$OptionsParser$map, $author$project$Gen$Command$CreateScenarios, $author$project$Gen$Command$Scenarios$Create$command),
          A2($dillonkearns$elm_cli_options_parser$Cli$OptionsParser$map, $author$project$Gen$Command$UpdateScenarios, $author$project$Gen$Command$Scenarios$Update$command),
          A2($dillonkearns$elm_cli_options_parser$Cli$OptionsParser$map, $author$project$Gen$Command$CreateScenariosClone, $author$project$Gen$Command$Scenarios$Clone$Create$command),
          A2($dillonkearns$elm_cli_options_parser$Cli$OptionsParser$map, $author$project$Gen$Command$GetScenariosBlueprints, $author$project$Gen$Command$Scenarios$Blueprints$Get$command),
          A2($dillonkearns$elm_cli_options_parser$Cli$OptionsParser$map, $author$project$Gen$Command$GetTeamsVariables, $author$project$Gen$Command$Teams$Variables$Get$command)
        ]
      );
      var $dillonkearns$elm_cli_options_parser$Cli$Program$config = { Z: _List_Nil };
      var $author$project$Main$program = A3(
        $elm$core$List$foldl,
        $dillonkearns$elm_cli_options_parser$Cli$Program$add,
        $dillonkearns$elm_cli_options_parser$Cli$Program$config,
        _Utils_ap(
          A2(
            $elm$core$List$map,
            $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$map($author$project$Main$ApiCommand),
            $author$project$Gen$Command$commands
          ),
          A2(
            $elm$core$List$map,
            $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$map($author$project$Main$CustomCommand),
            $author$project$Custom$Command$commands
          )
        )
      );
      var $author$project$GlobalOptions$GlobalOptions = F3(
        function(domain, token, output) {
          return { dg: domain, aF: output, I: token };
        }
      );
      var $elm$core$Dict$foldl = F3(
        function(func, acc, dict) {
          foldl:
            while (true) {
              if (dict.$ === -2) {
                return acc;
              } else {
                var key = dict.b;
                var value = dict.c;
                var left = dict.d;
                var right = dict.e;
                var $temp$func = func, $temp$acc = A3(
                  func,
                  key,
                  value,
                  A3($elm$core$Dict$foldl, func, acc, left)
                ), $temp$dict = right;
                func = $temp$func;
                acc = $temp$acc;
                dict = $temp$dict;
                continue foldl;
              }
            }
        }
      );
      var $elm$json$Json$Encode$dict = F3(
        function(toKey, toValue, dictionary) {
          return _Json_wrap(
            A3(
              $elm$core$Dict$foldl,
              F3(
                function(key, value, obj) {
                  return A3(
                    _Json_addField,
                    toKey(key),
                    toValue(value),
                    obj
                  );
                }
              ),
              _Json_emptyObject(0),
              dictionary
            )
          );
        }
      );
      var $MaybeJustJames$yaml$Yaml$Decode$Decoder = $elm$core$Basics$identity;
      var $MaybeJustJames$yaml$Yaml$Decode$Decoding = function(a) {
        return { $: 1, a };
      };
      var $elm$core$String$fromFloat = _String_fromNumber;
      var $MaybeJustJames$yaml$Yaml$Parser$Ast$toString = function(value) {
        switch (value.$) {
          case 0:
            var string = value.a;
            return '"' + (string + '" (string)');
          case 1:
            var _float = value.a;
            return $elm$core$String$fromFloat(_float) + " (float)";
          case 2:
            var _int = value.a;
            return $elm$core$String$fromInt(_int) + " (int)";
          case 3:
            var list = value.a;
            return "[ " + (A2(
              $elm$core$String$join,
              ", ",
              A2($elm$core$List$map, $MaybeJustJames$yaml$Yaml$Parser$Ast$toString, list)
            ) + " ] (list)");
          case 4:
            var properties = value.a;
            return "{ " + (A2(
              $elm$core$String$join,
              ", ",
              A2(
                $elm$core$List$map,
                $MaybeJustJames$yaml$Yaml$Parser$Ast$toStringProperty,
                $elm$core$Dict$toList(properties)
              )
            ) + " } (map)");
          case 5:
            if (value.a) {
              return "True (bool)";
            } else {
              return "False (bool)";
            }
          case 6:
            return "Null";
          case 7:
            var name = value.a;
            var r_val = value.b;
            return "&" + (name + (" " + $MaybeJustJames$yaml$Yaml$Parser$Ast$toString(r_val)));
          default:
            var name = value.a;
            return "*" + name;
        }
      };
      var $MaybeJustJames$yaml$Yaml$Parser$Ast$toStringProperty = function(_v0) {
        var name = _v0.a;
        var value = _v0.b;
        return name + (": " + $MaybeJustJames$yaml$Yaml$Parser$Ast$toString(value));
      };
      var $MaybeJustJames$yaml$Yaml$Decode$decodeError = F2(
        function(expected, got) {
          return $elm$core$Result$Err(
            $MaybeJustJames$yaml$Yaml$Decode$Decoding(
              "Expected " + (expected + (", got: " + $MaybeJustJames$yaml$Yaml$Parser$Ast$toString(got)))
            )
          );
        }
      );
      var $elm$core$Dict$RBEmpty_elm_builtin = { $: -2 };
      var $elm$core$Dict$empty = $elm$core$Dict$RBEmpty_elm_builtin;
      var $elm$core$Dict$Black = 1;
      var $elm$core$Dict$RBNode_elm_builtin = F5(
        function(a, b, c, d, e) {
          return { $: -1, a, b, c, d, e };
        }
      );
      var $elm$core$Dict$Red = 0;
      var $elm$core$Dict$balance = F5(
        function(color, key, value, left, right) {
          if (right.$ === -1 && !right.a) {
            var _v1 = right.a;
            var rK = right.b;
            var rV = right.c;
            var rLeft = right.d;
            var rRight = right.e;
            if (left.$ === -1 && !left.a) {
              var _v3 = left.a;
              var lK = left.b;
              var lV = left.c;
              var lLeft = left.d;
              var lRight = left.e;
              return A5(
                $elm$core$Dict$RBNode_elm_builtin,
                0,
                key,
                value,
                A5($elm$core$Dict$RBNode_elm_builtin, 1, lK, lV, lLeft, lRight),
                A5($elm$core$Dict$RBNode_elm_builtin, 1, rK, rV, rLeft, rRight)
              );
            } else {
              return A5(
                $elm$core$Dict$RBNode_elm_builtin,
                color,
                rK,
                rV,
                A5($elm$core$Dict$RBNode_elm_builtin, 0, key, value, left, rLeft),
                rRight
              );
            }
          } else {
            if (left.$ === -1 && !left.a && left.d.$ === -1 && !left.d.a) {
              var _v5 = left.a;
              var lK = left.b;
              var lV = left.c;
              var _v6 = left.d;
              var _v7 = _v6.a;
              var llK = _v6.b;
              var llV = _v6.c;
              var llLeft = _v6.d;
              var llRight = _v6.e;
              var lRight = left.e;
              return A5(
                $elm$core$Dict$RBNode_elm_builtin,
                0,
                lK,
                lV,
                A5($elm$core$Dict$RBNode_elm_builtin, 1, llK, llV, llLeft, llRight),
                A5($elm$core$Dict$RBNode_elm_builtin, 1, key, value, lRight, right)
              );
            } else {
              return A5($elm$core$Dict$RBNode_elm_builtin, color, key, value, left, right);
            }
          }
        }
      );
      var $elm$core$Basics$compare = _Utils_compare;
      var $elm$core$Dict$insertHelp = F3(
        function(key, value, dict) {
          if (dict.$ === -2) {
            return A5($elm$core$Dict$RBNode_elm_builtin, 0, key, value, $elm$core$Dict$RBEmpty_elm_builtin, $elm$core$Dict$RBEmpty_elm_builtin);
          } else {
            var nColor = dict.a;
            var nKey = dict.b;
            var nValue = dict.c;
            var nLeft = dict.d;
            var nRight = dict.e;
            var _v1 = A2($elm$core$Basics$compare, key, nKey);
            switch (_v1) {
              case 0:
                return A5(
                  $elm$core$Dict$balance,
                  nColor,
                  nKey,
                  nValue,
                  A3($elm$core$Dict$insertHelp, key, value, nLeft),
                  nRight
                );
              case 1:
                return A5($elm$core$Dict$RBNode_elm_builtin, nColor, nKey, value, nLeft, nRight);
              default:
                return A5(
                  $elm$core$Dict$balance,
                  nColor,
                  nKey,
                  nValue,
                  nLeft,
                  A3($elm$core$Dict$insertHelp, key, value, nRight)
                );
            }
          }
        }
      );
      var $elm$core$Dict$insert = F3(
        function(key, value, dict) {
          var _v0 = A3($elm$core$Dict$insertHelp, key, value, dict);
          if (_v0.$ === -1 && !_v0.a) {
            var _v1 = _v0.a;
            var k = _v0.b;
            var v = _v0.c;
            var l = _v0.d;
            var r = _v0.e;
            return A5($elm$core$Dict$RBNode_elm_builtin, 1, k, v, l, r);
          } else {
            var x = _v0;
            return x;
          }
        }
      );
      var $elm$core$Dict$fromList = function(assocs) {
        return A3(
          $elm$core$List$foldl,
          F2(
            function(_v0, dict) {
              var key = _v0.a;
              var value = _v0.b;
              return A3($elm$core$Dict$insert, key, value, dict);
            }
          ),
          $elm$core$Dict$empty,
          assocs
        );
      };
      var $MaybeJustJames$yaml$Yaml$Decode$fromValue = F2(
        function(_v0, v) {
          var decoder = _v0;
          return decoder(v);
        }
      );
      var $MaybeJustJames$yaml$Yaml$Decode$dict = function(decoder) {
        return function(v) {
          if (v.$ === 4) {
            var properties = v.a;
            return $elm$core$Result$Ok(
              $elm$core$Dict$fromList(
                A2(
                  $elm$core$List$filterMap,
                  function(_v2) {
                    var key = _v2.a;
                    var val = _v2.b;
                    if (!val.$) {
                      var val_ = val.a;
                      return $elm$core$Maybe$Just(
                        _Utils_Tuple2(key, val_)
                      );
                    } else {
                      return $elm$core$Maybe$Nothing;
                    }
                  },
                  A2(
                    $elm$core$List$map,
                    function(_v1) {
                      var key = _v1.a;
                      var val = _v1.b;
                      return _Utils_Tuple2(
                        key,
                        A2($MaybeJustJames$yaml$Yaml$Decode$fromValue, decoder, val)
                      );
                    },
                    $elm$core$Dict$toList(properties)
                  )
                )
              )
            );
          } else {
            return A2($MaybeJustJames$yaml$Yaml$Decode$decodeError, "record", v);
          }
        };
      };
      var $elm$json$Json$Encode$int = _Json_wrap;
      var $MaybeJustJames$yaml$Yaml$Decode$int = function(v) {
        if (v.$ === 2) {
          var int_ = v.a;
          return $elm$core$Result$Ok(int_);
        } else {
          return A2($MaybeJustJames$yaml$Yaml$Decode$decodeError, "int", v);
        }
      };
      var $MaybeJustJames$yaml$Yaml$Decode$map = F2(
        function(func, _v0) {
          var a = _v0;
          return function(v0) {
            var _v1 = a(v0);
            if (_v1.$ === 1) {
              var err = _v1.a;
              return $elm$core$Result$Err(err);
            } else {
              var av = _v1.a;
              return $elm$core$Result$Ok(
                func(av)
              );
            }
          };
        }
      );
      var $MaybeJustJames$yaml$Yaml$Decode$fail = function(error) {
        return function(_v0) {
          return $elm$core$Result$Err(
            $MaybeJustJames$yaml$Yaml$Decode$Decoding(error)
          );
        };
      };
      var $MaybeJustJames$yaml$Yaml$Decode$or = F2(
        function(lp, rp) {
          return function(v) {
            var _v0 = A2($MaybeJustJames$yaml$Yaml$Decode$fromValue, lp, v);
            if (!_v0.$) {
              var a = _v0.a;
              return $elm$core$Result$Ok(a);
            } else {
              return A2($MaybeJustJames$yaml$Yaml$Decode$fromValue, rp, v);
            }
          };
        }
      );
      var $MaybeJustJames$yaml$Yaml$Decode$oneOf = function(ds) {
        return A3(
          $elm$core$List$foldr,
          $MaybeJustJames$yaml$Yaml$Decode$or,
          $MaybeJustJames$yaml$Yaml$Decode$fail("Empty"),
          ds
        );
      };
      var $MaybeJustJames$yaml$Yaml$Decode$string = function(v) {
        switch (v.$) {
          case 0:
            var string_ = v.a;
            return $elm$core$Result$Ok(string_);
          case 6:
            return $elm$core$Result$Ok("");
          default:
            return A2($MaybeJustJames$yaml$Yaml$Decode$decodeError, "string", v);
        }
      };
      var $author$project$Config$decoder = $MaybeJustJames$yaml$Yaml$Decode$dict(
        $MaybeJustJames$yaml$Yaml$Decode$oneOf(
          _List_fromArray(
            [
              A2($MaybeJustJames$yaml$Yaml$Decode$map, $elm$json$Json$Encode$string, $MaybeJustJames$yaml$Yaml$Decode$string),
              A2(
                $MaybeJustJames$yaml$Yaml$Decode$map,
                A2($elm$json$Json$Encode$dict, $elm$core$Basics$identity, $elm$json$Json$Encode$int),
                $MaybeJustJames$yaml$Yaml$Decode$dict($MaybeJustJames$yaml$Yaml$Decode$int)
              )
            ]
          )
        )
      );
      var $elm$core$Dict$get = F2(
        function(targetKey, dict) {
          get:
            while (true) {
              if (dict.$ === -2) {
                return $elm$core$Maybe$Nothing;
              } else {
                var key = dict.b;
                var value = dict.c;
                var left = dict.d;
                var right = dict.e;
                var _v1 = A2($elm$core$Basics$compare, targetKey, key);
                switch (_v1) {
                  case 0:
                    var $temp$targetKey = targetKey, $temp$dict = left;
                    targetKey = $temp$targetKey;
                    dict = $temp$dict;
                    continue get;
                  case 1:
                    return $elm$core$Maybe$Just(value);
                  default:
                    var $temp$targetKey = targetKey, $temp$dict = right;
                    targetKey = $temp$targetKey;
                    dict = $temp$dict;
                    continue get;
                }
              }
            }
        }
      );
      var $MaybeJustJames$yaml$Yaml$Decode$find = F3(
        function(names, decoder, v0) {
          find:
            while (true) {
              if (names.b) {
                var name = names.a;
                var rest = names.b;
                if (v0.$ === 4) {
                  var properties = v0.a;
                  var _v2 = A2($elm$core$Dict$get, name, properties);
                  if (!_v2.$) {
                    var v1 = _v2.a;
                    var $temp$names = rest, $temp$decoder = decoder, $temp$v0 = v1;
                    names = $temp$names;
                    decoder = $temp$decoder;
                    v0 = $temp$v0;
                    continue find;
                  } else {
                    return $elm$core$Result$Err(
                      $MaybeJustJames$yaml$Yaml$Decode$Decoding("Expected property: " + name)
                    );
                  }
                } else {
                  return $elm$core$Result$Err(
                    $MaybeJustJames$yaml$Yaml$Decode$Decoding("Expected record")
                  );
                }
              } else {
                return A2($MaybeJustJames$yaml$Yaml$Decode$fromValue, decoder, v0);
              }
            }
        }
      );
      var $MaybeJustJames$yaml$Yaml$Decode$field = F2(
        function(name, decoder) {
          return function(v) {
            return A3(
              $MaybeJustJames$yaml$Yaml$Decode$find,
              _List_fromArray(
                [name]
              ),
              decoder,
              v
            );
          };
        }
      );
      var $MaybeJustJames$yaml$Yaml$Decode$map3 = F4(
        function(func, _v0, _v1, _v2) {
          var a = _v0;
          var b = _v1;
          var c = _v2;
          return function(v0) {
            var _v3 = a(v0);
            if (_v3.$ === 1) {
              var err1 = _v3.a;
              return $elm$core$Result$Err(err1);
            } else {
              var av = _v3.a;
              var _v4 = b(v0);
              if (_v4.$ === 1) {
                var err2 = _v4.a;
                return $elm$core$Result$Err(err2);
              } else {
                var bv = _v4.a;
                var _v5 = c(v0);
                if (_v5.$ === 1) {
                  var err3 = _v5.a;
                  return $elm$core$Result$Err(err3);
                } else {
                  var cv = _v5.a;
                  return $elm$core$Result$Ok(
                    A3(func, av, bv, cv)
                  );
                }
              }
            }
          };
        }
      );
      var $MaybeJustJames$yaml$Yaml$Decode$maybe = function(decoder) {
        return function(v) {
          var _v0 = A2($MaybeJustJames$yaml$Yaml$Decode$fromValue, decoder, v);
          if (!_v0.$) {
            var a = _v0.a;
            return $elm$core$Result$Ok(
              $elm$core$Maybe$Just(a)
            );
          } else {
            return $elm$core$Result$Ok($elm$core$Maybe$Nothing);
          }
        };
      };
      var $MaybeJustJames$yaml$Yaml$Decode$andThen = F2(
        function(next, decoder) {
          return function(v0) {
            var _v0 = A2($MaybeJustJames$yaml$Yaml$Decode$fromValue, decoder, v0);
            if (!_v0.$) {
              var a = _v0.a;
              return A2(
                $MaybeJustJames$yaml$Yaml$Decode$fromValue,
                next(a),
                v0
              );
            } else {
              var err = _v0.a;
              return $elm$core$Result$Err(err);
            }
          };
        }
      );
      var $MaybeJustJames$yaml$Yaml$Decode$succeed = function(v) {
        return function(_v0) {
          return $elm$core$Result$Ok(v);
        };
      };
      var $author$project$Token$yamlDecoder = A2(
        $MaybeJustJames$yaml$Yaml$Decode$andThen,
        function(string) {
          return $author$project$Token$validate(string) ? $MaybeJustJames$yaml$Yaml$Decode$succeed(string) : $MaybeJustJames$yaml$Yaml$Decode$fail("Token not valid");
        },
        $MaybeJustJames$yaml$Yaml$Decode$string
      );
      var $author$project$GlobalOptions$decoder = A4(
        $MaybeJustJames$yaml$Yaml$Decode$map3,
        $author$project$GlobalOptions$GlobalOptions,
        $MaybeJustJames$yaml$Yaml$Decode$maybe(
          A2($MaybeJustJames$yaml$Yaml$Decode$field, "domain", $MaybeJustJames$yaml$Yaml$Decode$string)
        ),
        $MaybeJustJames$yaml$Yaml$Decode$maybe(
          A2($MaybeJustJames$yaml$Yaml$Decode$field, "token", $author$project$Token$yamlDecoder)
        ),
        $MaybeJustJames$yaml$Yaml$Decode$maybe(
          A2($MaybeJustJames$yaml$Yaml$Decode$field, "output", $MaybeJustJames$yaml$Yaml$Decode$string)
        )
      );
      var $MaybeJustJames$yaml$Yaml$Decode$errorToString = function(e) {
        if (!e.$) {
          var msg = e.a;
          return "Error in parsing: " + msg;
        } else {
          var msg = e.a;
          return "Error in decoding: " + msg;
        }
      };
      var $author$project$Instruction$Instruction = $elm$core$Basics$identity;
      var $elm$core$Task$fail = _Scheduler_fail;
      var $author$project$Instruction$fail = function(message) {
        return $elm$core$Task$fail(message);
      };
      var $MaybeJustJames$yaml$Yaml$Decode$Parsing = function(a) {
        return { $: 0, a };
      };
      var $MaybeJustJames$yaml$Yaml$Parser$problemToString = function(p) {
        switch (p.$) {
          case 0:
            var msg = p.a;
            return "Expected " + msg;
          case 1:
            return "Expected an integer";
          case 2:
            return "Expected a hexadecimal value";
          case 3:
            return "Expected an octal value";
          case 4:
            return "Expected a binary value";
          case 5:
            return "Expected a float";
          case 6:
            return "Expected a number";
          case 7:
            return "Expected a variable";
          case 8:
            var name = p.a;
            return "Expected symbol '" + (name + "'");
          case 9:
            var name = p.a;
            return "Expected keyword '" + (name + "'");
          case 10:
            return "Expected end of input";
          case 11:
            return "Encountered an unexpected character";
          case 12:
            var msg = p.a;
            return "Problem: " + msg;
          default:
            return "Bad repeat";
        }
      };
      var $MaybeJustJames$yaml$Yaml$Parser$deadEndToString = function(deadend) {
        return "Line " + ($elm$core$String$fromInt(deadend.dL) + (", column " + ($elm$core$String$fromInt(deadend.A) + (": " + $MaybeJustJames$yaml$Yaml$Parser$problemToString(deadend.dG)))));
      };
      var $MaybeJustJames$yaml$Yaml$Parser$deadEndsToString = function(deadends) {
        return A2(
          $elm$core$String$join,
          "\n",
          A2($elm$core$List$map, $MaybeJustJames$yaml$Yaml$Parser$deadEndToString, deadends)
        );
      };
      var $elm$core$Dict$values = function(dict) {
        return A3(
          $elm$core$Dict$foldr,
          F3(
            function(key, value, valueList) {
              return A2($elm$core$List$cons, value, valueList);
            }
          ),
          _List_Nil,
          dict
        );
      };
      var $MaybeJustJames$yaml$Yaml$Parser$Ast$fold = F3(
        function(f, value, z) {
          switch (value.$) {
            case 0:
              return A2(f, value, z);
            case 1:
              return A2(f, value, z);
            case 2:
              return A2(f, value, z);
            case 5:
              return A2(f, value, z);
            case 6:
              return A2(f, value, z);
            case 8:
              return A2(f, value, z);
            case 3:
              var l = value.a;
              return A2(
                f,
                value,
                A3(
                  $elm$core$List$foldl,
                  $MaybeJustJames$yaml$Yaml$Parser$Ast$fold(f),
                  z,
                  l
                )
              );
            case 4:
              var r = value.a;
              return A2(
                f,
                value,
                A3(
                  $elm$core$List$foldl,
                  $MaybeJustJames$yaml$Yaml$Parser$Ast$fold(f),
                  z,
                  $elm$core$Dict$values(r)
                )
              );
            default:
              var nm = value.a;
              var a = value.b;
              return A2(
                f,
                value,
                A3($MaybeJustJames$yaml$Yaml$Parser$Ast$fold, f, a, z)
              );
          }
        }
      );
      var $MaybeJustJames$yaml$Yaml$Parser$Ast$Anchor_ = F2(
        function(a, b) {
          return { $: 7, a, b };
        }
      );
      var $MaybeJustJames$yaml$Yaml$Parser$Ast$List_ = function(a) {
        return { $: 3, a };
      };
      var $MaybeJustJames$yaml$Yaml$Parser$Ast$Record_ = function(a) {
        return { $: 4, a };
      };
      var $MaybeJustJames$yaml$Yaml$Parser$Ast$map = F2(
        function(f, value) {
          switch (value.$) {
            case 0:
              return f(value);
            case 1:
              return f(value);
            case 2:
              return f(value);
            case 5:
              return f(value);
            case 6:
              return f(value);
            case 8:
              return f(value);
            case 3:
              var l = value.a;
              return f(
                $MaybeJustJames$yaml$Yaml$Parser$Ast$List_(
                  A2(
                    $elm$core$List$map,
                    $MaybeJustJames$yaml$Yaml$Parser$Ast$map(f),
                    l
                  )
                )
              );
            case 4:
              var r = value.a;
              return f(
                $MaybeJustJames$yaml$Yaml$Parser$Ast$Record_(
                  $elm$core$Dict$fromList(
                    A2(
                      $elm$core$List$map,
                      function(_v1) {
                        var k = _v1.a;
                        var v = _v1.b;
                        return _Utils_Tuple2(
                          k,
                          A2($MaybeJustJames$yaml$Yaml$Parser$Ast$map, f, v)
                        );
                      },
                      $elm$core$Dict$toList(r)
                    )
                  )
                )
              );
            default:
              var name = value.a;
              var a = value.b;
              return f(
                A2(
                  $MaybeJustJames$yaml$Yaml$Parser$Ast$Anchor_,
                  name,
                  A2($MaybeJustJames$yaml$Yaml$Parser$Ast$map, f, a)
                )
              );
          }
        }
      );
      var $MaybeJustJames$yaml$Yaml$Parser$deref = function(ast) {
        var anchorMap = A3(
          $MaybeJustJames$yaml$Yaml$Parser$Ast$fold,
          F2(
            function(node, d) {
              if (node.$ === 7) {
                var name = node.a;
                var v = node.b;
                return A3($elm$core$Dict$insert, name, v, d);
              } else {
                return d;
              }
            }
          ),
          ast,
          $elm$core$Dict$empty
        );
        var replaceAnchors = function(v) {
          switch (v.$) {
            case 8:
              var name = v.a;
              return A2(
                $elm$core$Maybe$withDefault,
                v,
                A2($elm$core$Dict$get, name, anchorMap)
              );
            case 7:
              var node = v.b;
              return node;
            default:
              return v;
          }
        };
        return A2($MaybeJustJames$yaml$Yaml$Parser$Ast$map, replaceAnchors, ast);
      };
      var $elm$parser$Parser$Advanced$Bad = F2(
        function(a, b) {
          return { $: 1, a, b };
        }
      );
      var $elm$parser$Parser$Advanced$Good = F3(
        function(a, b, c) {
          return { $: 0, a, b, c };
        }
      );
      var $elm$parser$Parser$Advanced$Parser = $elm$core$Basics$identity;
      var $elm$parser$Parser$Advanced$andThen = F2(
        function(callback, _v0) {
          var parseA = _v0;
          return function(s0) {
            var _v1 = parseA(s0);
            if (_v1.$ === 1) {
              var p = _v1.a;
              var x = _v1.b;
              return A2($elm$parser$Parser$Advanced$Bad, p, x);
            } else {
              var p1 = _v1.a;
              var a = _v1.b;
              var s1 = _v1.c;
              var _v2 = callback(a);
              var parseB = _v2;
              var _v3 = parseB(s1);
              if (_v3.$ === 1) {
                var p2 = _v3.a;
                var x = _v3.b;
                return A2($elm$parser$Parser$Advanced$Bad, p1 || p2, x);
              } else {
                var p2 = _v3.a;
                var b = _v3.b;
                var s2 = _v3.c;
                return A3($elm$parser$Parser$Advanced$Good, p1 || p2, b, s2);
              }
            }
          };
        }
      );
      var $elm$parser$Parser$andThen = $elm$parser$Parser$Advanced$andThen;
      var $elm$core$Basics$always = F2(
        function(a, _v0) {
          return a;
        }
      );
      var $elm$parser$Parser$Advanced$map2 = F3(
        function(func, _v0, _v1) {
          var parseA = _v0;
          var parseB = _v1;
          return function(s0) {
            var _v2 = parseA(s0);
            if (_v2.$ === 1) {
              var p = _v2.a;
              var x = _v2.b;
              return A2($elm$parser$Parser$Advanced$Bad, p, x);
            } else {
              var p1 = _v2.a;
              var a = _v2.b;
              var s1 = _v2.c;
              var _v3 = parseB(s1);
              if (_v3.$ === 1) {
                var p2 = _v3.a;
                var x = _v3.b;
                return A2($elm$parser$Parser$Advanced$Bad, p1 || p2, x);
              } else {
                var p2 = _v3.a;
                var b = _v3.b;
                var s2 = _v3.c;
                return A3(
                  $elm$parser$Parser$Advanced$Good,
                  p1 || p2,
                  A2(func, a, b),
                  s2
                );
              }
            }
          };
        }
      );
      var $elm$parser$Parser$Advanced$ignorer = F2(
        function(keepParser, ignoreParser) {
          return A3($elm$parser$Parser$Advanced$map2, $elm$core$Basics$always, keepParser, ignoreParser);
        }
      );
      var $elm$parser$Parser$ignorer = $elm$parser$Parser$Advanced$ignorer;
      var $elm$parser$Parser$Advanced$Empty = { $: 0 };
      var $elm$parser$Parser$Advanced$Append = F2(
        function(a, b) {
          return { $: 2, a, b };
        }
      );
      var $elm$parser$Parser$Advanced$oneOfHelp = F3(
        function(s0, bag, parsers) {
          oneOfHelp:
            while (true) {
              if (!parsers.b) {
                return A2($elm$parser$Parser$Advanced$Bad, false, bag);
              } else {
                var parse = parsers.a;
                var remainingParsers = parsers.b;
                var _v1 = parse(s0);
                if (!_v1.$) {
                  var step = _v1;
                  return step;
                } else {
                  var step = _v1;
                  var p = step.a;
                  var x = step.b;
                  if (p) {
                    return step;
                  } else {
                    var $temp$s0 = s0, $temp$bag = A2($elm$parser$Parser$Advanced$Append, bag, x), $temp$parsers = remainingParsers;
                    s0 = $temp$s0;
                    bag = $temp$bag;
                    parsers = $temp$parsers;
                    continue oneOfHelp;
                  }
                }
              }
            }
        }
      );
      var $elm$parser$Parser$Advanced$oneOf = function(parsers) {
        return function(s) {
          return A3($elm$parser$Parser$Advanced$oneOfHelp, s, $elm$parser$Parser$Advanced$Empty, parsers);
        };
      };
      var $elm$parser$Parser$oneOf = $elm$parser$Parser$Advanced$oneOf;
      var $elm$parser$Parser$Advanced$succeed = function(a) {
        return function(s) {
          return A3($elm$parser$Parser$Advanced$Good, false, a, s);
        };
      };
      var $elm$parser$Parser$succeed = $elm$parser$Parser$Advanced$succeed;
      var $elm$parser$Parser$ExpectingSymbol = function(a) {
        return { $: 8, a };
      };
      var $elm$parser$Parser$Advanced$Token = F2(
        function(a, b) {
          return { $: 0, a, b };
        }
      );
      var $elm$parser$Parser$Advanced$AddRight = F2(
        function(a, b) {
          return { $: 1, a, b };
        }
      );
      var $elm$parser$Parser$Advanced$DeadEnd = F4(
        function(row, col, problem, contextStack) {
          return { A: col, db: contextStack, dG: problem, dL: row };
        }
      );
      var $elm$parser$Parser$Advanced$fromState = F2(
        function(s, x) {
          return A2(
            $elm$parser$Parser$Advanced$AddRight,
            $elm$parser$Parser$Advanced$Empty,
            A4($elm$parser$Parser$Advanced$DeadEnd, s.dL, s.A, x, s.c)
          );
        }
      );
      var $elm$core$String$isEmpty = function(string) {
        return string === "";
      };
      var $elm$parser$Parser$Advanced$isSubString = _Parser_isSubString;
      var $elm$core$Basics$not = _Basics_not;
      var $elm$parser$Parser$Advanced$token = function(_v0) {
        var str = _v0.a;
        var expecting = _v0.b;
        var progress = !$elm$core$String$isEmpty(str);
        return function(s) {
          var _v1 = A5($elm$parser$Parser$Advanced$isSubString, str, s.b6, s.dL, s.A, s.a);
          var newOffset = _v1.a;
          var newRow = _v1.b;
          var newCol = _v1.c;
          return _Utils_eq(newOffset, -1) ? A2(
            $elm$parser$Parser$Advanced$Bad,
            false,
            A2($elm$parser$Parser$Advanced$fromState, s, expecting)
          ) : A3(
            $elm$parser$Parser$Advanced$Good,
            progress,
            0,
            { A: newCol, c: s.c, B: s.B, b6: newOffset, dL: newRow, a: s.a }
          );
        };
      };
      var $elm$parser$Parser$Advanced$symbol = $elm$parser$Parser$Advanced$token;
      var $elm$parser$Parser$symbol = function(str) {
        return $elm$parser$Parser$Advanced$symbol(
          A2(
            $elm$parser$Parser$Advanced$Token,
            str,
            $elm$parser$Parser$ExpectingSymbol(str)
          )
        );
      };
      var $MaybeJustJames$yaml$Yaml$Parser$Util$threeDashes = $elm$parser$Parser$symbol("---");
      var $elm$parser$Parser$Done = function(a) {
        return { $: 1, a };
      };
      var $elm$parser$Parser$Loop = function(a) {
        return { $: 0, a };
      };
      var $elm$parser$Parser$Advanced$chompUntilEndOr = function(str) {
        return function(s) {
          var _v0 = A5(_Parser_findSubString, str, s.b6, s.dL, s.A, s.a);
          var newOffset = _v0.a;
          var newRow = _v0.b;
          var newCol = _v0.c;
          var adjustedOffset = newOffset < 0 ? $elm$core$String$length(s.a) : newOffset;
          return A3(
            $elm$parser$Parser$Advanced$Good,
            _Utils_cmp(s.b6, adjustedOffset) < 0,
            0,
            { A: newCol, c: s.c, B: s.B, b6: adjustedOffset, dL: newRow, a: s.a }
          );
        };
      };
      var $elm$parser$Parser$Advanced$lineComment = function(start) {
        return A2(
          $elm$parser$Parser$Advanced$ignorer,
          $elm$parser$Parser$Advanced$token(start),
          $elm$parser$Parser$Advanced$chompUntilEndOr("\n")
        );
      };
      var $elm$parser$Parser$Expecting = function(a) {
        return { $: 0, a };
      };
      var $elm$parser$Parser$toToken = function(str) {
        return A2(
          $elm$parser$Parser$Advanced$Token,
          str,
          $elm$parser$Parser$Expecting(str)
        );
      };
      var $elm$parser$Parser$lineComment = function(str) {
        return $elm$parser$Parser$Advanced$lineComment(
          $elm$parser$Parser$toToken(str)
        );
      };
      var $MaybeJustJames$yaml$Yaml$Parser$Util$comment = $elm$parser$Parser$lineComment("#");
      var $elm$parser$Parser$Advanced$loopHelp = F4(
        function(p, state, callback, s0) {
          loopHelp:
            while (true) {
              var _v0 = callback(state);
              var parse = _v0;
              var _v1 = parse(s0);
              if (!_v1.$) {
                var p1 = _v1.a;
                var step = _v1.b;
                var s1 = _v1.c;
                if (!step.$) {
                  var newState = step.a;
                  var $temp$p = p || p1, $temp$state = newState, $temp$callback = callback, $temp$s0 = s1;
                  p = $temp$p;
                  state = $temp$state;
                  callback = $temp$callback;
                  s0 = $temp$s0;
                  continue loopHelp;
                } else {
                  var result = step.a;
                  return A3($elm$parser$Parser$Advanced$Good, p || p1, result, s1);
                }
              } else {
                var p1 = _v1.a;
                var x = _v1.b;
                return A2($elm$parser$Parser$Advanced$Bad, p || p1, x);
              }
            }
        }
      );
      var $elm$parser$Parser$Advanced$loop = F2(
        function(state, callback) {
          return function(s) {
            return A4($elm$parser$Parser$Advanced$loopHelp, false, state, callback, s);
          };
        }
      );
      var $elm$parser$Parser$Advanced$map = F2(
        function(func, _v0) {
          var parse = _v0;
          return function(s0) {
            var _v1 = parse(s0);
            if (!_v1.$) {
              var p = _v1.a;
              var a = _v1.b;
              var s1 = _v1.c;
              return A3(
                $elm$parser$Parser$Advanced$Good,
                p,
                func(a),
                s1
              );
            } else {
              var p = _v1.a;
              var x = _v1.b;
              return A2($elm$parser$Parser$Advanced$Bad, p, x);
            }
          };
        }
      );
      var $elm$parser$Parser$map = $elm$parser$Parser$Advanced$map;
      var $elm$parser$Parser$Advanced$Done = function(a) {
        return { $: 1, a };
      };
      var $elm$parser$Parser$Advanced$Loop = function(a) {
        return { $: 0, a };
      };
      var $elm$parser$Parser$toAdvancedStep = function(step) {
        if (!step.$) {
          var s = step.a;
          return $elm$parser$Parser$Advanced$Loop(s);
        } else {
          var a = step.a;
          return $elm$parser$Parser$Advanced$Done(a);
        }
      };
      var $elm$parser$Parser$loop = F2(
        function(state, callback) {
          return A2(
            $elm$parser$Parser$Advanced$loop,
            state,
            function(s) {
              return A2(
                $elm$parser$Parser$map,
                $elm$parser$Parser$toAdvancedStep,
                callback(s)
              );
            }
          );
        }
      );
      var $MaybeJustJames$yaml$Yaml$Parser$Util$whitespace = function() {
        var step = function(_v0) {
          return $elm$parser$Parser$oneOf(
            _List_fromArray(
              [
                A2(
                  $elm$parser$Parser$ignorer,
                  $elm$parser$Parser$succeed(
                    $elm$parser$Parser$Loop(0)
                  ),
                  $MaybeJustJames$yaml$Yaml$Parser$Util$comment
                ),
                A2(
                  $elm$parser$Parser$ignorer,
                  $elm$parser$Parser$succeed(
                    $elm$parser$Parser$Loop(0)
                  ),
                  $elm$parser$Parser$symbol(" ")
                ),
                A2(
                  $elm$parser$Parser$ignorer,
                  $elm$parser$Parser$succeed(
                    $elm$parser$Parser$Loop(0)
                  ),
                  $elm$parser$Parser$symbol("\n")
                ),
                $elm$parser$Parser$succeed(
                  $elm$parser$Parser$Done(0)
                )
              ]
            )
          );
        };
        return A2($elm$parser$Parser$loop, 0, step);
      }();
      var $MaybeJustJames$yaml$Yaml$Parser$Document$dashes = function(indent) {
        return indent === 1 ? $elm$parser$Parser$oneOf(
          _List_fromArray(
            [
              A2(
                $elm$parser$Parser$ignorer,
                A2(
                  $elm$parser$Parser$ignorer,
                  $elm$parser$Parser$succeed($elm$core$Basics$identity),
                  $MaybeJustJames$yaml$Yaml$Parser$Util$threeDashes
                ),
                $MaybeJustJames$yaml$Yaml$Parser$Util$whitespace
              ),
              A2(
                $elm$parser$Parser$ignorer,
                $elm$parser$Parser$succeed($elm$core$Basics$identity),
                $MaybeJustJames$yaml$Yaml$Parser$Util$whitespace
              )
            ]
          )
        ) : A2(
          $elm$parser$Parser$ignorer,
          $elm$parser$Parser$succeed($elm$core$Basics$identity),
          $MaybeJustJames$yaml$Yaml$Parser$Util$whitespace
        );
      };
      var $elm$parser$Parser$Advanced$getCol = function(s) {
        return A3($elm$parser$Parser$Advanced$Good, false, s.A, s);
      };
      var $elm$parser$Parser$getCol = $elm$parser$Parser$Advanced$getCol;
      var $MaybeJustJames$yaml$Yaml$Parser$Document$begins = $elm$parser$Parser$oneOf(
        _List_fromArray(
          [
            A2(
              $elm$parser$Parser$ignorer,
              A2(
                $elm$parser$Parser$ignorer,
                $elm$parser$Parser$succeed($elm$core$Basics$identity),
                $MaybeJustJames$yaml$Yaml$Parser$Util$whitespace
              ),
              A2($elm$parser$Parser$andThen, $MaybeJustJames$yaml$Yaml$Parser$Document$dashes, $elm$parser$Parser$getCol)
            ),
            A2(
              $elm$parser$Parser$ignorer,
              $elm$parser$Parser$succeed($elm$core$Basics$identity),
              $MaybeJustJames$yaml$Yaml$Parser$Util$whitespace
            )
          ]
        )
      );
      var $elm$parser$Parser$ExpectingEnd = { $: 10 };
      var $elm$parser$Parser$Advanced$end = function(x) {
        return function(s) {
          return _Utils_eq(
            $elm$core$String$length(s.a),
            s.b6
          ) ? A3($elm$parser$Parser$Advanced$Good, false, 0, s) : A2(
            $elm$parser$Parser$Advanced$Bad,
            false,
            A2($elm$parser$Parser$Advanced$fromState, s, x)
          );
        };
      };
      var $elm$parser$Parser$end = $elm$parser$Parser$Advanced$end($elm$parser$Parser$ExpectingEnd);
      var $MaybeJustJames$yaml$Yaml$Parser$Util$threeDots = $elm$parser$Parser$symbol("...");
      var $MaybeJustJames$yaml$Yaml$Parser$Document$ends = A2(
        $elm$parser$Parser$ignorer,
        A2(
          $elm$parser$Parser$ignorer,
          A2(
            $elm$parser$Parser$ignorer,
            A2(
              $elm$parser$Parser$ignorer,
              $elm$parser$Parser$succeed($elm$core$Basics$identity),
              $MaybeJustJames$yaml$Yaml$Parser$Util$whitespace
            ),
            $elm$parser$Parser$oneOf(
              _List_fromArray(
                [
                  $MaybeJustJames$yaml$Yaml$Parser$Util$threeDots,
                  $elm$parser$Parser$succeed(0)
                ]
              )
            )
          ),
          $MaybeJustJames$yaml$Yaml$Parser$Util$whitespace
        ),
        $elm$parser$Parser$end
      );
      var $elm$parser$Parser$Advanced$keeper = F2(
        function(parseFunc, parseArg) {
          return A3($elm$parser$Parser$Advanced$map2, $elm$core$Basics$apL, parseFunc, parseArg);
        }
      );
      var $elm$parser$Parser$keeper = $elm$parser$Parser$Advanced$keeper;
      var $MaybeJustJames$yaml$Yaml$Parser$Ast$Null_ = { $: 6 };
      var $MaybeJustJames$yaml$Yaml$Parser$Ast$String_ = function(a) {
        return { $: 0, a };
      };
      var $elm$core$Basics$composeL = F3(
        function(g, f, x) {
          return g(
            f(x)
          );
        }
      );
      var $elm$parser$Parser$chompUntilEndOr = $elm$parser$Parser$Advanced$chompUntilEndOr;
      var $elm$parser$Parser$Advanced$mapChompedString = F2(
        function(func, _v0) {
          var parse = _v0;
          return function(s0) {
            var _v1 = parse(s0);
            if (_v1.$ === 1) {
              var p = _v1.a;
              var x = _v1.b;
              return A2($elm$parser$Parser$Advanced$Bad, p, x);
            } else {
              var p = _v1.a;
              var a = _v1.b;
              var s1 = _v1.c;
              return A3(
                $elm$parser$Parser$Advanced$Good,
                p,
                A2(
                  func,
                  A3($elm$core$String$slice, s0.b6, s1.b6, s0.a),
                  a
                ),
                s1
              );
            }
          };
        }
      );
      var $elm$parser$Parser$Advanced$getChompedString = function(parser) {
        return A2($elm$parser$Parser$Advanced$mapChompedString, $elm$core$Basics$always, parser);
      };
      var $elm$parser$Parser$getChompedString = $elm$parser$Parser$Advanced$getChompedString;
      var $MaybeJustJames$yaml$Yaml$Parser$Util$remaining = $elm$parser$Parser$getChompedString(
        A2(
          $elm$parser$Parser$ignorer,
          $elm$parser$Parser$succeed(0),
          $elm$parser$Parser$chompUntilEndOr("\n...\n")
        )
      );
      var $MaybeJustJames$yaml$Yaml$Parser$String$exceptions = function() {
        var dashed = function(s) {
          return "---" + s;
        };
        return $elm$parser$Parser$oneOf(
          _List_fromArray(
            [
              A2(
                $elm$parser$Parser$ignorer,
                $elm$parser$Parser$succeed($MaybeJustJames$yaml$Yaml$Parser$Ast$Null_),
                $elm$parser$Parser$end
              ),
              A2(
                $elm$parser$Parser$keeper,
                A2(
                  $elm$parser$Parser$ignorer,
                  $elm$parser$Parser$succeed(
                    A2($elm$core$Basics$composeL, $MaybeJustJames$yaml$Yaml$Parser$Ast$String_, dashed)
                  ),
                  $MaybeJustJames$yaml$Yaml$Parser$Util$threeDashes
                ),
                $MaybeJustJames$yaml$Yaml$Parser$Util$remaining
              ),
              A2(
                $elm$parser$Parser$ignorer,
                A2(
                  $elm$parser$Parser$ignorer,
                  $elm$parser$Parser$succeed($MaybeJustJames$yaml$Yaml$Parser$Ast$Null_),
                  $MaybeJustJames$yaml$Yaml$Parser$Util$threeDots
                ),
                $MaybeJustJames$yaml$Yaml$Parser$Util$remaining
              )
            ]
          )
        );
      }();
      var $elm$parser$Parser$Advanced$isSubChar = _Parser_isSubChar;
      var $elm$parser$Parser$Advanced$chompWhileHelp = F5(
        function(isGood, offset, row, col, s0) {
          chompWhileHelp:
            while (true) {
              var newOffset = A3($elm$parser$Parser$Advanced$isSubChar, isGood, offset, s0.a);
              if (_Utils_eq(newOffset, -1)) {
                return A3(
                  $elm$parser$Parser$Advanced$Good,
                  _Utils_cmp(s0.b6, offset) < 0,
                  0,
                  { A: col, c: s0.c, B: s0.B, b6: offset, dL: row, a: s0.a }
                );
              } else {
                if (_Utils_eq(newOffset, -2)) {
                  var $temp$isGood = isGood, $temp$offset = offset + 1, $temp$row = row + 1, $temp$col = 1, $temp$s0 = s0;
                  isGood = $temp$isGood;
                  offset = $temp$offset;
                  row = $temp$row;
                  col = $temp$col;
                  s0 = $temp$s0;
                  continue chompWhileHelp;
                } else {
                  var $temp$isGood = isGood, $temp$offset = newOffset, $temp$row = row, $temp$col = col + 1, $temp$s0 = s0;
                  isGood = $temp$isGood;
                  offset = $temp$offset;
                  row = $temp$row;
                  col = $temp$col;
                  s0 = $temp$s0;
                  continue chompWhileHelp;
                }
              }
            }
        }
      );
      var $elm$parser$Parser$Advanced$chompWhile = function(isGood) {
        return function(s) {
          return A5($elm$parser$Parser$Advanced$chompWhileHelp, isGood, s.b6, s.dL, s.A, s);
        };
      };
      var $elm$parser$Parser$chompWhile = $elm$parser$Parser$Advanced$chompWhile;
      var $MaybeJustJames$yaml$Yaml$Parser$refName = A2(
        $elm$parser$Parser$keeper,
        $elm$parser$Parser$succeed($elm$core$Basics$identity),
        $elm$parser$Parser$getChompedString(
          $elm$parser$Parser$chompWhile(
            function(c) {
              return !A2(
                $elm$core$List$member,
                c,
                _List_fromArray(
                  ["\r", "\n", " ", "	", ",", "[", "]", "{", "}"]
                )
              );
            }
          )
        )
      );
      var $MaybeJustJames$yaml$Yaml$Parser$anchor = function(valParser) {
        return A2(
          $elm$parser$Parser$keeper,
          A2(
            $elm$parser$Parser$keeper,
            A2(
              $elm$parser$Parser$ignorer,
              $elm$parser$Parser$succeed($MaybeJustJames$yaml$Yaml$Parser$Ast$Anchor_),
              $elm$parser$Parser$symbol("&")
            ),
            A2($elm$parser$Parser$ignorer, $MaybeJustJames$yaml$Yaml$Parser$refName, $MaybeJustJames$yaml$Yaml$Parser$Util$whitespace)
          ),
          A2($elm$parser$Parser$andThen, valParser, $elm$parser$Parser$getCol)
        );
      };
      var $elm$parser$Parser$Advanced$backtrackable = function(_v0) {
        var parse = _v0;
        return function(s0) {
          var _v1 = parse(s0);
          if (_v1.$ === 1) {
            var x = _v1.b;
            return A2($elm$parser$Parser$Advanced$Bad, false, x);
          } else {
            var a = _v1.b;
            var s1 = _v1.c;
            return A3($elm$parser$Parser$Advanced$Good, false, a, s1);
          }
        };
      };
      var $elm$parser$Parser$backtrackable = $elm$parser$Parser$Advanced$backtrackable;
      var $elm$parser$Parser$UnexpectedChar = { $: 11 };
      var $elm$parser$Parser$Advanced$chompIf = F2(
        function(isGood, expecting) {
          return function(s) {
            var newOffset = A3($elm$parser$Parser$Advanced$isSubChar, isGood, s.b6, s.a);
            return _Utils_eq(newOffset, -1) ? A2(
              $elm$parser$Parser$Advanced$Bad,
              false,
              A2($elm$parser$Parser$Advanced$fromState, s, expecting)
            ) : _Utils_eq(newOffset, -2) ? A3(
              $elm$parser$Parser$Advanced$Good,
              true,
              0,
              { A: 1, c: s.c, B: s.B, b6: s.b6 + 1, dL: s.dL + 1, a: s.a }
            ) : A3(
              $elm$parser$Parser$Advanced$Good,
              true,
              0,
              { A: s.A + 1, c: s.c, B: s.B, b6: newOffset, dL: s.dL, a: s.a }
            );
          };
        }
      );
      var $elm$parser$Parser$chompIf = function(isGood) {
        return A2($elm$parser$Parser$Advanced$chompIf, isGood, $elm$parser$Parser$UnexpectedChar);
      };
      var $MaybeJustJames$yaml$Yaml$Parser$Util$characters_ = function(isOk) {
        return $elm$parser$Parser$getChompedString(
          A2(
            $elm$parser$Parser$ignorer,
            $elm$parser$Parser$succeed(0),
            $elm$parser$Parser$chompWhile(isOk)
          )
        );
      };
      var $MaybeJustJames$yaml$Yaml$Parser$Util$is = F2(
        function(searched, _char) {
          return _Utils_eq(_char, searched);
        }
      );
      var $MaybeJustJames$yaml$Yaml$Parser$Util$isDoubleQuote = $MaybeJustJames$yaml$Yaml$Parser$Util$is('"');
      var $MaybeJustJames$yaml$Yaml$Parser$Util$isSpace = $MaybeJustJames$yaml$Yaml$Parser$Util$is(" ");
      var $MaybeJustJames$yaml$Yaml$Parser$Util$spaces = $elm$parser$Parser$chompWhile($MaybeJustJames$yaml$Yaml$Parser$Util$isSpace);
      var $MaybeJustJames$yaml$Yaml$Parser$Util$doubleQuotes = A2(
        $elm$parser$Parser$keeper,
        A2(
          $elm$parser$Parser$ignorer,
          $elm$parser$Parser$succeed($elm$core$Basics$identity),
          $elm$parser$Parser$symbol('"')
        ),
        A2(
          $elm$parser$Parser$ignorer,
          A2(
            $elm$parser$Parser$ignorer,
            $MaybeJustJames$yaml$Yaml$Parser$Util$characters_(
              A2($elm$core$Basics$composeL, $elm$core$Basics$not, $MaybeJustJames$yaml$Yaml$Parser$Util$isDoubleQuote)
            ),
            $elm$parser$Parser$symbol('"')
          ),
          $MaybeJustJames$yaml$Yaml$Parser$Util$spaces
        )
      );
      var $elm$core$Set$Set_elm_builtin = $elm$core$Basics$identity;
      var $elm$core$Set$empty = $elm$core$Dict$empty;
      var $elm$core$Set$insert = F2(
        function(key, _v0) {
          var dict = _v0;
          return A3($elm$core$Dict$insert, key, 0, dict);
        }
      );
      var $elm$core$Dict$member = F2(
        function(key, dict) {
          var _v0 = A2($elm$core$Dict$get, key, dict);
          if (!_v0.$) {
            return true;
          } else {
            return false;
          }
        }
      );
      var $elm$core$Set$member = F2(
        function(key, _v0) {
          var dict = _v0;
          return A2($elm$core$Dict$member, key, dict);
        }
      );
      var $elm$core$Tuple$second = function(_v0) {
        var y = _v0.b;
        return y;
      };
      var $MaybeJustJames$yaml$Yaml$Parser$duplicatedPropertyKeys = function(properties) {
        var keys = A2($elm$core$List$map, $elm$core$Tuple$first, properties);
        var duplicated = A3(
          $elm$core$List$foldr,
          F2(
            function(x, _v0) {
              var obs = _v0.a;
              var dup = _v0.b;
              return A2($elm$core$Set$member, x, obs) ? _Utils_Tuple2(
                obs,
                A2($elm$core$Set$insert, x, dup)
              ) : _Utils_Tuple2(
                A2($elm$core$Set$insert, x, obs),
                dup
              );
            }
          ),
          _Utils_Tuple2($elm$core$Set$empty, $elm$core$Set$empty),
          keys
        );
        return $elm$core$Set$toList(duplicated.b);
      };
      var $elm$parser$Parser$Problem = function(a) {
        return { $: 12, a };
      };
      var $elm$parser$Parser$Advanced$problem = function(x) {
        return function(s) {
          return A2(
            $elm$parser$Parser$Advanced$Bad,
            false,
            A2($elm$parser$Parser$Advanced$fromState, s, x)
          );
        };
      };
      var $elm$parser$Parser$problem = function(msg) {
        return $elm$parser$Parser$Advanced$problem(
          $elm$parser$Parser$Problem(msg)
        );
      };
      var $MaybeJustJames$yaml$Yaml$Parser$duplicatedPropertyKeysCheck = function(properties) {
        var duplicates = $MaybeJustJames$yaml$Yaml$Parser$duplicatedPropertyKeys(properties);
        return !$elm$core$List$length(duplicates) ? $elm$parser$Parser$succeed(properties) : $elm$parser$Parser$problem(
          "Non-unique keys in record: " + A2($elm$core$String$join, ", ", duplicates)
        );
      };
      var $MaybeJustJames$yaml$Yaml$Parser$Ast$Bool_ = function(a) {
        return { $: 5, a };
      };
      var $MaybeJustJames$yaml$Yaml$Parser$Ast$Float_ = function(a) {
        return { $: 1, a };
      };
      var $MaybeJustJames$yaml$Yaml$Parser$Ast$Int_ = function(a) {
        return { $: 2, a };
      };
      var $elm$core$String$toFloat = _String_toFloat;
      var $elm$core$String$trim = _String_trim;
      var $MaybeJustJames$yaml$Yaml$Parser$Ast$fromString = function(string) {
        var trimmed = $elm$core$String$trim(string);
        var sign = function() {
          if ($elm$core$String$length(trimmed) > 1) {
            var _v3 = A2($elm$core$String$left, 1, trimmed);
            switch (_v3) {
              case "-":
                return _Utils_Tuple2(
                  -1,
                  A2($elm$core$String$dropLeft, 1, trimmed)
                );
              case "+":
                return _Utils_Tuple2(
                  1,
                  A2($elm$core$String$dropLeft, 1, trimmed)
                );
              default:
                return _Utils_Tuple2(1, trimmed);
            }
          } else {
            return _Utils_Tuple2(1, trimmed);
          }
        }();
        switch (sign.b) {
          case "":
            return $MaybeJustJames$yaml$Yaml$Parser$Ast$Null_;
          case "~":
            return $MaybeJustJames$yaml$Yaml$Parser$Ast$Null_;
          case "null":
            return $MaybeJustJames$yaml$Yaml$Parser$Ast$Null_;
          case "Null":
            return $MaybeJustJames$yaml$Yaml$Parser$Ast$Null_;
          case "NULL":
            return $MaybeJustJames$yaml$Yaml$Parser$Ast$Null_;
          case "true":
            return $MaybeJustJames$yaml$Yaml$Parser$Ast$Bool_(true);
          case "True":
            return $MaybeJustJames$yaml$Yaml$Parser$Ast$Bool_(true);
          case "TRUE":
            return $MaybeJustJames$yaml$Yaml$Parser$Ast$Bool_(true);
          case "on":
            return $MaybeJustJames$yaml$Yaml$Parser$Ast$Bool_(true);
          case "On":
            return $MaybeJustJames$yaml$Yaml$Parser$Ast$Bool_(true);
          case "ON":
            return $MaybeJustJames$yaml$Yaml$Parser$Ast$Bool_(true);
          case "y":
            return $MaybeJustJames$yaml$Yaml$Parser$Ast$Bool_(true);
          case "Y":
            return $MaybeJustJames$yaml$Yaml$Parser$Ast$Bool_(true);
          case "yes":
            return $MaybeJustJames$yaml$Yaml$Parser$Ast$Bool_(true);
          case "Yes":
            return $MaybeJustJames$yaml$Yaml$Parser$Ast$Bool_(true);
          case "YES":
            return $MaybeJustJames$yaml$Yaml$Parser$Ast$Bool_(true);
          case "false":
            return $MaybeJustJames$yaml$Yaml$Parser$Ast$Bool_(false);
          case "False":
            return $MaybeJustJames$yaml$Yaml$Parser$Ast$Bool_(false);
          case "FALSE":
            return $MaybeJustJames$yaml$Yaml$Parser$Ast$Bool_(false);
          case "off":
            return $MaybeJustJames$yaml$Yaml$Parser$Ast$Bool_(false);
          case "Off":
            return $MaybeJustJames$yaml$Yaml$Parser$Ast$Bool_(false);
          case "OFF":
            return $MaybeJustJames$yaml$Yaml$Parser$Ast$Bool_(false);
          case "n":
            return $MaybeJustJames$yaml$Yaml$Parser$Ast$Bool_(false);
          case "N":
            return $MaybeJustJames$yaml$Yaml$Parser$Ast$Bool_(false);
          case "no":
            return $MaybeJustJames$yaml$Yaml$Parser$Ast$Bool_(false);
          case "No":
            return $MaybeJustJames$yaml$Yaml$Parser$Ast$Bool_(false);
          case "NO":
            return $MaybeJustJames$yaml$Yaml$Parser$Ast$Bool_(false);
          case ".nan":
            return $MaybeJustJames$yaml$Yaml$Parser$Ast$Float_(0 / 0);
          case ".NaN":
            return $MaybeJustJames$yaml$Yaml$Parser$Ast$Float_(0 / 0);
          case ".NAN":
            return $MaybeJustJames$yaml$Yaml$Parser$Ast$Float_(0 / 0);
          case ".inf":
            var mult = sign.a;
            return $MaybeJustJames$yaml$Yaml$Parser$Ast$Float_(mult * 1 / 0);
          case ".Inf":
            var mult = sign.a;
            return $MaybeJustJames$yaml$Yaml$Parser$Ast$Float_(mult * 1 / 0);
          case ".INF":
            var mult = sign.a;
            return $MaybeJustJames$yaml$Yaml$Parser$Ast$Float_(mult * 1 / 0);
          default:
            var _v1 = $elm$core$String$toInt(trimmed);
            if (!_v1.$) {
              var _int = _v1.a;
              return $MaybeJustJames$yaml$Yaml$Parser$Ast$Int_(_int);
            } else {
              var _v2 = $elm$core$String$toFloat(trimmed);
              if (!_v2.$) {
                var _float = _v2.a;
                return $MaybeJustJames$yaml$Yaml$Parser$Ast$Float_(_float);
              } else {
                return $MaybeJustJames$yaml$Yaml$Parser$Ast$String_(
                  $elm$core$String$trim(trimmed)
                );
              }
            }
        }
      };
      var $elm$core$List$head = function(list) {
        if (list.b) {
          var x = list.a;
          var xs = list.b;
          return $elm$core$Maybe$Just(x);
        } else {
          return $elm$core$Maybe$Nothing;
        }
      };
      var $MaybeJustJames$yaml$Yaml$Parser$Util$indented = F2(
        function(indent, next) {
          var check = function(actual) {
            return $elm$parser$Parser$oneOf(
              _List_fromArray(
                [
                  A2(
                    $elm$parser$Parser$andThen,
                    function(_v0) {
                      return next.at;
                    },
                    $elm$parser$Parser$end
                  ),
                  A2(
                    $elm$parser$Parser$andThen,
                    function(_v1) {
                      return next.at;
                    },
                    $elm$parser$Parser$symbol("\n...\n")
                  ),
                  _Utils_eq(actual, indent) ? next.au : _Utils_cmp(actual, indent) > 0 ? next.az(actual) : next.aK
                ]
              )
            );
          };
          return A2(
            $elm$parser$Parser$andThen,
            check,
            A2(
              $elm$parser$Parser$keeper,
              A2(
                $elm$parser$Parser$ignorer,
                $elm$parser$Parser$succeed($elm$core$Basics$identity),
                $MaybeJustJames$yaml$Yaml$Parser$Util$whitespace
              ),
              $elm$parser$Parser$getCol
            )
          );
        }
      );
      var $MaybeJustJames$yaml$Yaml$Parser$Util$isColon = $MaybeJustJames$yaml$Yaml$Parser$Util$is(":");
      var $MaybeJustJames$yaml$Yaml$Parser$Util$isListEnd = $MaybeJustJames$yaml$Yaml$Parser$Util$is("]");
      var $MaybeJustJames$yaml$Yaml$Parser$Util$isListStart = $MaybeJustJames$yaml$Yaml$Parser$Util$is("[");
      var $MaybeJustJames$yaml$Yaml$Parser$Util$isNewLine = $MaybeJustJames$yaml$Yaml$Parser$Util$is("\n");
      var $MaybeJustJames$yaml$Yaml$Parser$Util$isRecordEnd = $MaybeJustJames$yaml$Yaml$Parser$Util$is("}");
      var $MaybeJustJames$yaml$Yaml$Parser$Util$isRecordStart = $MaybeJustJames$yaml$Yaml$Parser$Util$is("{");
      var $MaybeJustJames$yaml$Yaml$Parser$listElementBegin = $elm$parser$Parser$oneOf(
        _List_fromArray(
          [
            $elm$parser$Parser$symbol("- "),
            $elm$parser$Parser$symbol("-\n")
          ]
        )
      );
      var $MaybeJustJames$yaml$Yaml$Parser$Util$isComma = $MaybeJustJames$yaml$Yaml$Parser$Util$is(",");
      var $MaybeJustJames$yaml$Yaml$Parser$listInlineOnDone = F2(
        function(elements, element) {
          return $elm$parser$Parser$Done(
            $elm$core$List$reverse(
              A2($elm$core$List$cons, element, elements)
            )
          );
        }
      );
      var $MaybeJustJames$yaml$Yaml$Parser$listInlineOnMore = F2(
        function(elements, element) {
          return $elm$parser$Parser$Loop(
            A2($elm$core$List$cons, element, elements)
          );
        }
      );
      var $MaybeJustJames$yaml$Yaml$Parser$listInlineNext = F2(
        function(elements, element) {
          return $elm$parser$Parser$oneOf(
            _List_fromArray(
              [
                A2(
                  $elm$parser$Parser$ignorer,
                  $elm$parser$Parser$succeed(
                    A2($MaybeJustJames$yaml$Yaml$Parser$listInlineOnMore, elements, element)
                  ),
                  $elm$parser$Parser$chompIf($MaybeJustJames$yaml$Yaml$Parser$Util$isComma)
                ),
                A2(
                  $elm$parser$Parser$ignorer,
                  $elm$parser$Parser$succeed(
                    A2($MaybeJustJames$yaml$Yaml$Parser$listInlineOnDone, elements, element)
                  ),
                  $elm$parser$Parser$chompIf($MaybeJustJames$yaml$Yaml$Parser$Util$isListEnd)
                )
              ]
            )
          );
        }
      );
      var $MaybeJustJames$yaml$Yaml$Parser$Util$neither = F3(
        function(f1, f2, _char) {
          return !f1(_char) && !f2(_char);
        }
      );
      var $elm$core$String$replace = F3(
        function(before, after, string) {
          return A2(
            $elm$core$String$join,
            after,
            A2($elm$core$String$split, before, string)
          );
        }
      );
      var $MaybeJustJames$yaml$Yaml$Parser$listInlineString = A2(
        $elm$parser$Parser$map,
        A2(
          $elm$core$Basics$composeL,
          $MaybeJustJames$yaml$Yaml$Parser$Ast$fromString,
          A2($elm$core$String$replace, "\\", "\\\\")
        ),
        $elm$parser$Parser$getChompedString(
          A2(
            $elm$parser$Parser$ignorer,
            $elm$parser$Parser$succeed(0),
            $elm$parser$Parser$chompWhile(
              A2($MaybeJustJames$yaml$Yaml$Parser$Util$neither, $MaybeJustJames$yaml$Yaml$Parser$Util$isComma, $MaybeJustJames$yaml$Yaml$Parser$Util$isListEnd)
            )
          )
        )
      );
      var $MaybeJustJames$yaml$Yaml$Parser$Util$characters = function(isOk) {
        var more = F2(
          function(chars, _char) {
            return $elm$parser$Parser$Loop(
              A2($elm$core$List$cons, _char, chars)
            );
          }
        );
        var done = function(chars) {
          return $elm$parser$Parser$Done(
            $elm$core$String$concat(
              $elm$core$List$reverse(chars)
            )
          );
        };
        var step = function(chars) {
          return $elm$parser$Parser$oneOf(
            _List_fromArray(
              [
                A2(
                  $elm$parser$Parser$ignorer,
                  $elm$parser$Parser$succeed(
                    done(chars)
                  ),
                  $MaybeJustJames$yaml$Yaml$Parser$Util$comment
                ),
                A2(
                  $elm$parser$Parser$map,
                  more(chars),
                  $elm$parser$Parser$getChompedString(
                    A2(
                      $elm$parser$Parser$ignorer,
                      $elm$parser$Parser$succeed(0),
                      $elm$parser$Parser$chompIf(isOk)
                    )
                  )
                ),
                $elm$parser$Parser$succeed(
                  done(chars)
                )
              ]
            )
          );
        };
        return A2($elm$parser$Parser$loop, _List_Nil, step);
      };
      var $MaybeJustJames$yaml$Yaml$Parser$Util$multilineStep = F2(
        function(indent, lines) {
          var multilineString = function(lines_) {
            return A2(
              $elm$core$String$join,
              " ",
              $elm$core$List$reverse(lines_)
            );
          };
          var conclusion = F2(
            function(line, indent_) {
              return _Utils_cmp(indent_, indent) > 0 ? $elm$parser$Parser$Loop(
                A2($elm$core$List$cons, line, lines)
              ) : $elm$parser$Parser$Done(
                multilineString(
                  A2($elm$core$List$cons, line, lines)
                )
              );
            }
          );
          return $elm$parser$Parser$oneOf(
            _List_fromArray(
              [
                A2(
                  $elm$parser$Parser$keeper,
                  A2(
                    $elm$parser$Parser$keeper,
                    $elm$parser$Parser$succeed(conclusion),
                    A2(
                      $elm$parser$Parser$ignorer,
                      A2(
                        $elm$parser$Parser$ignorer,
                        $MaybeJustJames$yaml$Yaml$Parser$Util$characters(
                          A2($elm$core$Basics$composeL, $elm$core$Basics$not, $MaybeJustJames$yaml$Yaml$Parser$Util$isNewLine)
                        ),
                        $elm$parser$Parser$chompIf($MaybeJustJames$yaml$Yaml$Parser$Util$isNewLine)
                      ),
                      $MaybeJustJames$yaml$Yaml$Parser$Util$spaces
                    )
                  ),
                  $elm$parser$Parser$getCol
                ),
                $elm$parser$Parser$succeed(
                  $elm$parser$Parser$Done(
                    multilineString(lines)
                  )
                )
              ]
            )
          );
        }
      );
      var $MaybeJustJames$yaml$Yaml$Parser$Util$multiline = function(indent) {
        return A2(
          $elm$parser$Parser$loop,
          _List_Nil,
          $MaybeJustJames$yaml$Yaml$Parser$Util$multilineStep(indent)
        );
      };
      var $elm$core$Tuple$pair = F2(
        function(a, b) {
          return _Utils_Tuple2(a, b);
        }
      );
      var $elm$core$String$contains = _String_contains;
      var $elm$regex$Regex$replace = _Regex_replaceAtMost(_Regex_infinity);
      var $MaybeJustJames$yaml$Yaml$Parser$Util$postProcessString = function(str) {
        var regexFromString = A2(
          $elm$core$Basics$composeR,
          $elm$regex$Regex$fromString,
          $elm$core$Maybe$withDefault($elm$regex$Regex$never)
        );
        return A3(
          $elm$regex$Regex$replace,
          regexFromString("\\s\\s+"),
          function(match) {
            return A2($elm$core$String$contains, "\n\n", match.dv) ? "\n" : " ";
          },
          str
        );
      };
      var $MaybeJustJames$yaml$Yaml$Parser$recordInlineOnDone = F2(
        function(elements, element) {
          return $elm$parser$Parser$Done(
            $elm$core$List$reverse(
              A2($elm$core$List$cons, element, elements)
            )
          );
        }
      );
      var $MaybeJustJames$yaml$Yaml$Parser$recordInlineOnMore = F2(
        function(elements, element) {
          return $elm$parser$Parser$Loop(
            A2($elm$core$List$cons, element, elements)
          );
        }
      );
      var $MaybeJustJames$yaml$Yaml$Parser$recordInlineNext = F2(
        function(elements, element) {
          return $elm$parser$Parser$oneOf(
            _List_fromArray(
              [
                A2(
                  $elm$parser$Parser$ignorer,
                  $elm$parser$Parser$succeed(
                    A2($MaybeJustJames$yaml$Yaml$Parser$recordInlineOnMore, elements, element)
                  ),
                  $elm$parser$Parser$chompIf($MaybeJustJames$yaml$Yaml$Parser$Util$isComma)
                ),
                A2(
                  $elm$parser$Parser$ignorer,
                  $elm$parser$Parser$succeed(
                    A2($MaybeJustJames$yaml$Yaml$Parser$recordInlineOnDone, elements, element)
                  ),
                  $elm$parser$Parser$chompIf($MaybeJustJames$yaml$Yaml$Parser$Util$isRecordEnd)
                )
              ]
            )
          );
        }
      );
      var $MaybeJustJames$yaml$Yaml$Parser$Util$neither3 = F4(
        function(f1, f2, f3, _char) {
          return !f1(_char) && (!f2(_char) && !f3(_char));
        }
      );
      var $MaybeJustJames$yaml$Yaml$Parser$recordInlinePropertyNameString = A2(
        $elm$parser$Parser$map,
        $elm$core$String$trim,
        $elm$parser$Parser$getChompedString(
          A2(
            $elm$parser$Parser$ignorer,
            A2(
              $elm$parser$Parser$ignorer,
              $elm$parser$Parser$succeed(0),
              $elm$parser$Parser$chompWhile(
                A3($MaybeJustJames$yaml$Yaml$Parser$Util$neither3, $MaybeJustJames$yaml$Yaml$Parser$Util$isColon, $MaybeJustJames$yaml$Yaml$Parser$Util$isComma, $MaybeJustJames$yaml$Yaml$Parser$Util$isRecordEnd)
              )
            ),
            $MaybeJustJames$yaml$Yaml$Parser$Util$whitespace
          )
        )
      );
      var $MaybeJustJames$yaml$Yaml$Parser$Util$isSingleQuote = $MaybeJustJames$yaml$Yaml$Parser$Util$is("'");
      var $MaybeJustJames$yaml$Yaml$Parser$Util$singleQuotes = A2(
        $elm$parser$Parser$keeper,
        A2(
          $elm$parser$Parser$ignorer,
          $elm$parser$Parser$succeed(
            A2($elm$core$String$replace, "\\", "\\\\")
          ),
          $elm$parser$Parser$symbol("'")
        ),
        A2(
          $elm$parser$Parser$ignorer,
          A2(
            $elm$parser$Parser$ignorer,
            $MaybeJustJames$yaml$Yaml$Parser$Util$characters_(
              A2($elm$core$Basics$composeL, $elm$core$Basics$not, $MaybeJustJames$yaml$Yaml$Parser$Util$isSingleQuote)
            ),
            $elm$parser$Parser$symbol("'")
          ),
          $MaybeJustJames$yaml$Yaml$Parser$Util$spaces
        )
      );
      var $MaybeJustJames$yaml$Yaml$Parser$recordInlinePropertyName = A2(
        $elm$parser$Parser$keeper,
        $elm$parser$Parser$succeed($elm$core$Basics$identity),
        A2(
          $elm$parser$Parser$ignorer,
          A2(
            $elm$parser$Parser$ignorer,
            A2(
              $elm$parser$Parser$ignorer,
              $elm$parser$Parser$oneOf(
                _List_fromArray(
                  [$MaybeJustJames$yaml$Yaml$Parser$Util$singleQuotes, $MaybeJustJames$yaml$Yaml$Parser$Util$doubleQuotes, $MaybeJustJames$yaml$Yaml$Parser$recordInlinePropertyNameString]
                )
              ),
              $elm$parser$Parser$chompWhile($MaybeJustJames$yaml$Yaml$Parser$Util$isSpace)
            ),
            $elm$parser$Parser$oneOf(
              _List_fromArray(
                [
                  $elm$parser$Parser$chompIf($MaybeJustJames$yaml$Yaml$Parser$Util$isColon),
                  $elm$parser$Parser$problem('I was parsing an inline record, when I ran into an invalid property. It is missing the ":"!')
                ]
              )
            )
          ),
          $elm$parser$Parser$oneOf(
            _List_fromArray(
              [
                $elm$parser$Parser$chompIf($MaybeJustJames$yaml$Yaml$Parser$Util$isNewLine),
                $elm$parser$Parser$chompIf($MaybeJustJames$yaml$Yaml$Parser$Util$isSpace),
                $elm$parser$Parser$problem('I was parsing an inline record, but missing a space or a new line between the ":" and the value!')
              ]
            )
          )
        )
      );
      var $MaybeJustJames$yaml$Yaml$Parser$recordInlineString = A2(
        $elm$parser$Parser$map,
        $MaybeJustJames$yaml$Yaml$Parser$Ast$fromString,
        $elm$parser$Parser$getChompedString(
          A2(
            $elm$parser$Parser$ignorer,
            $elm$parser$Parser$succeed(0),
            $elm$parser$Parser$chompWhile(
              A2($MaybeJustJames$yaml$Yaml$Parser$Util$neither, $MaybeJustJames$yaml$Yaml$Parser$Util$isComma, $MaybeJustJames$yaml$Yaml$Parser$Util$isRecordEnd)
            )
          )
        )
      );
      var $MaybeJustJames$yaml$Yaml$Parser$Ast$Alias_ = function(a) {
        return { $: 8, a };
      };
      var $MaybeJustJames$yaml$Yaml$Parser$reference = A2(
        $elm$parser$Parser$keeper,
        A2(
          $elm$parser$Parser$ignorer,
          $elm$parser$Parser$succeed($MaybeJustJames$yaml$Yaml$Parser$Ast$Alias_),
          $elm$parser$Parser$symbol("*")
        ),
        $MaybeJustJames$yaml$Yaml$Parser$refName
      );
      var $elm$parser$Parser$token = function(str) {
        return $elm$parser$Parser$Advanced$token(
          $elm$parser$Parser$toToken(str)
        );
      };
      var $MaybeJustJames$yaml$Yaml$Parser$list = function(indent) {
        var confirmed = function(value_) {
          return A2(
            $elm$parser$Parser$keeper,
            $elm$parser$Parser$succeed($MaybeJustJames$yaml$Yaml$Parser$Ast$List_),
            A2(
              $elm$parser$Parser$loop,
              _List_fromArray(
                [value_]
              ),
              $MaybeJustJames$yaml$Yaml$Parser$listStep(indent)
            )
          );
        };
        return A2(
          $elm$parser$Parser$andThen,
          confirmed,
          $MaybeJustJames$yaml$Yaml$Parser$listElement(indent)
        );
      };
      var $MaybeJustJames$yaml$Yaml$Parser$listElement = function(indent) {
        return A2(
          $elm$parser$Parser$keeper,
          A2(
            $elm$parser$Parser$ignorer,
            $elm$parser$Parser$succeed($elm$core$Basics$identity),
            $MaybeJustJames$yaml$Yaml$Parser$listElementBegin
          ),
          $MaybeJustJames$yaml$Yaml$Parser$listElementValue(indent)
        );
      };
      var $MaybeJustJames$yaml$Yaml$Parser$listElementValue = function(indent) {
        var elVal = function(indent_) {
          return $elm$parser$Parser$oneOf(
            _List_fromArray(
              [
                $MaybeJustJames$yaml$Yaml$Parser$cyclic$listInline(),
                $MaybeJustJames$yaml$Yaml$Parser$cyclic$recordInline(),
                $MaybeJustJames$yaml$Yaml$Parser$list(indent_),
                A2($MaybeJustJames$yaml$Yaml$Parser$recordOrString, indent, indent_)
              ]
            )
          );
        };
        return A2(
          $MaybeJustJames$yaml$Yaml$Parser$Util$indented,
          indent,
          {
            at: $elm$parser$Parser$succeed($MaybeJustJames$yaml$Yaml$Parser$Ast$Null_),
            au: $elm$parser$Parser$succeed($MaybeJustJames$yaml$Yaml$Parser$Ast$Null_),
            az: function(indent_) {
              return $elm$parser$Parser$oneOf(
                _List_fromArray(
                  [
                    $MaybeJustJames$yaml$Yaml$Parser$anchor(elVal),
                    $MaybeJustJames$yaml$Yaml$Parser$reference,
                    elVal(indent_)
                  ]
                )
              );
            },
            aK: $elm$parser$Parser$succeed($MaybeJustJames$yaml$Yaml$Parser$Ast$Null_)
          }
        );
      };
      var $MaybeJustJames$yaml$Yaml$Parser$listInlineStep = function(elements) {
        return A2(
          $elm$parser$Parser$andThen,
          $MaybeJustJames$yaml$Yaml$Parser$listInlineNext(elements),
          A2(
            $elm$parser$Parser$keeper,
            A2(
              $elm$parser$Parser$ignorer,
              $elm$parser$Parser$succeed($elm$core$Basics$identity),
              $MaybeJustJames$yaml$Yaml$Parser$Util$whitespace
            ),
            A2(
              $elm$parser$Parser$ignorer,
              $MaybeJustJames$yaml$Yaml$Parser$cyclic$listInlineValue(),
              $MaybeJustJames$yaml$Yaml$Parser$Util$whitespace
            )
          )
        );
      };
      var $MaybeJustJames$yaml$Yaml$Parser$listStep = F2(
        function(indent, values) {
          var next = function(value_) {
            return $elm$parser$Parser$Loop(
              A2($elm$core$List$cons, value_, values)
            );
          };
          var finish = $elm$parser$Parser$Done(
            $elm$core$List$reverse(values)
          );
          return A2(
            $MaybeJustJames$yaml$Yaml$Parser$Util$indented,
            indent,
            {
              at: $elm$parser$Parser$succeed(finish),
              au: $elm$parser$Parser$oneOf(
                _List_fromArray(
                  [
                    A2(
                      $elm$parser$Parser$keeper,
                      $elm$parser$Parser$succeed(next),
                      $MaybeJustJames$yaml$Yaml$Parser$listElement(indent)
                    ),
                    $elm$parser$Parser$succeed(finish)
                  ]
                )
              ),
              az: function(_v1) {
                return $elm$parser$Parser$problem("I was looking for the next element but didn't find one.");
              },
              aK: $elm$parser$Parser$succeed(finish)
            }
          );
        }
      );
      var $MaybeJustJames$yaml$Yaml$Parser$quotedString = function(indent) {
        var withQuote = function(quote) {
          return $elm$parser$Parser$oneOf(
            _List_fromArray(
              [
                A2($MaybeJustJames$yaml$Yaml$Parser$recordProperty, indent, quote),
                $elm$parser$Parser$succeed(
                  $MaybeJustJames$yaml$Yaml$Parser$Ast$String_(
                    $MaybeJustJames$yaml$Yaml$Parser$Util$postProcessString(quote)
                  )
                )
              ]
            )
          );
        };
        return A2(
          $elm$parser$Parser$andThen,
          withQuote,
          A2(
            $elm$parser$Parser$keeper,
            $elm$parser$Parser$succeed($elm$core$Basics$identity),
            A2(
              $elm$parser$Parser$ignorer,
              $elm$parser$Parser$oneOf(
                _List_fromArray(
                  [$MaybeJustJames$yaml$Yaml$Parser$Util$singleQuotes, $MaybeJustJames$yaml$Yaml$Parser$Util$doubleQuotes]
                )
              ),
              $MaybeJustJames$yaml$Yaml$Parser$Util$spaces
            )
          )
        );
      };
      var $MaybeJustJames$yaml$Yaml$Parser$record = F2(
        function(indent, property) {
          var confirmed = function(value_) {
            return A2(
              $elm$parser$Parser$map,
              A2($elm$core$Basics$composeL, $MaybeJustJames$yaml$Yaml$Parser$Ast$Record_, $elm$core$Dict$fromList),
              A2(
                $elm$parser$Parser$andThen,
                $MaybeJustJames$yaml$Yaml$Parser$duplicatedPropertyKeysCheck,
                A2(
                  $elm$parser$Parser$keeper,
                  $elm$parser$Parser$succeed($elm$core$Basics$identity),
                  A2(
                    $elm$parser$Parser$loop,
                    _List_fromArray(
                      [
                        _Utils_Tuple2(property, value_)
                      ]
                    ),
                    $MaybeJustJames$yaml$Yaml$Parser$recordStep(indent)
                  )
                )
              )
            );
          };
          return A2(
            $elm$parser$Parser$andThen,
            confirmed,
            $MaybeJustJames$yaml$Yaml$Parser$recordElementValue(indent)
          );
        }
      );
      var $MaybeJustJames$yaml$Yaml$Parser$recordElement = function(indent) {
        var property = $elm$parser$Parser$oneOf(
          _List_fromArray(
            [
              $MaybeJustJames$yaml$Yaml$Parser$Util$singleQuotes,
              $MaybeJustJames$yaml$Yaml$Parser$Util$doubleQuotes,
              $elm$parser$Parser$getChompedString(
                $elm$parser$Parser$chompWhile(
                  A2($MaybeJustJames$yaml$Yaml$Parser$Util$neither, $MaybeJustJames$yaml$Yaml$Parser$Util$isColon, $MaybeJustJames$yaml$Yaml$Parser$Util$isNewLine)
                )
              )
            ]
          )
        );
        return A2(
          $elm$parser$Parser$keeper,
          A2(
            $elm$parser$Parser$keeper,
            $elm$parser$Parser$succeed($elm$core$Tuple$pair),
            A2(
              $elm$parser$Parser$ignorer,
              A2($elm$parser$Parser$ignorer, property, $MaybeJustJames$yaml$Yaml$Parser$Util$spaces),
              $elm$parser$Parser$chompIf($MaybeJustJames$yaml$Yaml$Parser$Util$isColon)
            )
          ),
          $MaybeJustJames$yaml$Yaml$Parser$recordElementValue(indent)
        );
      };
      var $MaybeJustJames$yaml$Yaml$Parser$recordElementValue = function(indent) {
        var elVal = function(indent_) {
          return $elm$parser$Parser$oneOf(
            _List_fromArray(
              [
                $MaybeJustJames$yaml$Yaml$Parser$cyclic$listInline(),
                $MaybeJustJames$yaml$Yaml$Parser$cyclic$recordInline(),
                $MaybeJustJames$yaml$Yaml$Parser$list(indent_),
                A2($MaybeJustJames$yaml$Yaml$Parser$recordOrString, indent, indent_)
              ]
            )
          );
        };
        return A2(
          $MaybeJustJames$yaml$Yaml$Parser$Util$indented,
          indent,
          {
            at: $elm$parser$Parser$succeed($MaybeJustJames$yaml$Yaml$Parser$Ast$Null_),
            au: $elm$parser$Parser$oneOf(
              _List_fromArray(
                [
                  $MaybeJustJames$yaml$Yaml$Parser$list(indent),
                  $elm$parser$Parser$succeed($MaybeJustJames$yaml$Yaml$Parser$Ast$Null_)
                ]
              )
            ),
            az: function(indent_) {
              return $elm$parser$Parser$oneOf(
                _List_fromArray(
                  [
                    $MaybeJustJames$yaml$Yaml$Parser$anchor(elVal),
                    $MaybeJustJames$yaml$Yaml$Parser$reference,
                    elVal(indent_)
                  ]
                )
              );
            },
            aK: $elm$parser$Parser$succeed($MaybeJustJames$yaml$Yaml$Parser$Ast$Null_)
          }
        );
      };
      var $MaybeJustJames$yaml$Yaml$Parser$recordInlineStep = function(elements) {
        return A2(
          $elm$parser$Parser$andThen,
          $MaybeJustJames$yaml$Yaml$Parser$recordInlineNext(elements),
          A2(
            $elm$parser$Parser$keeper,
            A2(
              $elm$parser$Parser$ignorer,
              $elm$parser$Parser$succeed($elm$core$Basics$identity),
              $MaybeJustJames$yaml$Yaml$Parser$Util$whitespace
            ),
            A2(
              $elm$parser$Parser$ignorer,
              $MaybeJustJames$yaml$Yaml$Parser$cyclic$recordInlineValue(),
              $MaybeJustJames$yaml$Yaml$Parser$Util$whitespace
            )
          )
        );
      };
      var $MaybeJustJames$yaml$Yaml$Parser$recordOrString = F2(
        function(indent, indent_) {
          var removeComment = function(string) {
            return A2(
              $elm$core$Maybe$withDefault,
              "",
              $elm$core$List$head(
                A2($elm$core$String$split, "#", string)
              )
            );
          };
          var addRemaining = F2(
            function(string, remaining) {
              return $MaybeJustJames$yaml$Yaml$Parser$Ast$fromString(
                $MaybeJustJames$yaml$Yaml$Parser$Util$postProcessString(
                  _Utils_ap(
                    removeComment(string),
                    remaining
                  )
                )
              );
            }
          );
          var withString = function(string) {
            return $elm$parser$Parser$oneOf(
              _List_fromArray(
                [
                  A2(
                    $elm$parser$Parser$ignorer,
                    $elm$parser$Parser$succeed(
                      $MaybeJustJames$yaml$Yaml$Parser$Ast$fromString(string)
                    ),
                    $elm$parser$Parser$end
                  ),
                  A2($MaybeJustJames$yaml$Yaml$Parser$recordProperty, indent_, string),
                  A2(
                    $elm$parser$Parser$keeper,
                    $elm$parser$Parser$succeed(
                      addRemaining(string)
                    ),
                    !indent ? $MaybeJustJames$yaml$Yaml$Parser$Util$remaining : $MaybeJustJames$yaml$Yaml$Parser$Util$multiline(indent)
                  )
                ]
              )
            );
          };
          return $elm$parser$Parser$oneOf(
            _List_fromArray(
              [
                $MaybeJustJames$yaml$Yaml$Parser$quotedString(indent_),
                A2(
                  $elm$parser$Parser$andThen,
                  withString,
                  $elm$parser$Parser$getChompedString(
                    A2(
                      $elm$parser$Parser$ignorer,
                      A2(
                        $elm$parser$Parser$ignorer,
                        $elm$parser$Parser$succeed($elm$core$Basics$identity),
                        $elm$parser$Parser$chompIf(
                          A2($MaybeJustJames$yaml$Yaml$Parser$Util$neither, $MaybeJustJames$yaml$Yaml$Parser$Util$isColon, $MaybeJustJames$yaml$Yaml$Parser$Util$isNewLine)
                        )
                      ),
                      $elm$parser$Parser$chompWhile(
                        A2($MaybeJustJames$yaml$Yaml$Parser$Util$neither, $MaybeJustJames$yaml$Yaml$Parser$Util$isColon, $MaybeJustJames$yaml$Yaml$Parser$Util$isNewLine)
                      )
                    )
                  )
                ),
                A2(
                  $elm$parser$Parser$andThen,
                  withString,
                  $elm$parser$Parser$getChompedString(
                    A2(
                      $elm$parser$Parser$ignorer,
                      $elm$parser$Parser$succeed($elm$core$Basics$identity),
                      $elm$parser$Parser$chompWhile($MaybeJustJames$yaml$Yaml$Parser$Util$isColon)
                    )
                  )
                )
              ]
            )
          );
        }
      );
      var $MaybeJustJames$yaml$Yaml$Parser$recordProperty = F2(
        function(indent, name) {
          return A2(
            $elm$parser$Parser$andThen,
            $elm$core$Basics$identity,
            A2(
              $elm$parser$Parser$ignorer,
              $elm$parser$Parser$succeed(
                A2($MaybeJustJames$yaml$Yaml$Parser$record, indent, name)
              ),
              $elm$parser$Parser$oneOf(
                _List_fromArray(
                  [
                    $elm$parser$Parser$token(": "),
                    $elm$parser$Parser$token(":\n"),
                    A2(
                      $elm$parser$Parser$ignorer,
                      $elm$parser$Parser$backtrackable(
                        $elm$parser$Parser$token(":")
                      ),
                      $elm$parser$Parser$end
                    )
                  ]
                )
              )
            )
          );
        }
      );
      var $MaybeJustJames$yaml$Yaml$Parser$recordStep = F2(
        function(indent, values) {
          var next = function(value_) {
            return $elm$parser$Parser$Loop(
              A2($elm$core$List$cons, value_, values)
            );
          };
          var finish = $elm$parser$Parser$Done(
            $elm$core$List$reverse(values)
          );
          return A2(
            $MaybeJustJames$yaml$Yaml$Parser$Util$indented,
            indent,
            {
              at: $elm$parser$Parser$succeed(finish),
              au: A2(
                $elm$parser$Parser$keeper,
                $elm$parser$Parser$succeed(next),
                $MaybeJustJames$yaml$Yaml$Parser$recordElement(indent)
              ),
              az: function(_v0) {
                return $elm$parser$Parser$problem("I was looking for the next property but didn't find one.");
              },
              aK: $elm$parser$Parser$succeed(finish)
            }
          );
        }
      );
      function $MaybeJustJames$yaml$Yaml$Parser$cyclic$recordInlineValue() {
        return A2(
          $elm$parser$Parser$keeper,
          A2(
            $elm$parser$Parser$keeper,
            $elm$parser$Parser$succeed($elm$core$Tuple$pair),
            A2($elm$parser$Parser$ignorer, $MaybeJustJames$yaml$Yaml$Parser$recordInlinePropertyName, $MaybeJustJames$yaml$Yaml$Parser$Util$whitespace)
          ),
          $MaybeJustJames$yaml$Yaml$Parser$cyclic$recordInlinePropertyValue()
        );
      }
      function $MaybeJustJames$yaml$Yaml$Parser$cyclic$recordInlinePropertyValue() {
        var propVal = $elm$parser$Parser$oneOf(
          _List_fromArray(
            [
              $MaybeJustJames$yaml$Yaml$Parser$cyclic$listInline(),
              $MaybeJustJames$yaml$Yaml$Parser$cyclic$recordInline(),
              $MaybeJustJames$yaml$Yaml$Parser$recordInlineString
            ]
          )
        );
        return $elm$parser$Parser$oneOf(
          _List_fromArray(
            [
              $MaybeJustJames$yaml$Yaml$Parser$anchor(
                $elm$core$Basics$always(propVal)
              ),
              $MaybeJustJames$yaml$Yaml$Parser$reference,
              propVal
            ]
          )
        );
      }
      function $MaybeJustJames$yaml$Yaml$Parser$cyclic$listInlineValue() {
        var inlineVal = $elm$parser$Parser$oneOf(
          _List_fromArray(
            [
              $MaybeJustJames$yaml$Yaml$Parser$cyclic$listInline(),
              $MaybeJustJames$yaml$Yaml$Parser$cyclic$recordInline(),
              $MaybeJustJames$yaml$Yaml$Parser$quotedString(0),
              $MaybeJustJames$yaml$Yaml$Parser$listInlineString
            ]
          )
        );
        return $elm$parser$Parser$oneOf(
          _List_fromArray(
            [
              $MaybeJustJames$yaml$Yaml$Parser$anchor(
                $elm$core$Basics$always(inlineVal)
              ),
              $MaybeJustJames$yaml$Yaml$Parser$reference,
              inlineVal
            ]
          )
        );
      }
      function $MaybeJustJames$yaml$Yaml$Parser$cyclic$listInline() {
        return A2(
          $elm$parser$Parser$keeper,
          A2(
            $elm$parser$Parser$ignorer,
            A2(
              $elm$parser$Parser$ignorer,
              $elm$parser$Parser$succeed($MaybeJustJames$yaml$Yaml$Parser$Ast$List_),
              $elm$parser$Parser$chompIf($MaybeJustJames$yaml$Yaml$Parser$Util$isListStart)
            ),
            $MaybeJustJames$yaml$Yaml$Parser$Util$whitespace
          ),
          $MaybeJustJames$yaml$Yaml$Parser$cyclic$listInlineStepOne()
        );
      }
      function $MaybeJustJames$yaml$Yaml$Parser$cyclic$listInlineStepOne() {
        return $elm$parser$Parser$oneOf(
          _List_fromArray(
            [
              A2(
                $elm$parser$Parser$ignorer,
                $elm$parser$Parser$succeed(_List_Nil),
                $elm$parser$Parser$chompIf($MaybeJustJames$yaml$Yaml$Parser$Util$isListEnd)
              ),
              A2(
                $elm$parser$Parser$keeper,
                $elm$parser$Parser$succeed($elm$core$Basics$identity),
                A2($elm$parser$Parser$loop, _List_Nil, $MaybeJustJames$yaml$Yaml$Parser$listInlineStep)
              )
            ]
          )
        );
      }
      function $MaybeJustJames$yaml$Yaml$Parser$cyclic$recordInline() {
        return A2(
          $elm$parser$Parser$keeper,
          A2(
            $elm$parser$Parser$ignorer,
            A2(
              $elm$parser$Parser$ignorer,
              $elm$parser$Parser$succeed(
                A2($elm$core$Basics$composeL, $MaybeJustJames$yaml$Yaml$Parser$Ast$Record_, $elm$core$Dict$fromList)
              ),
              $elm$parser$Parser$chompIf($MaybeJustJames$yaml$Yaml$Parser$Util$isRecordStart)
            ),
            $MaybeJustJames$yaml$Yaml$Parser$Util$whitespace
          ),
          $MaybeJustJames$yaml$Yaml$Parser$cyclic$recordInlineStepOne()
        );
      }
      function $MaybeJustJames$yaml$Yaml$Parser$cyclic$recordInlineStepOne() {
        return A2(
          $elm$parser$Parser$andThen,
          $MaybeJustJames$yaml$Yaml$Parser$duplicatedPropertyKeysCheck,
          $elm$parser$Parser$oneOf(
            _List_fromArray(
              [
                A2(
                  $elm$parser$Parser$ignorer,
                  $elm$parser$Parser$succeed(_List_Nil),
                  $elm$parser$Parser$chompIf($MaybeJustJames$yaml$Yaml$Parser$Util$isRecordEnd)
                ),
                A2(
                  $elm$parser$Parser$keeper,
                  $elm$parser$Parser$succeed($elm$core$Basics$identity),
                  A2($elm$parser$Parser$loop, _List_Nil, $MaybeJustJames$yaml$Yaml$Parser$recordInlineStep)
                )
              ]
            )
          )
        );
      }
      var $MaybeJustJames$yaml$Yaml$Parser$recordInlineValue = $MaybeJustJames$yaml$Yaml$Parser$cyclic$recordInlineValue();
      $MaybeJustJames$yaml$Yaml$Parser$cyclic$recordInlineValue = function() {
        return $MaybeJustJames$yaml$Yaml$Parser$recordInlineValue;
      };
      var $MaybeJustJames$yaml$Yaml$Parser$recordInlinePropertyValue = $MaybeJustJames$yaml$Yaml$Parser$cyclic$recordInlinePropertyValue();
      $MaybeJustJames$yaml$Yaml$Parser$cyclic$recordInlinePropertyValue = function() {
        return $MaybeJustJames$yaml$Yaml$Parser$recordInlinePropertyValue;
      };
      var $MaybeJustJames$yaml$Yaml$Parser$listInlineValue = $MaybeJustJames$yaml$Yaml$Parser$cyclic$listInlineValue();
      $MaybeJustJames$yaml$Yaml$Parser$cyclic$listInlineValue = function() {
        return $MaybeJustJames$yaml$Yaml$Parser$listInlineValue;
      };
      var $MaybeJustJames$yaml$Yaml$Parser$listInline = $MaybeJustJames$yaml$Yaml$Parser$cyclic$listInline();
      $MaybeJustJames$yaml$Yaml$Parser$cyclic$listInline = function() {
        return $MaybeJustJames$yaml$Yaml$Parser$listInline;
      };
      var $MaybeJustJames$yaml$Yaml$Parser$listInlineStepOne = $MaybeJustJames$yaml$Yaml$Parser$cyclic$listInlineStepOne();
      $MaybeJustJames$yaml$Yaml$Parser$cyclic$listInlineStepOne = function() {
        return $MaybeJustJames$yaml$Yaml$Parser$listInlineStepOne;
      };
      var $MaybeJustJames$yaml$Yaml$Parser$recordInline = $MaybeJustJames$yaml$Yaml$Parser$cyclic$recordInline();
      $MaybeJustJames$yaml$Yaml$Parser$cyclic$recordInline = function() {
        return $MaybeJustJames$yaml$Yaml$Parser$recordInline;
      };
      var $MaybeJustJames$yaml$Yaml$Parser$recordInlineStepOne = $MaybeJustJames$yaml$Yaml$Parser$cyclic$recordInlineStepOne();
      $MaybeJustJames$yaml$Yaml$Parser$cyclic$recordInlineStepOne = function() {
        return $MaybeJustJames$yaml$Yaml$Parser$recordInlineStepOne;
      };
      var $MaybeJustJames$yaml$Yaml$Parser$value = $elm$parser$Parser$oneOf(
        _List_fromArray(
          [
            $MaybeJustJames$yaml$Yaml$Parser$String$exceptions,
            $MaybeJustJames$yaml$Yaml$Parser$recordInline,
            $MaybeJustJames$yaml$Yaml$Parser$listInline,
            A2($elm$parser$Parser$andThen, $MaybeJustJames$yaml$Yaml$Parser$list, $elm$parser$Parser$getCol),
            A2(
              $elm$parser$Parser$andThen,
              $MaybeJustJames$yaml$Yaml$Parser$recordOrString(0),
              $elm$parser$Parser$getCol
            )
          ]
        )
      );
      var $MaybeJustJames$yaml$Yaml$Parser$parser = A2(
        $elm$parser$Parser$keeper,
        A2(
          $elm$parser$Parser$ignorer,
          A2(
            $elm$parser$Parser$ignorer,
            $elm$parser$Parser$succeed($elm$core$Basics$identity),
            $MaybeJustJames$yaml$Yaml$Parser$Document$begins
          ),
          $MaybeJustJames$yaml$Yaml$Parser$Util$whitespace
        ),
        A2($elm$parser$Parser$ignorer, $MaybeJustJames$yaml$Yaml$Parser$value, $MaybeJustJames$yaml$Yaml$Parser$Document$ends)
      );
      var $elm$parser$Parser$DeadEnd = F3(
        function(row, col, problem) {
          return { A: col, dG: problem, dL: row };
        }
      );
      var $elm$parser$Parser$problemToDeadEnd = function(p) {
        return A3($elm$parser$Parser$DeadEnd, p.dL, p.A, p.dG);
      };
      var $elm$parser$Parser$Advanced$bagToList = F2(
        function(bag, list) {
          bagToList:
            while (true) {
              switch (bag.$) {
                case 0:
                  return list;
                case 1:
                  var bag1 = bag.a;
                  var x = bag.b;
                  var $temp$bag = bag1, $temp$list = A2($elm$core$List$cons, x, list);
                  bag = $temp$bag;
                  list = $temp$list;
                  continue bagToList;
                default:
                  var bag1 = bag.a;
                  var bag2 = bag.b;
                  var $temp$bag = bag1, $temp$list = A2($elm$parser$Parser$Advanced$bagToList, bag2, list);
                  bag = $temp$bag;
                  list = $temp$list;
                  continue bagToList;
              }
            }
        }
      );
      var $elm$parser$Parser$Advanced$run = F2(
        function(_v0, src) {
          var parse = _v0;
          var _v1 = parse(
            { A: 1, c: _List_Nil, B: 1, b6: 0, dL: 1, a: src }
          );
          if (!_v1.$) {
            var value = _v1.b;
            return $elm$core$Result$Ok(value);
          } else {
            var bag = _v1.b;
            return $elm$core$Result$Err(
              A2($elm$parser$Parser$Advanced$bagToList, bag, _List_Nil)
            );
          }
        }
      );
      var $elm$parser$Parser$run = F2(
        function(parser, source) {
          var _v0 = A2($elm$parser$Parser$Advanced$run, parser, source);
          if (!_v0.$) {
            var a = _v0.a;
            return $elm$core$Result$Ok(a);
          } else {
            var problems = _v0.a;
            return $elm$core$Result$Err(
              A2($elm$core$List$map, $elm$parser$Parser$problemToDeadEnd, problems)
            );
          }
        }
      );
      var $MaybeJustJames$yaml$Yaml$Parser$fromString = A2(
        $elm$core$Basics$composeR,
        $elm$parser$Parser$run($MaybeJustJames$yaml$Yaml$Parser$parser),
        A2(
          $elm$core$Basics$composeR,
          $elm$core$Result$mapError($MaybeJustJames$yaml$Yaml$Parser$deadEndsToString),
          $elm$core$Result$map($MaybeJustJames$yaml$Yaml$Parser$deref)
        )
      );
      var $MaybeJustJames$yaml$Yaml$Decode$fromString = F2(
        function(decoder, raw) {
          var _v0 = $MaybeJustJames$yaml$Yaml$Parser$fromString(raw);
          if (!_v0.$) {
            var v = _v0.a;
            return A2($MaybeJustJames$yaml$Yaml$Decode$fromValue, decoder, v);
          } else {
            var error = _v0.a;
            return $elm$core$Result$Err(
              $MaybeJustJames$yaml$Yaml$Decode$Parsing(error)
            );
          }
        }
      );
      var $elm$core$Task$Perform = $elm$core$Basics$identity;
      var $elm$core$Task$succeed = _Scheduler_succeed;
      var $elm$core$Task$init = $elm$core$Task$succeed(0);
      var $elm$core$Task$andThen = _Scheduler_andThen;
      var $elm$core$Task$map = F2(
        function(func, taskA) {
          return A2(
            $elm$core$Task$andThen,
            function(a) {
              return $elm$core$Task$succeed(
                func(a)
              );
            },
            taskA
          );
        }
      );
      var $elm$core$Task$map2 = F3(
        function(func, taskA, taskB) {
          return A2(
            $elm$core$Task$andThen,
            function(a) {
              return A2(
                $elm$core$Task$andThen,
                function(b) {
                  return $elm$core$Task$succeed(
                    A2(func, a, b)
                  );
                },
                taskB
              );
            },
            taskA
          );
        }
      );
      var $elm$core$Task$sequence = function(tasks) {
        return A3(
          $elm$core$List$foldr,
          $elm$core$Task$map2($elm$core$List$cons),
          $elm$core$Task$succeed(_List_Nil),
          tasks
        );
      };
      var $elm$core$Platform$sendToApp = _Platform_sendToApp;
      var $elm$core$Task$spawnCmd = F2(
        function(router, _v0) {
          var task = _v0;
          return _Scheduler_spawn(
            A2(
              $elm$core$Task$andThen,
              $elm$core$Platform$sendToApp(router),
              task
            )
          );
        }
      );
      var $elm$core$Task$onEffects = F3(
        function(router, commands, state) {
          return A2(
            $elm$core$Task$map,
            function(_v0) {
              return 0;
            },
            $elm$core$Task$sequence(
              A2(
                $elm$core$List$map,
                $elm$core$Task$spawnCmd(router),
                commands
              )
            )
          );
        }
      );
      var $elm$core$Task$onSelfMsg = F3(
        function(_v0, _v1, _v2) {
          return $elm$core$Task$succeed(0);
        }
      );
      var $elm$core$Task$cmdMap = F2(
        function(tagger, _v0) {
          var task = _v0;
          return A2($elm$core$Task$map, tagger, task);
        }
      );
      _Platform_effectManagers["Task"] = _Platform_createManager($elm$core$Task$init, $elm$core$Task$onEffects, $elm$core$Task$onSelfMsg, $elm$core$Task$cmdMap);
      var $elm$core$Task$command = _Platform_leaf("Task");
      var $elm$core$Task$perform = F2(
        function(toMessage, task) {
          return $elm$core$Task$command(
            A2($elm$core$Task$map, toMessage, task)
          );
        }
      );
      var $author$project$Custom$Command$Apps$Pull$AppModule = F6(
        function(name, label, description, typeId, connection, webhook) {
          return { bp: connection, bv: description, bU: label, b3: name, cN: typeId, cT: webhook };
        }
      );
      var $author$project$Instruction$Sequence = function(a) {
        return { $: 1, a };
      };
      var $author$project$Output$getContent = function(output) {
        switch (output.$) {
          case 0:
            var content = output.a;
            return content;
          case 1:
            var content = output.a;
            return content;
          default:
            var content = output.b;
            return content;
        }
      };
      var $author$project$Instruction$mapLast = F2(
        function(fn, list) {
          if (!list.b) {
            return list;
          } else {
            if (!list.b.b) {
              var x = list.a;
              return _List_fromArray(
                [
                  fn(x)
                ]
              );
            } else {
              var head = list.a;
              var tail = list.b;
              return A2(
                $elm$core$List$cons,
                head,
                A2($author$project$Instruction$mapLast, fn, tail)
              );
            }
          }
        }
      );
      var $author$project$Instruction$andThen = F2(
        function(callback, _v0) {
          var task = _v0;
          return A2(
            $elm$core$Task$andThen,
            function(a) {
              switch (a.$) {
                case 0:
                  var content = a.a;
                  var _v2 = callback(content);
                  var t = _v2;
                  return t;
                case 1:
                  var instructions = a.a;
                  return $elm$core$Task$succeed(
                    $author$project$Instruction$Sequence(
                      A2(
                        $author$project$Instruction$mapLast,
                        $author$project$Instruction$andThen(callback),
                        instructions
                      )
                    )
                  );
                default:
                  var output = a.a;
                  var _v3 = callback(
                    $author$project$Output$getContent(output)
                  );
                  var t = _v3;
                  return t;
              }
            },
            task
          );
        }
      );
      var $author$project$Api$Response$body = function(_v0) {
        var body_ = _v0.b;
        return body_;
      };
      var $elm$json$Json$Decode$decodeValue = _Json_run;
      var $author$project$Api$Body$decode = F2(
        function(decoder, body) {
          if (body.$ === 3) {
            var jsonValue = body.a;
            return A2(
              $elm$core$Result$mapError,
              $elm$json$Json$Decode$errorToString,
              A2($elm$json$Json$Decode$decodeValue, decoder, jsonValue)
            );
          } else {
            return $elm$core$Result$Err("No JSON body");
          }
        }
      );
      var $author$project$Instruction$decodeInput = F2(
        function(decoder, content) {
          switch (content.$) {
            case 0:
              var response = content.a;
              return A2(
                $author$project$Api$Body$decode,
                decoder,
                $author$project$Api$Response$body(response)
              );
            case 1:
              var body = content.a;
              return A2($author$project$Api$Body$decode, decoder, body);
            case 2:
              return $elm$core$Result$Err("Can't decode Log message");
            default:
              var value = content.a;
              return A2(
                $elm$core$Result$mapError,
                $elm$json$Json$Decode$errorToString,
                A2($elm$json$Json$Decode$decodeValue, decoder, value)
              );
          }
        }
      );
      var $author$project$Instruction$sequence = function(instructions) {
        return $elm$core$Task$succeed(
          $author$project$Instruction$Sequence(instructions)
        );
      };
      var $author$project$Instruction$forEach = F2(
        function(fn, res) {
          if (res.$ === 1) {
            var e = res.a;
            return $author$project$Instruction$fail(e);
          } else {
            var items = res.a;
            return $author$project$Instruction$sequence(
              A2($elm$core$List$map, fn, items)
            );
          }
        }
      );
      var $elm$json$Json$Decode$int = _Json_decodeInt;
      var $author$project$Instruction$Output = function(a) {
        return { $: 2, a };
      };
      var $author$project$Content$LogMessage = function(a) {
        return { $: 2, a };
      };
      var $author$project$Content$fromString = $author$project$Content$LogMessage;
      var $author$project$Output$string = $author$project$Content$fromString;
      var $author$project$Output$Stderr = function(a) {
        return { $: 1, a };
      };
      var $author$project$Output$toStderr = function(content) {
        return $elm$core$Task$succeed(
          $author$project$Output$Stderr(content)
        );
      };
      var $author$project$Instruction$log = function(message) {
        return A2(
          $elm$core$Task$map,
          $author$project$Instruction$Output,
          $author$project$Output$toStderr(
            $author$project$Output$string(message)
          )
        );
      };
      var $elm$json$Json$Encode$null = _Json_encodeNull;
      var $elm$json$Json$Decode$nullable = function(decoder) {
        return $elm$json$Json$Decode$oneOf(
          _List_fromArray(
            [
              $elm$json$Json$Decode$null($elm$core$Maybe$Nothing),
              A2($elm$json$Json$Decode$map, $elm$core$Maybe$Just, decoder)
            ]
          )
        );
      };
      var $elm$json$Json$Decode$map2 = _Json_map2;
      var $NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$custom = $elm$json$Json$Decode$map2($elm$core$Basics$apR);
      var $elm$json$Json$Decode$at = F2(
        function(fields, decoder) {
          return A3($elm$core$List$foldr, $elm$json$Json$Decode$field, decoder, fields);
        }
      );
      var $elm$json$Json$Decode$succeed = _Json_succeed;
      var $elm$json$Json$Decode$value = _Json_decodeValue;
      var $NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$optionalDecoder = F3(
        function(path2, valDecoder, fallback) {
          var nullOr = function(decoder) {
            return $elm$json$Json$Decode$oneOf(
              _List_fromArray(
                [
                  decoder,
                  $elm$json$Json$Decode$null(fallback)
                ]
              )
            );
          };
          var handleResult = function(input) {
            var _v0 = A2(
              $elm$json$Json$Decode$decodeValue,
              A2($elm$json$Json$Decode$at, path2, $elm$json$Json$Decode$value),
              input
            );
            if (!_v0.$) {
              var rawValue = _v0.a;
              var _v1 = A2(
                $elm$json$Json$Decode$decodeValue,
                nullOr(valDecoder),
                rawValue
              );
              if (!_v1.$) {
                var finalResult = _v1.a;
                return $elm$json$Json$Decode$succeed(finalResult);
              } else {
                return A2(
                  $elm$json$Json$Decode$at,
                  path2,
                  nullOr(valDecoder)
                );
              }
            } else {
              return $elm$json$Json$Decode$succeed(fallback);
            }
          };
          return A2($elm$json$Json$Decode$andThen, handleResult, $elm$json$Json$Decode$value);
        }
      );
      var $NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$optional = F4(
        function(key, valDecoder, fallback, decoder) {
          return A2(
            $NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$custom,
            A3(
              $NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$optionalDecoder,
              _List_fromArray(
                [key]
              ),
              valDecoder,
              fallback
            ),
            decoder
          );
        }
      );
      var $author$project$Api$Body$Empty = { $: 6 };
      var $author$project$Api$Body$empty = $author$project$Api$Body$Empty;
      var $elm$http$Http$Header = F2(
        function(a, b) {
          return { $: 0, a, b };
        }
      );
      var $elm$http$Http$header = $elm$http$Http$Header;
      var $author$project$Token$authorizationHeader = function(_v0) {
        var token = _v0;
        return A2($elm$http$Http$header, "Authorization", "Token " + token);
      };
      var $elm$http$Http$BadStatus_ = F2(
        function(a, b) {
          return { $: 3, a, b };
        }
      );
      var $elm$http$Http$BadUrl_ = function(a) {
        return { $: 0, a };
      };
      var $elm$http$Http$GoodStatus_ = F2(
        function(a, b) {
          return { $: 4, a, b };
        }
      );
      var $elm$http$Http$NetworkError_ = { $: 2 };
      var $elm$http$Http$Receiving = function(a) {
        return { $: 1, a };
      };
      var $elm$http$Http$Sending = function(a) {
        return { $: 0, a };
      };
      var $elm$http$Http$Timeout_ = { $: 1 };
      var $elm$core$Maybe$isJust = function(maybe) {
        if (!maybe.$) {
          return true;
        } else {
          return false;
        }
      };
      var $elm$core$Platform$sendToSelf = _Platform_sendToSelf;
      var $elm$core$Dict$getMin = function(dict) {
        getMin:
          while (true) {
            if (dict.$ === -1 && dict.d.$ === -1) {
              var left = dict.d;
              var $temp$dict = left;
              dict = $temp$dict;
              continue getMin;
            } else {
              return dict;
            }
          }
      };
      var $elm$core$Dict$moveRedLeft = function(dict) {
        if (dict.$ === -1 && dict.d.$ === -1 && dict.e.$ === -1) {
          if (dict.e.d.$ === -1 && !dict.e.d.a) {
            var clr = dict.a;
            var k = dict.b;
            var v = dict.c;
            var _v1 = dict.d;
            var lClr = _v1.a;
            var lK = _v1.b;
            var lV = _v1.c;
            var lLeft = _v1.d;
            var lRight = _v1.e;
            var _v2 = dict.e;
            var rClr = _v2.a;
            var rK = _v2.b;
            var rV = _v2.c;
            var rLeft = _v2.d;
            var _v3 = rLeft.a;
            var rlK = rLeft.b;
            var rlV = rLeft.c;
            var rlL = rLeft.d;
            var rlR = rLeft.e;
            var rRight = _v2.e;
            return A5(
              $elm$core$Dict$RBNode_elm_builtin,
              0,
              rlK,
              rlV,
              A5(
                $elm$core$Dict$RBNode_elm_builtin,
                1,
                k,
                v,
                A5($elm$core$Dict$RBNode_elm_builtin, 0, lK, lV, lLeft, lRight),
                rlL
              ),
              A5($elm$core$Dict$RBNode_elm_builtin, 1, rK, rV, rlR, rRight)
            );
          } else {
            var clr = dict.a;
            var k = dict.b;
            var v = dict.c;
            var _v4 = dict.d;
            var lClr = _v4.a;
            var lK = _v4.b;
            var lV = _v4.c;
            var lLeft = _v4.d;
            var lRight = _v4.e;
            var _v5 = dict.e;
            var rClr = _v5.a;
            var rK = _v5.b;
            var rV = _v5.c;
            var rLeft = _v5.d;
            var rRight = _v5.e;
            if (clr === 1) {
              return A5(
                $elm$core$Dict$RBNode_elm_builtin,
                1,
                k,
                v,
                A5($elm$core$Dict$RBNode_elm_builtin, 0, lK, lV, lLeft, lRight),
                A5($elm$core$Dict$RBNode_elm_builtin, 0, rK, rV, rLeft, rRight)
              );
            } else {
              return A5(
                $elm$core$Dict$RBNode_elm_builtin,
                1,
                k,
                v,
                A5($elm$core$Dict$RBNode_elm_builtin, 0, lK, lV, lLeft, lRight),
                A5($elm$core$Dict$RBNode_elm_builtin, 0, rK, rV, rLeft, rRight)
              );
            }
          }
        } else {
          return dict;
        }
      };
      var $elm$core$Dict$moveRedRight = function(dict) {
        if (dict.$ === -1 && dict.d.$ === -1 && dict.e.$ === -1) {
          if (dict.d.d.$ === -1 && !dict.d.d.a) {
            var clr = dict.a;
            var k = dict.b;
            var v = dict.c;
            var _v1 = dict.d;
            var lClr = _v1.a;
            var lK = _v1.b;
            var lV = _v1.c;
            var _v2 = _v1.d;
            var _v3 = _v2.a;
            var llK = _v2.b;
            var llV = _v2.c;
            var llLeft = _v2.d;
            var llRight = _v2.e;
            var lRight = _v1.e;
            var _v4 = dict.e;
            var rClr = _v4.a;
            var rK = _v4.b;
            var rV = _v4.c;
            var rLeft = _v4.d;
            var rRight = _v4.e;
            return A5(
              $elm$core$Dict$RBNode_elm_builtin,
              0,
              lK,
              lV,
              A5($elm$core$Dict$RBNode_elm_builtin, 1, llK, llV, llLeft, llRight),
              A5(
                $elm$core$Dict$RBNode_elm_builtin,
                1,
                k,
                v,
                lRight,
                A5($elm$core$Dict$RBNode_elm_builtin, 0, rK, rV, rLeft, rRight)
              )
            );
          } else {
            var clr = dict.a;
            var k = dict.b;
            var v = dict.c;
            var _v5 = dict.d;
            var lClr = _v5.a;
            var lK = _v5.b;
            var lV = _v5.c;
            var lLeft = _v5.d;
            var lRight = _v5.e;
            var _v6 = dict.e;
            var rClr = _v6.a;
            var rK = _v6.b;
            var rV = _v6.c;
            var rLeft = _v6.d;
            var rRight = _v6.e;
            if (clr === 1) {
              return A5(
                $elm$core$Dict$RBNode_elm_builtin,
                1,
                k,
                v,
                A5($elm$core$Dict$RBNode_elm_builtin, 0, lK, lV, lLeft, lRight),
                A5($elm$core$Dict$RBNode_elm_builtin, 0, rK, rV, rLeft, rRight)
              );
            } else {
              return A5(
                $elm$core$Dict$RBNode_elm_builtin,
                1,
                k,
                v,
                A5($elm$core$Dict$RBNode_elm_builtin, 0, lK, lV, lLeft, lRight),
                A5($elm$core$Dict$RBNode_elm_builtin, 0, rK, rV, rLeft, rRight)
              );
            }
          }
        } else {
          return dict;
        }
      };
      var $elm$core$Dict$removeHelpPrepEQGT = F7(
        function(targetKey, dict, color, key, value, left, right) {
          if (left.$ === -1 && !left.a) {
            var _v1 = left.a;
            var lK = left.b;
            var lV = left.c;
            var lLeft = left.d;
            var lRight = left.e;
            return A5(
              $elm$core$Dict$RBNode_elm_builtin,
              color,
              lK,
              lV,
              lLeft,
              A5($elm$core$Dict$RBNode_elm_builtin, 0, key, value, lRight, right)
            );
          } else {
            _v2$2:
              while (true) {
                if (right.$ === -1 && right.a === 1) {
                  if (right.d.$ === -1) {
                    if (right.d.a === 1) {
                      var _v3 = right.a;
                      var _v4 = right.d;
                      var _v5 = _v4.a;
                      return $elm$core$Dict$moveRedRight(dict);
                    } else {
                      break _v2$2;
                    }
                  } else {
                    var _v6 = right.a;
                    var _v7 = right.d;
                    return $elm$core$Dict$moveRedRight(dict);
                  }
                } else {
                  break _v2$2;
                }
              }
            return dict;
          }
        }
      );
      var $elm$core$Dict$removeMin = function(dict) {
        if (dict.$ === -1 && dict.d.$ === -1) {
          var color = dict.a;
          var key = dict.b;
          var value = dict.c;
          var left = dict.d;
          var lColor = left.a;
          var lLeft = left.d;
          var right = dict.e;
          if (lColor === 1) {
            if (lLeft.$ === -1 && !lLeft.a) {
              var _v3 = lLeft.a;
              return A5(
                $elm$core$Dict$RBNode_elm_builtin,
                color,
                key,
                value,
                $elm$core$Dict$removeMin(left),
                right
              );
            } else {
              var _v4 = $elm$core$Dict$moveRedLeft(dict);
              if (_v4.$ === -1) {
                var nColor = _v4.a;
                var nKey = _v4.b;
                var nValue = _v4.c;
                var nLeft = _v4.d;
                var nRight = _v4.e;
                return A5(
                  $elm$core$Dict$balance,
                  nColor,
                  nKey,
                  nValue,
                  $elm$core$Dict$removeMin(nLeft),
                  nRight
                );
              } else {
                return $elm$core$Dict$RBEmpty_elm_builtin;
              }
            }
          } else {
            return A5(
              $elm$core$Dict$RBNode_elm_builtin,
              color,
              key,
              value,
              $elm$core$Dict$removeMin(left),
              right
            );
          }
        } else {
          return $elm$core$Dict$RBEmpty_elm_builtin;
        }
      };
      var $elm$core$Dict$removeHelp = F2(
        function(targetKey, dict) {
          if (dict.$ === -2) {
            return $elm$core$Dict$RBEmpty_elm_builtin;
          } else {
            var color = dict.a;
            var key = dict.b;
            var value = dict.c;
            var left = dict.d;
            var right = dict.e;
            if (_Utils_cmp(targetKey, key) < 0) {
              if (left.$ === -1 && left.a === 1) {
                var _v4 = left.a;
                var lLeft = left.d;
                if (lLeft.$ === -1 && !lLeft.a) {
                  var _v6 = lLeft.a;
                  return A5(
                    $elm$core$Dict$RBNode_elm_builtin,
                    color,
                    key,
                    value,
                    A2($elm$core$Dict$removeHelp, targetKey, left),
                    right
                  );
                } else {
                  var _v7 = $elm$core$Dict$moveRedLeft(dict);
                  if (_v7.$ === -1) {
                    var nColor = _v7.a;
                    var nKey = _v7.b;
                    var nValue = _v7.c;
                    var nLeft = _v7.d;
                    var nRight = _v7.e;
                    return A5(
                      $elm$core$Dict$balance,
                      nColor,
                      nKey,
                      nValue,
                      A2($elm$core$Dict$removeHelp, targetKey, nLeft),
                      nRight
                    );
                  } else {
                    return $elm$core$Dict$RBEmpty_elm_builtin;
                  }
                }
              } else {
                return A5(
                  $elm$core$Dict$RBNode_elm_builtin,
                  color,
                  key,
                  value,
                  A2($elm$core$Dict$removeHelp, targetKey, left),
                  right
                );
              }
            } else {
              return A2(
                $elm$core$Dict$removeHelpEQGT,
                targetKey,
                A7($elm$core$Dict$removeHelpPrepEQGT, targetKey, dict, color, key, value, left, right)
              );
            }
          }
        }
      );
      var $elm$core$Dict$removeHelpEQGT = F2(
        function(targetKey, dict) {
          if (dict.$ === -1) {
            var color = dict.a;
            var key = dict.b;
            var value = dict.c;
            var left = dict.d;
            var right = dict.e;
            if (_Utils_eq(targetKey, key)) {
              var _v1 = $elm$core$Dict$getMin(right);
              if (_v1.$ === -1) {
                var minKey = _v1.b;
                var minValue = _v1.c;
                return A5(
                  $elm$core$Dict$balance,
                  color,
                  minKey,
                  minValue,
                  left,
                  $elm$core$Dict$removeMin(right)
                );
              } else {
                return $elm$core$Dict$RBEmpty_elm_builtin;
              }
            } else {
              return A5(
                $elm$core$Dict$balance,
                color,
                key,
                value,
                left,
                A2($elm$core$Dict$removeHelp, targetKey, right)
              );
            }
          } else {
            return $elm$core$Dict$RBEmpty_elm_builtin;
          }
        }
      );
      var $elm$core$Dict$remove = F2(
        function(key, dict) {
          var _v0 = A2($elm$core$Dict$removeHelp, key, dict);
          if (_v0.$ === -1 && !_v0.a) {
            var _v1 = _v0.a;
            var k = _v0.b;
            var v = _v0.c;
            var l = _v0.d;
            var r = _v0.e;
            return A5($elm$core$Dict$RBNode_elm_builtin, 1, k, v, l, r);
          } else {
            var x = _v0;
            return x;
          }
        }
      );
      var $elm$core$Dict$update = F3(
        function(targetKey, alter, dictionary) {
          var _v0 = alter(
            A2($elm$core$Dict$get, targetKey, dictionary)
          );
          if (!_v0.$) {
            var value = _v0.a;
            return A3($elm$core$Dict$insert, targetKey, value, dictionary);
          } else {
            return A2($elm$core$Dict$remove, targetKey, dictionary);
          }
        }
      );
      var $elm$http$Http$bytesBody = _Http_pair;
      var $elm$http$Http$emptyBody = _Http_emptyBody;
      var $elm$http$Http$jsonBody = function(value) {
        return A2(
          _Http_pair,
          "application/json",
          A2($elm$json$Json$Encode$encode, 0, value)
        );
      };
      var $elm$http$Http$stringBody = _Http_pair;
      var $author$project$Api$Body$encode = function(body) {
        switch (body.$) {
          case 0:
            var text = body.a;
            return $elm$core$Maybe$Just(
              A2($elm$http$Http$stringBody, "text/plain", text)
            );
          case 1:
            var text = body.a;
            return $elm$core$Maybe$Just(
              A2($elm$http$Http$stringBody, "text/markdown", text)
            );
          case 2:
            var text = body.a;
            return $elm$core$Maybe$Just(
              A2($elm$http$Http$stringBody, "application/javascript", text)
            );
          case 3:
            var jsonValue = body.a;
            return $elm$core$Maybe$Just(
              $elm$http$Http$jsonBody(jsonValue)
            );
          case 4:
            var jsonCString = body.a;
            return $elm$core$Maybe$Just(
              A2($elm$http$Http$stringBody, "application/jsonc", jsonCString)
            );
          case 5:
            var image = body.a;
            return $elm$core$Maybe$Just(
              A2($elm$http$Http$bytesBody, "image/png", image)
            );
          default:
            return $elm$core$Maybe$Just($elm$http$Http$emptyBody);
        }
      };
      var $author$project$Api$Response$BadRequest = F3(
        function(detail, message, code) {
          return { bm: code, aS: detail, a$: message };
        }
      );
      var $elm$json$Json$Decode$map3 = _Json_map3;
      var $author$project$Api$Response$badRequestDecoder = A4(
        $elm$json$Json$Decode$map3,
        $author$project$Api$Response$BadRequest,
        A2($elm$json$Json$Decode$field, "detail", $elm$json$Json$Decode$string),
        A2($elm$json$Json$Decode$field, "message", $elm$json$Json$Decode$string),
        A2($elm$json$Json$Decode$field, "code", $elm$json$Json$Decode$string)
      );
      var $elm$core$Result$withDefault = F2(
        function(def, result) {
          if (!result.$) {
            var a = result.a;
            return a;
          } else {
            return def;
          }
        }
      );
      var $author$project$Api$Response$httpErrorToString = function(error) {
        switch (error.$) {
          case 0:
            var url = error.a;
            return "Bad Url: " + url;
          case 1:
            return "Timeout";
          case 2:
            return "Network Error";
          case 3:
            var metadata = error.a;
            var body_ = error.b;
            var message = A2(
              $elm$core$Result$withDefault,
              { bm: "", aS: "Could not decode error message", a$: body_ },
              A2($elm$json$Json$Decode$decodeString, $author$project$Api$Response$badRequestDecoder, body_)
            );
            return "Bad Request " + ($elm$core$String$fromInt(metadata.cE) + (": " + (message.aS + (" (" + (message.a$ + ")")))));
          default:
            var e = error.c;
            return "Bad Body: " + e;
        }
      };
      var $elm$core$Task$onError = _Scheduler_onError;
      var $elm$core$Task$mapError = F2(
        function(convert, task) {
          return A2(
            $elm$core$Task$onError,
            A2($elm$core$Basics$composeL, $elm$core$Task$fail, convert),
            task
          );
        }
      );
      var $elm$http$Http$resultToTask = function(result) {
        if (!result.$) {
          var a = result.a;
          return $elm$core$Task$succeed(a);
        } else {
          var x = result.a;
          return $elm$core$Task$fail(x);
        }
      };
      var $elm$http$Http$task = function(r) {
        return A3(
          _Http_toTask,
          0,
          $elm$http$Http$resultToTask,
          { c1: false, F: r.F, av: r.dJ, dk: r.dk, Y: r.Y, dZ: r.dZ, cL: $elm$core$Maybe$Nothing, E: r.E }
        );
      };
      var $elm$url$Url$Builder$CrossOrigin = function(a) {
        return { $: 2, a };
      };
      var $elm$url$Url$Builder$rootToPrePath = function(root) {
        switch (root.$) {
          case 0:
            return "/";
          case 1:
            return "";
          default:
            var prePath = root.a;
            return prePath + "/";
        }
      };
      var $elm$url$Url$Builder$toQueryPair = function(_v0) {
        var key = _v0.a;
        var value = _v0.b;
        return key + ("=" + value);
      };
      var $elm$url$Url$Builder$toQuery = function(parameters) {
        if (!parameters.b) {
          return "";
        } else {
          return "?" + A2(
            $elm$core$String$join,
            "&",
            A2($elm$core$List$map, $elm$url$Url$Builder$toQueryPair, parameters)
          );
        }
      };
      var $elm$url$Url$Builder$custom = F4(
        function(root, pathSegments, parameters, maybeFragment) {
          var fragmentless = _Utils_ap(
            $elm$url$Url$Builder$rootToPrePath(root),
            _Utils_ap(
              A2($elm$core$String$join, "/", pathSegments),
              $elm$url$Url$Builder$toQuery(parameters)
            )
          );
          if (maybeFragment.$ === 1) {
            return fragmentless;
          } else {
            var fragment = maybeFragment.a;
            return fragmentless + ("#" + fragment);
          }
        }
      );
      var $author$project$Api$Url$toString = function(_v0) {
        var u = _v0;
        return A4(
          $elm$url$Url$Builder$custom,
          $elm$url$Url$Builder$CrossOrigin(
            "https://" + A2($elm$core$Maybe$withDefault, "", u.dg)
          ),
          _List_fromArray(
            [
              "api",
              "v2",
              A2($elm$core$String$dropLeft, 1, u.dC)
            ]
          ),
          u.dH,
          $elm$core$Maybe$Nothing
        );
      };
      var $author$project$Api$Request$request = function(_v0) {
        var method = _v0.Y;
        var url = _v0.E;
        var token = _v0.I;
        var body = _v0.F;
        var responseResolver = _v0.H;
        if (token.$ === 1) {
          return $elm$core$Task$fail("No authorization token provided.");
        } else {
          var t = token.a;
          var _v2 = $author$project$Api$Body$encode(body);
          if (_v2.$ === 1) {
            return $elm$core$Task$fail("Error parsing body payload");
          } else {
            var b = _v2.a;
            return A2(
              $elm$core$Task$mapError,
              $author$project$Api$Response$httpErrorToString,
              $elm$http$Http$task(
                {
                  F: b,
                  dk: _List_fromArray(
                    [
                      $author$project$Token$authorizationHeader(t)
                    ]
                  ),
                  Y: method,
                  dJ: responseResolver,
                  dZ: $elm$core$Maybe$Nothing,
                  E: $author$project$Api$Url$toString(url)
                }
              )
            );
          }
        }
      };
      var $author$project$Api$Request$get = function(_v0) {
        var token = _v0.I;
        var url = _v0.E;
        var responseResolver = _v0.H;
        return $author$project$Api$Request$request(
          { F: $author$project$Api$Body$empty, Y: "GET", H: responseResolver, I: token, E: url }
        );
      };
      var $author$project$Instruction$Input = function(a) {
        return { $: 0, a };
      };
      var $author$project$Content$ApiResponse = function(a) {
        return { $: 0, a };
      };
      var $author$project$Content$fromApiResponse = $author$project$Content$ApiResponse;
      var $author$project$Instruction$request = F2(
        function(filePath, task) {
          if (!filePath.$) {
            var fp = filePath.a;
            return A2(
              $elm$core$Task$map,
              $author$project$Instruction$Input,
              A2($elm$core$Task$map, $author$project$Content$fromApiResponse, task)
            );
          } else {
            return A2(
              $elm$core$Task$map,
              $author$project$Instruction$Input,
              A2($elm$core$Task$map, $author$project$Content$fromApiResponse, task)
            );
          }
        }
      );
      var $author$project$Api$Response$Response = F2(
        function(a, b) {
          return { $: 0, a, b };
        }
      );
      var $author$project$Api$Response$BadBody = F3(
        function(a, b, c) {
          return { $: 4, a, b, c };
        }
      );
      var $author$project$Api$Response$BadStatus = F2(
        function(a, b) {
          return { $: 3, a, b };
        }
      );
      var $author$project$Api$Response$BadUrl = function(a) {
        return { $: 0, a };
      };
      var $author$project$Api$Response$NetworkError = { $: 2 };
      var $author$project$Api$Response$Timeout = { $: 1 };
      var $author$project$Api$Response$resolveString = F2(
        function(toResult, response) {
          switch (response.$) {
            case 0:
              var url = response.a;
              return $elm$core$Result$Err(
                $author$project$Api$Response$BadUrl(url)
              );
            case 1:
              return $elm$core$Result$Err($author$project$Api$Response$Timeout);
            case 2:
              return $elm$core$Result$Err($author$project$Api$Response$NetworkError);
            case 3:
              var metadata = response.a;
              var body_ = response.b;
              return $elm$core$Result$Err(
                A2($author$project$Api$Response$BadStatus, metadata, body_)
              );
            default:
              var metadata = response.a;
              var body_ = response.b;
              return A2(
                $elm$core$Result$mapError,
                A2($author$project$Api$Response$BadBody, metadata, body_),
                toResult(
                  _Utils_Tuple2(metadata, body_)
                )
              );
          }
        }
      );
      var $elm$http$Http$stringResolver = A2(_Http_expect, "", $elm$core$Basics$identity);
      var $author$project$Api$Response$resolveToJson = function(decoder) {
        return $elm$http$Http$stringResolver(
          $author$project$Api$Response$resolveString(
            function(_v0) {
              var metadata = _v0.a;
              var body_ = _v0.b;
              return A2(
                $elm$core$Result$map,
                $author$project$Api$Response$Response(metadata),
                A2(
                  $elm$core$Result$map,
                  $author$project$Api$Body$applicationJson,
                  A2(
                    $elm$core$Result$mapError,
                    $elm$json$Json$Decode$errorToString,
                    A2($elm$json$Json$Decode$decodeString, decoder, body_)
                  )
                )
              );
            }
          )
        );
      };
      var $author$project$Gen$Command$Apps$Connections$List$responseDecoder = A2(
        $elm$json$Json$Decode$at,
        _List_fromArray(
          ["appConnections"]
        ),
        $elm$json$Json$Decode$value
      );
      var $elm$core$List$singleton = function(value) {
        return _List_fromArray(
          [value]
        );
      };
      var $elm$url$Url$Builder$QueryParameter = F2(
        function(a, b) {
          return { $: 0, a, b };
        }
      );
      var $elm$url$Url$percentEncode = _Url_percentEncode;
      var $elm$url$Url$Builder$string = F2(
        function(key, value) {
          return A2(
            $elm$url$Url$Builder$QueryParameter,
            $elm$url$Url$percentEncode(key),
            $elm$url$Url$percentEncode(value)
          );
        }
      );
      var $author$project$Api$Url$boolQueryParameter = F2(
        function(key, value) {
          return $elm$core$List$singleton(
            A2(
              $elm$url$Url$Builder$string,
              key,
              value ? "true" : "false"
            )
          );
        }
      );
      var $elm$core$List$append = F2(
        function(xs, ys) {
          if (!ys.b) {
            return xs;
          } else {
            return A3($elm$core$List$foldr, $elm$core$List$cons, ys, xs);
          }
        }
      );
      var $elm$core$List$concat = function(lists) {
        return A3($elm$core$List$foldr, $elm$core$List$append, _List_Nil, lists);
      };
      var $author$project$Api$Url$Url = $elm$core$Basics$identity;
      var $author$project$Api$Url$url = $elm$core$Basics$identity;
      var $author$project$Gen$Command$Apps$Connections$List$url = function(options) {
        return $author$project$Api$Url$url(
          {
            dg: options.dg,
            dC: A3(
              $elm$core$String$replace,
              "{SDK_appName}",
              $elm$core$Basics$identity(options.b),
              "/sdk/apps/{SDK_appName}/connections"
            ),
            dH: $elm$core$List$concat(
              _List_fromArray(
                [
                  A2($author$project$Api$Url$boolQueryParameter, "all", options.f),
                  A2($author$project$Api$Url$boolQueryParameter, "opensource", options.h)
                ]
              )
            )
          }
        );
      };
      var $author$project$Gen$Command$Apps$Connections$List$request = function(options) {
        var body = $elm$core$Maybe$Nothing;
        return A2(
          $author$project$Instruction$request,
          options.aF,
          $author$project$Api$Request$get(
            {
              H: $author$project$Api$Response$resolveToJson($author$project$Gen$Command$Apps$Connections$List$responseDecoder),
              I: options.I,
              E: $author$project$Gen$Command$Apps$Connections$List$url(options)
            }
          )
        );
      };
      var $author$project$Gen$Command$Apps$Connections$Sections$Get$responseDecoder = A2($elm$json$Json$Decode$at, _List_Nil, $elm$json$Json$Decode$value);
      var $author$project$Gen$Command$Apps$Connections$Sections$Get$url = function(options) {
        return $author$project$Api$Url$url(
          {
            dg: options.dg,
            dC: A3(
              $elm$core$String$replace,
              "{SDK_connectionSection}",
              $elm$core$Basics$identity(options.dP),
              A3(
                $elm$core$String$replace,
                "{SDK_connectionName}",
                $elm$core$Basics$identity(options.dO),
                "/sdk/apps/connections/{SDK_connectionName}/{SDK_connectionSection}"
              )
            ),
            dH: $elm$core$List$concat(
              _List_fromArray(
                [
                  A2($author$project$Api$Url$boolQueryParameter, "all", options.f),
                  A2($author$project$Api$Url$boolQueryParameter, "opensource", options.h)
                ]
              )
            )
          }
        );
      };
      var $author$project$Gen$Command$Apps$Connections$Sections$Get$request = function(options) {
        var body = $elm$core$Maybe$Nothing;
        return A2(
          $author$project$Instruction$request,
          options.aF,
          $author$project$Api$Request$get(
            {
              H: $author$project$Api$Response$resolveToJson($author$project$Gen$Command$Apps$Connections$Sections$Get$responseDecoder),
              I: options.I,
              E: $author$project$Gen$Command$Apps$Connections$Sections$Get$url(options)
            }
          )
        );
      };
      var $author$project$Api$Response$resolveToString = $elm$http$Http$stringResolver(
        $author$project$Api$Response$resolveString(
          function(_v0) {
            var metadata = _v0.a;
            var body_ = _v0.b;
            return $elm$core$Result$Ok(
              A2(
                $author$project$Api$Response$Response,
                metadata,
                $author$project$Api$Body$textPlain(body_)
              )
            );
          }
        )
      );
      var $author$project$Gen$Command$Apps$Functions$Code$Get$url = function(options) {
        return $author$project$Api$Url$url(
          {
            dg: options.dg,
            dC: A3(
              $elm$core$String$replace,
              "{SDK_functionName}",
              $elm$core$Basics$identity(options.cq),
              A3(
                $elm$core$String$replace,
                "{SDK_appVersion}",
                $elm$core$Basics$identity(options.d),
                A3(
                  $elm$core$String$replace,
                  "{SDK_appName}",
                  $elm$core$Basics$identity(options.b),
                  "/sdk/apps/{SDK_appName}/{SDK_appVersion}/functions/{SDK_functionName}/code"
                )
              )
            ),
            dH: $elm$core$List$concat(
              _List_fromArray(
                [
                  A2($author$project$Api$Url$boolQueryParameter, "all", options.f),
                  A2($author$project$Api$Url$boolQueryParameter, "opensource", options.h)
                ]
              )
            )
          }
        );
      };
      var $author$project$Gen$Command$Apps$Functions$Code$Get$request = function(options) {
        var body = $elm$core$Maybe$Nothing;
        return A2(
          $author$project$Instruction$request,
          options.aF,
          $author$project$Api$Request$get(
            {
              H: $author$project$Api$Response$resolveToString,
              I: options.I,
              E: $author$project$Gen$Command$Apps$Functions$Code$Get$url(options)
            }
          )
        );
      };
      var $author$project$Gen$Command$Apps$Functions$Get$responseDecoder = A2(
        $elm$json$Json$Decode$at,
        _List_fromArray(
          ["appFunctions"]
        ),
        $elm$json$Json$Decode$value
      );
      var $author$project$Gen$Command$Apps$Functions$Get$url = function(options) {
        return $author$project$Api$Url$url(
          {
            dg: options.dg,
            dC: A3(
              $elm$core$String$replace,
              "{SDK_appVersion}",
              $elm$core$Basics$identity(options.d),
              A3(
                $elm$core$String$replace,
                "{SDK_appName}",
                $elm$core$Basics$identity(options.b),
                "/sdk/apps/{SDK_appName}/{SDK_appVersion}/functions"
              )
            ),
            dH: $elm$core$List$concat(
              _List_fromArray(
                [
                  A2($author$project$Api$Url$boolQueryParameter, "all", options.f),
                  A2($author$project$Api$Url$boolQueryParameter, "opensource", options.h)
                ]
              )
            )
          }
        );
      };
      var $author$project$Gen$Command$Apps$Functions$Get$request = function(options) {
        var body = $elm$core$Maybe$Nothing;
        return A2(
          $author$project$Instruction$request,
          options.aF,
          $author$project$Api$Request$get(
            {
              H: $author$project$Api$Response$resolveToJson($author$project$Gen$Command$Apps$Functions$Get$responseDecoder),
              I: options.I,
              E: $author$project$Gen$Command$Apps$Functions$Get$url(options)
            }
          )
        );
      };
      var $author$project$Gen$Command$Apps$Functions$Test$Get$url = function(options) {
        return $author$project$Api$Url$url(
          {
            dg: options.dg,
            dC: A3(
              $elm$core$String$replace,
              "{SDK_functionName}",
              $elm$core$Basics$identity(options.cq),
              A3(
                $elm$core$String$replace,
                "{SDK_appVersion}",
                $elm$core$Basics$identity(options.d),
                A3(
                  $elm$core$String$replace,
                  "{SDK_appName}",
                  $elm$core$Basics$identity(options.b),
                  "/sdk/apps/{SDK_appName}/{SDK_appVersion}/functions/{SDK_functionName}/test"
                )
              )
            ),
            dH: $elm$core$List$concat(
              _List_fromArray(
                [
                  A2($author$project$Api$Url$boolQueryParameter, "all", options.f),
                  A2($author$project$Api$Url$boolQueryParameter, "opensource", options.h)
                ]
              )
            )
          }
        );
      };
      var $author$project$Gen$Command$Apps$Functions$Test$Get$request = function(options) {
        var body = $elm$core$Maybe$Nothing;
        return A2(
          $author$project$Instruction$request,
          options.aF,
          $author$project$Api$Request$get(
            {
              H: $author$project$Api$Response$resolveToString,
              I: options.I,
              E: $author$project$Gen$Command$Apps$Functions$Test$Get$url(options)
            }
          )
        );
      };
      var $elm$http$Http$bytesResolver = A2(_Http_expect, "arraybuffer", _Http_toDataView);
      var $author$project$Api$Response$resolveBytes = F2(
        function(toResult, response) {
          switch (response.$) {
            case 0:
              var url = response.a;
              return $elm$core$Result$Err(
                $author$project$Api$Response$BadUrl(url)
              );
            case 1:
              return $elm$core$Result$Err($author$project$Api$Response$Timeout);
            case 2:
              return $elm$core$Result$Err($author$project$Api$Response$NetworkError);
            case 3:
              var metadata = response.a;
              return $elm$core$Result$Err(
                A2($author$project$Api$Response$BadStatus, metadata, "(Binary Data)")
              );
            default:
              var metadata = response.a;
              var body_ = response.b;
              return A2(
                $elm$core$Result$mapError,
                A2($author$project$Api$Response$BadBody, metadata, "(Binary Data)"),
                toResult(
                  _Utils_Tuple2(metadata, body_)
                )
              );
          }
        }
      );
      var $author$project$Api$Response$resolveToImagePng = $elm$http$Http$bytesResolver(
        $author$project$Api$Response$resolveBytes(
          function(_v0) {
            var metadata = _v0.a;
            var body_ = _v0.b;
            return $elm$core$Result$Ok(
              A2(
                $author$project$Api$Response$Response,
                metadata,
                $author$project$Api$Body$imagePng(body_)
              )
            );
          }
        )
      );
      var $author$project$Gen$Command$Apps$Icon$Get$url = function(options) {
        return $author$project$Api$Url$url(
          {
            dg: options.dg,
            dC: A3(
              $elm$core$String$replace,
              "{SDK_appIconSize}",
              $elm$core$Basics$identity(options.dM),
              A3(
                $elm$core$String$replace,
                "{SDK_appVersion}",
                $elm$core$Basics$identity(options.d),
                A3(
                  $elm$core$String$replace,
                  "{SDK_appName}",
                  $elm$core$Basics$identity(options.b),
                  "/sdk/apps/{SDK_appName}/{SDK_appVersion}/icon/{SDK_appIconSize}"
                )
              )
            ),
            dH: $elm$core$List$concat(
              _List_fromArray(
                [
                  A2($author$project$Api$Url$boolQueryParameter, "all", options.f),
                  A2($author$project$Api$Url$boolQueryParameter, "opensource", options.h)
                ]
              )
            )
          }
        );
      };
      var $author$project$Gen$Command$Apps$Icon$Get$request = function(options) {
        var body = $elm$core$Maybe$Nothing;
        return A2(
          $author$project$Instruction$request,
          options.aF,
          $author$project$Api$Request$get(
            {
              H: $author$project$Api$Response$resolveToImagePng,
              I: options.I,
              E: $author$project$Gen$Command$Apps$Icon$Get$url(options)
            }
          )
        );
      };
      var $author$project$Gen$Command$Apps$Metadata$Get$responseDecoder = A2(
        $elm$json$Json$Decode$at,
        _List_fromArray(
          ["app"]
        ),
        $elm$json$Json$Decode$value
      );
      var $author$project$Gen$Command$Apps$Metadata$Get$url = function(options) {
        return $author$project$Api$Url$url(
          {
            dg: options.dg,
            dC: A3(
              $elm$core$String$replace,
              "{SDK_appVersion}",
              $elm$core$String$fromInt(options.d),
              A3(
                $elm$core$String$replace,
                "{SDK_appName}",
                $elm$core$Basics$identity(options.b),
                "/sdk/apps/{SDK_appName}/{SDK_appVersion}"
              )
            ),
            dH: $elm$core$List$concat(
              _List_fromArray(
                [
                  A2($author$project$Api$Url$boolQueryParameter, "all", options.f),
                  A2($author$project$Api$Url$boolQueryParameter, "opensource", options.h)
                ]
              )
            )
          }
        );
      };
      var $author$project$Gen$Command$Apps$Metadata$Get$request = function(options) {
        var body = $elm$core$Maybe$Nothing;
        return A2(
          $author$project$Instruction$request,
          options.aF,
          $author$project$Api$Request$get(
            {
              H: $author$project$Api$Response$resolveToJson($author$project$Gen$Command$Apps$Metadata$Get$responseDecoder),
              I: options.I,
              E: $author$project$Gen$Command$Apps$Metadata$Get$url(options)
            }
          )
        );
      };
      var $author$project$Gen$Command$Apps$Module$Get$responseDecoder = A2(
        $elm$json$Json$Decode$at,
        _List_fromArray(
          ["appModule"]
        ),
        $elm$json$Json$Decode$value
      );
      var $author$project$Gen$Command$Apps$Module$Get$url = function(options) {
        return $author$project$Api$Url$url(
          {
            dg: options.dg,
            dC: A3(
              $elm$core$String$replace,
              "{SDK_moduleName}",
              $elm$core$Basics$identity(options.cr),
              A3(
                $elm$core$String$replace,
                "{SDK_appVersion}",
                $elm$core$Basics$identity(options.d),
                A3(
                  $elm$core$String$replace,
                  "{SDK_appName}",
                  $elm$core$Basics$identity(options.b),
                  "/sdk/apps/{SDK_appName}/{SDK_appVersion}/modules/{SDK_moduleName}"
                )
              )
            ),
            dH: $elm$core$List$concat(
              _List_fromArray(
                [
                  A2($author$project$Api$Url$boolQueryParameter, "all", options.f),
                  A2($author$project$Api$Url$boolQueryParameter, "opensource", options.h)
                ]
              )
            )
          }
        );
      };
      var $author$project$Gen$Command$Apps$Module$Get$request = function(options) {
        var body = $elm$core$Maybe$Nothing;
        return A2(
          $author$project$Instruction$request,
          options.aF,
          $author$project$Api$Request$get(
            {
              H: $author$project$Api$Response$resolveToJson($author$project$Gen$Command$Apps$Module$Get$responseDecoder),
              I: options.I,
              E: $author$project$Gen$Command$Apps$Module$Get$url(options)
            }
          )
        );
      };
      var $author$project$Gen$Command$Apps$Modules$Get$responseDecoder = A2(
        $elm$json$Json$Decode$at,
        _List_fromArray(
          ["appModules"]
        ),
        $elm$json$Json$Decode$value
      );
      var $author$project$Gen$Command$Apps$Modules$Get$url = function(options) {
        return $author$project$Api$Url$url(
          {
            dg: options.dg,
            dC: A3(
              $elm$core$String$replace,
              "{SDK_appVersion}",
              $elm$core$Basics$identity(options.d),
              A3(
                $elm$core$String$replace,
                "{SDK_appName}",
                $elm$core$Basics$identity(options.b),
                "/sdk/apps/{SDK_appName}/{SDK_appVersion}/modules"
              )
            ),
            dH: $elm$core$List$concat(
              _List_fromArray(
                [
                  A2($author$project$Api$Url$boolQueryParameter, "all", options.f),
                  A2($author$project$Api$Url$boolQueryParameter, "opensource", options.h)
                ]
              )
            )
          }
        );
      };
      var $author$project$Gen$Command$Apps$Modules$Get$request = function(options) {
        var body = $elm$core$Maybe$Nothing;
        return A2(
          $author$project$Instruction$request,
          options.aF,
          $author$project$Api$Request$get(
            {
              H: $author$project$Api$Response$resolveToJson($author$project$Gen$Command$Apps$Modules$Get$responseDecoder),
              I: options.I,
              E: $author$project$Gen$Command$Apps$Modules$Get$url(options)
            }
          )
        );
      };
      var $author$project$Gen$Command$Apps$Modules$Sections$Get$responseDecoder = A2($elm$json$Json$Decode$at, _List_Nil, $elm$json$Json$Decode$value);
      var $author$project$Gen$Command$Apps$Modules$Sections$Get$url = function(options) {
        return $author$project$Api$Url$url(
          {
            dg: options.dg,
            dC: A3(
              $elm$core$String$replace,
              "{SDK_moduleSection}",
              $elm$core$Basics$identity(options.dQ),
              A3(
                $elm$core$String$replace,
                "{SDK_moduleName}",
                $elm$core$Basics$identity(options.cr),
                A3(
                  $elm$core$String$replace,
                  "{SDK_appVersion}",
                  $elm$core$Basics$identity(options.d),
                  A3(
                    $elm$core$String$replace,
                    "{SDK_appName}",
                    $elm$core$Basics$identity(options.b),
                    "/sdk/apps/{SDK_appName}/{SDK_appVersion}/modules/{SDK_moduleName}/{SDK_moduleSection}"
                  )
                )
              )
            ),
            dH: $elm$core$List$concat(
              _List_fromArray(
                [
                  A2($author$project$Api$Url$boolQueryParameter, "all", options.f),
                  A2($author$project$Api$Url$boolQueryParameter, "opensource", options.h)
                ]
              )
            )
          }
        );
      };
      var $author$project$Gen$Command$Apps$Modules$Sections$Get$request = function(options) {
        var body = $elm$core$Maybe$Nothing;
        return A2(
          $author$project$Instruction$request,
          options.aF,
          $author$project$Api$Request$get(
            {
              H: $author$project$Api$Response$resolveToJson($author$project$Gen$Command$Apps$Modules$Sections$Get$responseDecoder),
              I: options.I,
              E: $author$project$Gen$Command$Apps$Modules$Sections$Get$url(options)
            }
          )
        );
      };
      var $author$project$Gen$Command$Apps$Readme$Get$url = function(options) {
        return $author$project$Api$Url$url(
          {
            dg: options.dg,
            dC: A3(
              $elm$core$String$replace,
              "{SDK_appVersion}",
              $elm$core$String$fromInt(options.d),
              A3(
                $elm$core$String$replace,
                "{SDK_appName}",
                $elm$core$Basics$identity(options.b),
                "/sdk/apps/{SDK_appName}/{SDK_appVersion}/readme"
              )
            ),
            dH: $elm$core$List$concat(
              _List_fromArray(
                [
                  A2($author$project$Api$Url$boolQueryParameter, "all", options.f),
                  A2($author$project$Api$Url$boolQueryParameter, "opensource", options.h)
                ]
              )
            )
          }
        );
      };
      var $author$project$Gen$Command$Apps$Readme$Get$request = function(options) {
        var body = $elm$core$Maybe$Nothing;
        return A2(
          $author$project$Instruction$request,
          options.aF,
          $author$project$Api$Request$get(
            {
              H: $author$project$Api$Response$resolveToString,
              I: options.I,
              E: $author$project$Gen$Command$Apps$Readme$Get$url(options)
            }
          )
        );
      };
      var $author$project$Gen$Command$Apps$Rpc$Get$responseDecoder = A2($elm$json$Json$Decode$at, _List_Nil, $elm$json$Json$Decode$value);
      var $author$project$Gen$Command$Apps$Rpc$Get$url = function(options) {
        return $author$project$Api$Url$url(
          {
            dg: options.dg,
            dC: A3(
              $elm$core$String$replace,
              "{SDK_rpcName}",
              $elm$core$Basics$identity(options.a6),
              A3(
                $elm$core$String$replace,
                "{SDK_appVersion}",
                $elm$core$Basics$identity(options.d),
                A3(
                  $elm$core$String$replace,
                  "{SDK_appName}",
                  $elm$core$Basics$identity(options.b),
                  "/sdk/apps/{SDK_appName}/{SDK_appVersion}/rpcs/{SDK_rpcName}"
                )
              )
            ),
            dH: $elm$core$List$concat(
              _List_fromArray(
                [
                  A2($author$project$Api$Url$boolQueryParameter, "all", options.f),
                  A2($author$project$Api$Url$boolQueryParameter, "opensource", options.h)
                ]
              )
            )
          }
        );
      };
      var $author$project$Gen$Command$Apps$Rpc$Get$request = function(options) {
        var body = $elm$core$Maybe$Nothing;
        return A2(
          $author$project$Instruction$request,
          options.aF,
          $author$project$Api$Request$get(
            {
              H: $author$project$Api$Response$resolveToJson($author$project$Gen$Command$Apps$Rpc$Get$responseDecoder),
              I: options.I,
              E: $author$project$Gen$Command$Apps$Rpc$Get$url(options)
            }
          )
        );
      };
      var $author$project$Gen$Command$Apps$Rpcs$Get$responseDecoder = A2(
        $elm$json$Json$Decode$at,
        _List_fromArray(
          ["appRpcs"]
        ),
        $elm$json$Json$Decode$value
      );
      var $author$project$Gen$Command$Apps$Rpcs$Get$url = function(options) {
        return $author$project$Api$Url$url(
          {
            dg: options.dg,
            dC: A3(
              $elm$core$String$replace,
              "{SDK_appVersion}",
              $elm$core$Basics$identity(options.d),
              A3(
                $elm$core$String$replace,
                "{SDK_appName}",
                $elm$core$Basics$identity(options.b),
                "/sdk/apps/{SDK_appName}/{SDK_appVersion}/rpcs"
              )
            ),
            dH: $elm$core$List$concat(
              _List_fromArray(
                [
                  A2($author$project$Api$Url$boolQueryParameter, "all", options.f),
                  A2($author$project$Api$Url$boolQueryParameter, "opensource", options.h)
                ]
              )
            )
          }
        );
      };
      var $author$project$Gen$Command$Apps$Rpcs$Get$request = function(options) {
        var body = $elm$core$Maybe$Nothing;
        return A2(
          $author$project$Instruction$request,
          options.aF,
          $author$project$Api$Request$get(
            {
              H: $author$project$Api$Response$resolveToJson($author$project$Gen$Command$Apps$Rpcs$Get$responseDecoder),
              I: options.I,
              E: $author$project$Gen$Command$Apps$Rpcs$Get$url(options)
            }
          )
        );
      };
      var $author$project$Gen$Command$Apps$Rpcs$Sections$Get$responseDecoder = A2($elm$json$Json$Decode$at, _List_Nil, $elm$json$Json$Decode$value);
      var $author$project$Gen$Command$Apps$Rpcs$Sections$Get$url = function(options) {
        return $author$project$Api$Url$url(
          {
            dg: options.dg,
            dC: A3(
              $elm$core$String$replace,
              "{SDK_rpcSection}",
              $elm$core$Basics$identity(options.cs),
              A3(
                $elm$core$String$replace,
                "{SDK_rpcName}",
                $elm$core$Basics$identity(options.a6),
                A3(
                  $elm$core$String$replace,
                  "{SDK_appVersion}",
                  $elm$core$Basics$identity(options.d),
                  A3(
                    $elm$core$String$replace,
                    "{SDK_appName}",
                    $elm$core$Basics$identity(options.b),
                    "/sdk/apps/{SDK_appName}/{SDK_appVersion}/rpcs/{SDK_rpcName}/{SDK_rpcSection}"
                  )
                )
              )
            ),
            dH: $elm$core$List$concat(
              _List_fromArray(
                [
                  A2($author$project$Api$Url$boolQueryParameter, "all", options.f),
                  A2($author$project$Api$Url$boolQueryParameter, "opensource", options.h)
                ]
              )
            )
          }
        );
      };
      var $author$project$Gen$Command$Apps$Rpcs$Sections$Get$request = function(options) {
        var body = $elm$core$Maybe$Nothing;
        return A2(
          $author$project$Instruction$request,
          options.aF,
          $author$project$Api$Request$get(
            {
              H: $author$project$Api$Response$resolveToJson($author$project$Gen$Command$Apps$Rpcs$Sections$Get$responseDecoder),
              I: options.I,
              E: $author$project$Gen$Command$Apps$Rpcs$Sections$Get$url(options)
            }
          )
        );
      };
      var $author$project$Gen$Command$Apps$Sections$Get$responseDecoder = A2($elm$json$Json$Decode$at, _List_Nil, $elm$json$Json$Decode$value);
      var $author$project$Gen$Command$Apps$Sections$Get$url = function(options) {
        return $author$project$Api$Url$url(
          {
            dg: options.dg,
            dC: A3(
              $elm$core$String$replace,
              "{SDK_appSection}",
              $elm$core$Basics$identity(options.dN),
              A3(
                $elm$core$String$replace,
                "{SDK_appVersion}",
                $elm$core$String$fromInt(options.d),
                A3(
                  $elm$core$String$replace,
                  "{SDK_appName}",
                  $elm$core$Basics$identity(options.b),
                  "/sdk/apps/{SDK_appName}/{SDK_appVersion}/{SDK_appSection}"
                )
              )
            ),
            dH: $elm$core$List$concat(
              _List_fromArray(
                [
                  A2($author$project$Api$Url$boolQueryParameter, "all", options.f),
                  A2($author$project$Api$Url$boolQueryParameter, "opensource", options.h)
                ]
              )
            )
          }
        );
      };
      var $author$project$Gen$Command$Apps$Sections$Get$request = function(options) {
        var body = $elm$core$Maybe$Nothing;
        return A2(
          $author$project$Instruction$request,
          options.aF,
          $author$project$Api$Request$get(
            {
              H: $author$project$Api$Response$resolveToJson($author$project$Gen$Command$Apps$Sections$Get$responseDecoder),
              I: options.I,
              E: $author$project$Gen$Command$Apps$Sections$Get$url(options)
            }
          )
        );
      };
      var $author$project$Gen$Command$Apps$Webhook$List$responseDecoder = A2($elm$json$Json$Decode$at, _List_Nil, $elm$json$Json$Decode$value);
      var $author$project$Gen$Command$Apps$Webhook$List$url = function(options) {
        return $author$project$Api$Url$url(
          {
            dg: options.dg,
            dC: A3(
              $elm$core$String$replace,
              "{SDK_webhookName}",
              $elm$core$Basics$identity(options.ct),
              "/sdk/apps/webhooks/{SDK_webhookName}"
            ),
            dH: $elm$core$List$concat(
              _List_fromArray(
                [
                  A2($author$project$Api$Url$boolQueryParameter, "all", options.f),
                  A2($author$project$Api$Url$boolQueryParameter, "opensource", options.h)
                ]
              )
            )
          }
        );
      };
      var $author$project$Gen$Command$Apps$Webhook$List$request = function(options) {
        var body = $elm$core$Maybe$Nothing;
        return A2(
          $author$project$Instruction$request,
          options.aF,
          $author$project$Api$Request$get(
            {
              H: $author$project$Api$Response$resolveToJson($author$project$Gen$Command$Apps$Webhook$List$responseDecoder),
              I: options.I,
              E: $author$project$Gen$Command$Apps$Webhook$List$url(options)
            }
          )
        );
      };
      var $author$project$Gen$Command$Apps$Webhooks$List$responseDecoder = A2(
        $elm$json$Json$Decode$at,
        _List_fromArray(
          ["appWebhooks"]
        ),
        $elm$json$Json$Decode$value
      );
      var $author$project$Gen$Command$Apps$Webhooks$List$url = function(options) {
        return $author$project$Api$Url$url(
          {
            dg: options.dg,
            dC: A3(
              $elm$core$String$replace,
              "{SDK_appName}",
              $elm$core$Basics$identity(options.b),
              "/sdk/apps/{SDK_appName}/webhooks"
            ),
            dH: $elm$core$List$concat(
              _List_fromArray(
                [
                  A2($author$project$Api$Url$boolQueryParameter, "all", options.f),
                  A2($author$project$Api$Url$boolQueryParameter, "opensource", options.h)
                ]
              )
            )
          }
        );
      };
      var $author$project$Gen$Command$Apps$Webhooks$List$request = function(options) {
        var body = $elm$core$Maybe$Nothing;
        return A2(
          $author$project$Instruction$request,
          options.aF,
          $author$project$Api$Request$get(
            {
              H: $author$project$Api$Response$resolveToJson($author$project$Gen$Command$Apps$Webhooks$List$responseDecoder),
              I: options.I,
              E: $author$project$Gen$Command$Apps$Webhooks$List$url(options)
            }
          )
        );
      };
      var $author$project$Gen$Command$Apps$Webhooks$Sections$Get$responseDecoder = A2($elm$json$Json$Decode$at, _List_Nil, $elm$json$Json$Decode$value);
      var $author$project$Api$Url$stringQueryParameter = F2(
        function(key, value) {
          if (!value.$) {
            var v = value.a;
            return _List_fromArray(
              [
                A2($elm$url$Url$Builder$string, key, v)
              ]
            );
          } else {
            return _List_Nil;
          }
        }
      );
      var $author$project$Gen$Command$Apps$Webhooks$Sections$Get$url = function(options) {
        return $author$project$Api$Url$url(
          {
            dg: options.dg,
            dC: A3(
              $elm$core$String$replace,
              "{SDK_webhookSection}",
              $elm$core$Basics$identity(options.dR),
              A3(
                $elm$core$String$replace,
                "{SDK_webhookName}",
                $elm$core$Basics$identity(options.ct),
                "/sdk/apps/webhooks/{SDK_webhookName}/{SDK_webhookSection}"
              )
            ),
            dH: $elm$core$List$concat(
              _List_fromArray(
                [
                  A2($author$project$Api$Url$boolQueryParameter, "all", options.f),
                  A2($author$project$Api$Url$boolQueryParameter, "opensource", options.h),
                  A2($author$project$Api$Url$stringQueryParameter, "api", options.c2)
                ]
              )
            )
          }
        );
      };
      var $author$project$Gen$Command$Apps$Webhooks$Sections$Get$request = function(options) {
        var body = $elm$core$Maybe$Nothing;
        return A2(
          $author$project$Instruction$request,
          options.aF,
          $author$project$Api$Request$get(
            {
              H: $author$project$Api$Response$resolveToJson($author$project$Gen$Command$Apps$Webhooks$Sections$Get$responseDecoder),
              I: options.I,
              E: $author$project$Gen$Command$Apps$Webhooks$Sections$Get$url(options)
            }
          )
        );
      };
      var $NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required = F3(
        function(key, valDecoder, decoder) {
          return A2(
            $NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$custom,
            A2($elm$json$Json$Decode$field, key, valDecoder),
            decoder
          );
        }
      );
      var $elm_community$result_extra$Result$Extra$unpack = F3(
        function(errFunc, okFunc, result) {
          if (!result.$) {
            var ok = result.a;
            return okFunc(ok);
          } else {
            var err = result.a;
            return errFunc(err);
          }
        }
      );
      var $author$project$Content$JsonValue = function(a) {
        return { $: 3, a };
      };
      var $author$project$Output$jsonValue = $author$project$Content$JsonValue;
      var $author$project$Output$File = F2(
        function(a, b) {
          return { $: 2, a, b };
        }
      );
      var $author$project$Output$toFile = F2(
        function(filePath, content) {
          return $elm$core$Task$succeed(
            A2($author$project$Output$File, filePath, content)
          );
        }
      );
      var $author$project$FileSystem$writeJsonFile = F2(
        function(filePath, value) {
          return A2(
            $elm$core$Task$map,
            $author$project$Instruction$Output,
            A2(
              $author$project$Output$toFile,
              filePath,
              $author$project$Output$jsonValue(value)
            )
          );
        }
      );
      var $author$project$Custom$Command$Apps$Pull$run = F2(
        function(options, config) {
          return $author$project$Instruction$sequence(
            _List_fromArray(
              [
                $author$project$Instruction$sequence(
                  _List_fromArray(
                    [
                      $author$project$Instruction$log("Get Metadata"),
                      $author$project$Gen$Command$Apps$Metadata$Get$request(
                        {
                          f: true,
                          dg: options.dg,
                          h: false,
                          aF: $elm$core$Maybe$Just(
                            A2($elm$core$Maybe$withDefault, "", options.aF) + "metadata.json"
                          ),
                          b: options.b,
                          d: options.d,
                          I: options.I
                        }
                      )
                    ]
                  )
                ),
                $author$project$Instruction$sequence(
                  _List_fromArray(
                    [
                      $author$project$Instruction$log("Get Base"),
                      $author$project$Gen$Command$Apps$Sections$Get$request(
                        {
                          f: true,
                          dg: options.dg,
                          h: false,
                          aF: $elm$core$Maybe$Just(
                            A2($elm$core$Maybe$withDefault, "", options.aF) + "base.imljson"
                          ),
                          b: options.b,
                          dN: "base",
                          d: options.d,
                          I: options.I
                        }
                      )
                    ]
                  )
                ),
                $author$project$Instruction$sequence(
                  _List_fromArray(
                    [
                      $author$project$Instruction$log("Get Readme"),
                      $author$project$Gen$Command$Apps$Readme$Get$request(
                        {
                          f: true,
                          dg: options.dg,
                          h: false,
                          aF: $elm$core$Maybe$Just(
                            A2($elm$core$Maybe$withDefault, "", options.aF) + "readme.md"
                          ),
                          b: options.b,
                          d: options.d,
                          I: options.I
                        }
                      )
                    ]
                  )
                ),
                $author$project$Instruction$sequence(
                  _List_fromArray(
                    [
                      $author$project$Instruction$log("Get Connections"),
                      A2(
                        $author$project$Instruction$andThen,
                        A2(
                          $elm$core$Basics$composeR,
                          $author$project$Instruction$decodeInput(
                            $elm$json$Json$Decode$list($elm$json$Json$Decode$value)
                          ),
                          $author$project$Instruction$forEach(
                            function(connection) {
                              var _v0 = A2(
                                $elm$json$Json$Decode$decodeValue,
                                A2($elm$json$Json$Decode$field, "name", $elm$json$Json$Decode$string),
                                connection
                              );
                              if (_v0.$ === 1) {
                                var e = _v0.a;
                                return $author$project$Instruction$fail(
                                  $elm$json$Json$Decode$errorToString(e)
                                );
                              } else {
                                var connectionName = _v0.a;
                                return $author$project$Instruction$sequence(
                                  _Utils_ap(
                                    _List_fromArray(
                                      [
                                        A2(
                                          $author$project$FileSystem$writeJsonFile,
                                          A2($elm$core$Maybe$withDefault, "", options.aF) + ("connections/" + (connectionName + "/metadata.json")),
                                          connection
                                        )
                                      ]
                                    ),
                                    A2(
                                      $elm$core$List$map,
                                      function(section) {
                                        return $author$project$Gen$Command$Apps$Connections$Sections$Get$request(
                                          {
                                            f: true,
                                            dg: options.dg,
                                            h: false,
                                            aF: $elm$core$Maybe$Just(
                                              A2($elm$core$Maybe$withDefault, "", options.aF) + ("connections/" + (connectionName + ("/" + (section + ".imljson"))))
                                            ),
                                            dO: connectionName,
                                            dP: section,
                                            I: options.I
                                          }
                                        );
                                      },
                                      _List_fromArray(
                                        ["api", "scope", "scopes", "parameters"]
                                      )
                                    )
                                  )
                                );
                              }
                            }
                          )
                        ),
                        $author$project$Gen$Command$Apps$Connections$List$request(
                          { f: true, dg: options.dg, h: false, aF: $elm$core$Maybe$Nothing, b: options.b, I: options.I }
                        )
                      )
                    ]
                  )
                ),
                $author$project$Instruction$sequence(
                  _List_fromArray(
                    [
                      $author$project$Instruction$log("Get RPCs"),
                      A2(
                        $author$project$Instruction$andThen,
                        A2(
                          $elm$core$Basics$composeR,
                          $author$project$Instruction$decodeInput(
                            $elm$json$Json$Decode$list($elm$json$Json$Decode$value)
                          ),
                          $author$project$Instruction$forEach(
                            function(rpc) {
                              var _v1 = A2(
                                $elm$json$Json$Decode$decodeValue,
                                A2($elm$json$Json$Decode$field, "name", $elm$json$Json$Decode$string),
                                rpc
                              );
                              if (_v1.$ === 1) {
                                var e = _v1.a;
                                return $author$project$Instruction$fail(
                                  $elm$json$Json$Decode$errorToString(e)
                                );
                              } else {
                                var rpcName = _v1.a;
                                return $author$project$Instruction$sequence(
                                  _List_fromArray(
                                    [
                                      $author$project$Gen$Command$Apps$Rpc$Get$request(
                                        {
                                          f: true,
                                          dg: options.dg,
                                          h: false,
                                          aF: $elm$core$Maybe$Just(
                                            A2($elm$core$Maybe$withDefault, "", options.aF) + ("rpcs/" + (rpcName + "/metadata.json"))
                                          ),
                                          b: options.b,
                                          d: $elm$core$String$fromInt(options.d),
                                          a6: rpcName,
                                          I: options.I
                                        }
                                      ),
                                      $author$project$Gen$Command$Apps$Rpcs$Sections$Get$request(
                                        {
                                          f: true,
                                          dg: options.dg,
                                          h: false,
                                          aF: $elm$core$Maybe$Just(
                                            A2($elm$core$Maybe$withDefault, "", options.aF) + ("rpcs/" + (rpcName + "/api.imljson"))
                                          ),
                                          b: options.b,
                                          d: $elm$core$String$fromInt(options.d),
                                          a6: rpcName,
                                          cs: "api",
                                          I: options.I
                                        }
                                      ),
                                      $author$project$Gen$Command$Apps$Rpcs$Sections$Get$request(
                                        {
                                          f: true,
                                          dg: options.dg,
                                          h: false,
                                          aF: $elm$core$Maybe$Just(
                                            A2($elm$core$Maybe$withDefault, "", options.aF) + ("rpcs/" + (rpcName + "/parameters.imljson"))
                                          ),
                                          b: options.b,
                                          d: $elm$core$String$fromInt(options.d),
                                          a6: rpcName,
                                          cs: "parameters",
                                          I: options.I
                                        }
                                      )
                                    ]
                                  )
                                );
                              }
                            }
                          )
                        ),
                        $author$project$Gen$Command$Apps$Rpcs$Get$request(
                          {
                            f: true,
                            dg: options.dg,
                            h: false,
                            aF: $elm$core$Maybe$Nothing,
                            b: options.b,
                            d: $elm$core$String$fromInt(options.d),
                            I: options.I
                          }
                        )
                      )
                    ]
                  )
                ),
                $author$project$Instruction$sequence(
                  _List_fromArray(
                    [
                      $author$project$Instruction$log("Get Webhooks"),
                      A2(
                        $author$project$Instruction$andThen,
                        A2(
                          $elm$core$Basics$composeR,
                          $author$project$Instruction$decodeInput(
                            $elm$json$Json$Decode$list($elm$json$Json$Decode$value)
                          ),
                          $author$project$Instruction$forEach(
                            function(webhook) {
                              var _v2 = A2(
                                $elm$json$Json$Decode$decodeValue,
                                A2($elm$json$Json$Decode$field, "name", $elm$json$Json$Decode$string),
                                webhook
                              );
                              if (_v2.$ === 1) {
                                var e = _v2.a;
                                return $author$project$Instruction$fail(
                                  $elm$json$Json$Decode$errorToString(e)
                                );
                              } else {
                                var webhookName = _v2.a;
                                return $author$project$Instruction$sequence(
                                  A2(
                                    $elm$core$List$cons,
                                    $author$project$Gen$Command$Apps$Webhook$List$request(
                                      {
                                        f: true,
                                        dg: options.dg,
                                        h: false,
                                        aF: $elm$core$Maybe$Just(
                                          A2($elm$core$Maybe$withDefault, "", options.aF) + ("webhooks/" + (webhookName + "/metadata.json"))
                                        ),
                                        ct: webhookName,
                                        I: options.I
                                      }
                                    ),
                                    A2(
                                      $elm$core$List$map,
                                      function(section) {
                                        return $author$project$Gen$Command$Apps$Webhooks$Sections$Get$request(
                                          {
                                            f: true,
                                            c2: $elm$core$Maybe$Nothing,
                                            dg: options.dg,
                                            h: false,
                                            aF: $elm$core$Maybe$Just(
                                              A2($elm$core$Maybe$withDefault, "", options.aF) + ("webhooks/" + (webhookName + ("/" + (section + ".imljson"))))
                                            ),
                                            ct: webhookName,
                                            dR: section,
                                            I: options.I
                                          }
                                        );
                                      },
                                      _List_fromArray(
                                        ["api", "parameters", "attach", "detach", "scope"]
                                      )
                                    )
                                  )
                                );
                              }
                            }
                          )
                        ),
                        $author$project$Gen$Command$Apps$Webhooks$List$request(
                          { f: true, dg: options.dg, h: false, aF: $elm$core$Maybe$Nothing, b: options.b, I: options.I }
                        )
                      )
                    ]
                  )
                ),
                $author$project$Instruction$sequence(
                  _List_fromArray(
                    [
                      $author$project$Instruction$log("Get Modules"),
                      A2(
                        $author$project$Instruction$andThen,
                        A2(
                          $elm$core$Basics$composeR,
                          $author$project$Instruction$decodeInput(
                            $elm$json$Json$Decode$list($elm$json$Json$Decode$value)
                          ),
                          $author$project$Instruction$forEach(
                            function(module_) {
                              var _v3 = A2(
                                $elm$json$Json$Decode$decodeValue,
                                A2($elm$json$Json$Decode$field, "name", $elm$json$Json$Decode$string),
                                module_
                              );
                              if (_v3.$ === 1) {
                                var e = _v3.a;
                                return $author$project$Instruction$fail(
                                  $elm$json$Json$Decode$errorToString(e)
                                );
                              } else {
                                var moduleName = _v3.a;
                                var appModuleDecoder = A4(
                                  $NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$optional,
                                  "webhook",
                                  $elm$json$Json$Decode$nullable($elm$json$Json$Decode$string),
                                  $elm$core$Maybe$Nothing,
                                  A4(
                                    $NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$optional,
                                    "connection",
                                    $elm$json$Json$Decode$nullable($elm$json$Json$Decode$string),
                                    $elm$core$Maybe$Nothing,
                                    A3(
                                      $NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
                                      "typeId",
                                      $elm$json$Json$Decode$int,
                                      A3(
                                        $NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
                                        "description",
                                        $elm$json$Json$Decode$string,
                                        A3(
                                          $NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
                                          "label",
                                          $elm$json$Json$Decode$string,
                                          A3(
                                            $NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
                                            "name",
                                            $elm$json$Json$Decode$string,
                                            $elm$json$Json$Decode$succeed($author$project$Custom$Command$Apps$Pull$AppModule)
                                          )
                                        )
                                      )
                                    )
                                  )
                                );
                                return $author$project$Instruction$sequence(
                                  A2(
                                    $elm$core$List$cons,
                                    A2(
                                      $author$project$Instruction$andThen,
                                      A2(
                                        $elm$core$Basics$composeR,
                                        $author$project$Instruction$decodeInput(appModuleDecoder),
                                        A2(
                                          $elm_community$result_extra$Result$Extra$unpack,
                                          $author$project$Instruction$fail,
                                          function(appModule) {
                                            var moduleType = function() {
                                              var _v4 = appModule.cN;
                                              switch (_v4) {
                                                case 1:
                                                  return $elm$core$Maybe$Just("trigger");
                                                case 4:
                                                  return $elm$core$Maybe$Just("action");
                                                case 9:
                                                  return $elm$core$Maybe$Just("search");
                                                case 10:
                                                  return $elm$core$Maybe$Just("instant_trigger");
                                                case 11:
                                                  return $elm$core$Maybe$Just("responder");
                                                case 12:
                                                  return $elm$core$Maybe$Just("universal");
                                                default:
                                                  return $elm$core$Maybe$Nothing;
                                              }
                                            }();
                                            var metadata = $elm$json$Json$Encode$object(
                                              _List_fromArray(
                                                [
                                                  _Utils_Tuple2(
                                                    "name",
                                                    $elm$json$Json$Encode$string(appModule.b3)
                                                  ),
                                                  _Utils_Tuple2(
                                                    "label",
                                                    $elm$json$Json$Encode$string(appModule.bU)
                                                  ),
                                                  _Utils_Tuple2(
                                                    "description",
                                                    $elm$json$Json$Encode$string(appModule.bv)
                                                  ),
                                                  _Utils_Tuple2(
                                                    "type",
                                                    A2(
                                                      $elm$core$Maybe$withDefault,
                                                      $elm$json$Json$Encode$null,
                                                      A2($elm$core$Maybe$map, $elm$json$Json$Encode$string, moduleType)
                                                    )
                                                  ),
                                                  _Utils_Tuple2(
                                                    "connection",
                                                    A2(
                                                      $elm$core$Maybe$withDefault,
                                                      $elm$json$Json$Encode$null,
                                                      A2($elm$core$Maybe$map, $elm$json$Json$Encode$string, appModule.bp)
                                                    )
                                                  ),
                                                  _Utils_Tuple2(
                                                    "webhook",
                                                    A2(
                                                      $elm$core$Maybe$withDefault,
                                                      $elm$json$Json$Encode$null,
                                                      A2($elm$core$Maybe$map, $elm$json$Json$Encode$string, appModule.cT)
                                                    )
                                                  )
                                                ]
                                              )
                                            );
                                            return A2(
                                              $author$project$FileSystem$writeJsonFile,
                                              A2($elm$core$Maybe$withDefault, "", options.aF) + ("modules/" + (moduleName + "/metadata.json")),
                                              metadata
                                            );
                                          }
                                        )
                                      ),
                                      $author$project$Gen$Command$Apps$Module$Get$request(
                                        {
                                          f: true,
                                          dg: options.dg,
                                          h: false,
                                          aF: $elm$core$Maybe$Nothing,
                                          b: options.b,
                                          d: $elm$core$String$fromInt(options.d),
                                          cr: moduleName,
                                          I: options.I
                                        }
                                      )
                                    ),
                                    function() {
                                      var getAppModuleSections = $elm$core$List$map(
                                        function(section) {
                                          return $author$project$Gen$Command$Apps$Modules$Sections$Get$request(
                                            {
                                              f: true,
                                              dg: options.dg,
                                              h: false,
                                              aF: $elm$core$Maybe$Just(
                                                A2($elm$core$Maybe$withDefault, "", options.aF) + ("modules/" + (moduleName + ("/" + (section + ".imljson"))))
                                              ),
                                              b: options.b,
                                              d: $elm$core$String$fromInt(options.d),
                                              cr: moduleName,
                                              dQ: section,
                                              I: options.I
                                            }
                                          );
                                        }
                                      );
                                      var _v5 = A2(
                                        $elm$json$Json$Decode$decodeValue,
                                        A2($elm$json$Json$Decode$field, "typeId", $elm$json$Json$Decode$int),
                                        module_
                                      );
                                      _v5$6:
                                        while (true) {
                                          if (!_v5.$) {
                                            switch (_v5.a) {
                                              case 4:
                                                return getAppModuleSections(
                                                  _List_fromArray(
                                                    ["api", "parameters", "expect", "interface", "samples", "scope"]
                                                  )
                                                );
                                              case 9:
                                                return getAppModuleSections(
                                                  _List_fromArray(
                                                    ["api", "parameters", "expect", "interface", "samples", "scope"]
                                                  )
                                                );
                                              case 12:
                                                return getAppModuleSections(
                                                  _List_fromArray(
                                                    ["api", "parameters", "expect", "interface", "samples", "scope"]
                                                  )
                                                );
                                              case 1:
                                                return getAppModuleSections(
                                                  _List_fromArray(
                                                    ["api", "epoch", "parameters", "interface", "samples", "scope"]
                                                  )
                                                );
                                              case 10:
                                                return getAppModuleSections(
                                                  _List_fromArray(
                                                    ["api", "parameters", "interface", "samples"]
                                                  )
                                                );
                                              case 11:
                                                return getAppModuleSections(
                                                  _List_fromArray(
                                                    ["api", "parameters", "expect"]
                                                  )
                                                );
                                              default:
                                                break _v5$6;
                                            }
                                          } else {
                                            break _v5$6;
                                          }
                                        }
                                      return _List_Nil;
                                    }()
                                  )
                                );
                              }
                            }
                          )
                        ),
                        $author$project$Gen$Command$Apps$Modules$Get$request(
                          {
                            f: true,
                            dg: options.dg,
                            h: false,
                            aF: $elm$core$Maybe$Nothing,
                            b: options.b,
                            d: $elm$core$String$fromInt(options.d),
                            I: options.I
                          }
                        )
                      )
                    ]
                  )
                ),
                $author$project$Instruction$sequence(
                  _List_fromArray(
                    [
                      $author$project$Instruction$log("Get Functions"),
                      A2(
                        $author$project$Instruction$andThen,
                        A2(
                          $elm$core$Basics$composeR,
                          $author$project$Instruction$decodeInput(
                            $elm$json$Json$Decode$list($elm$json$Json$Decode$value)
                          ),
                          $author$project$Instruction$forEach(
                            function(_function) {
                              var _v6 = A2(
                                $elm$json$Json$Decode$decodeValue,
                                A2($elm$json$Json$Decode$field, "name", $elm$json$Json$Decode$string),
                                _function
                              );
                              if (_v6.$ === 1) {
                                var e = _v6.a;
                                return $author$project$Instruction$fail(
                                  $elm$json$Json$Decode$errorToString(e)
                                );
                              } else {
                                var functionName = _v6.a;
                                return $author$project$Instruction$sequence(
                                  _List_fromArray(
                                    [
                                      $author$project$Gen$Command$Apps$Functions$Code$Get$request(
                                        {
                                          f: true,
                                          dg: options.dg,
                                          h: false,
                                          aF: $elm$core$Maybe$Just(
                                            A2($elm$core$Maybe$withDefault, "", options.aF) + ("functions/" + (functionName + "/code.js"))
                                          ),
                                          b: options.b,
                                          d: $elm$core$String$fromInt(options.d),
                                          cq: functionName,
                                          I: options.I
                                        }
                                      ),
                                      $author$project$Gen$Command$Apps$Functions$Test$Get$request(
                                        {
                                          f: true,
                                          dg: options.dg,
                                          h: false,
                                          aF: $elm$core$Maybe$Just(
                                            A2($elm$core$Maybe$withDefault, "", options.aF) + ("functions/" + (functionName + "/test.js"))
                                          ),
                                          b: options.b,
                                          d: $elm$core$String$fromInt(options.d),
                                          cq: functionName,
                                          I: options.I
                                        }
                                      )
                                    ]
                                  )
                                );
                              }
                            }
                          )
                        ),
                        $author$project$Gen$Command$Apps$Functions$Get$request(
                          {
                            f: true,
                            dg: options.dg,
                            h: false,
                            aF: $elm$core$Maybe$Nothing,
                            b: options.b,
                            d: $elm$core$String$fromInt(options.d),
                            I: options.I
                          }
                        )
                      )
                    ]
                  )
                ),
                $author$project$Instruction$sequence(
                  _List_fromArray(
                    [
                      $author$project$Instruction$log("Get Icon"),
                      $author$project$Gen$Command$Apps$Icon$Get$request(
                        {
                          f: true,
                          dg: options.dg,
                          h: false,
                          aF: $elm$core$Maybe$Just(
                            A2($elm$core$Maybe$withDefault, "", options.aF) + "assets/icon.png"
                          ),
                          dM: "512",
                          b: options.b,
                          d: $elm$core$String$fromInt(options.d),
                          I: options.I
                        }
                      )
                    ]
                  )
                ),
                $author$project$Instruction$sequence(
                  _List_fromArray(
                    [
                      $author$project$Instruction$log("Write Metadata Version"),
                      A2(
                        $author$project$FileSystem$writeJsonFile,
                        A2($elm$core$Maybe$withDefault, "", options.aF) + ".sdk",
                        $elm$json$Json$Encode$object(
                          _List_fromArray(
                            [
                              _Utils_Tuple2(
                                "version",
                                $elm$json$Json$Encode$int(2)
                              )
                            ]
                          )
                        )
                      )
                    ]
                  )
                )
              ]
            )
          );
        }
      );
      var $author$project$Custom$Command$Apps$Push$API = F6(
        function(url, method, qs, body, headers, response) {
          return { F: body, dk: headers, Y: method, ag: qs, ah: response, E: url };
        }
      );
      var $author$project$Custom$Command$Apps$Push$apiDecoder = A4(
        $NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$optional,
        "response",
        $elm$json$Json$Decode$nullable($elm$json$Json$Decode$value),
        $elm$core$Maybe$Nothing,
        A4(
          $NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$optional,
          "headers",
          $elm$json$Json$Decode$nullable($elm$json$Json$Decode$value),
          $elm$core$Maybe$Nothing,
          A4(
            $NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$optional,
            "body",
            $elm$json$Json$Decode$nullable($elm$json$Json$Decode$value),
            $elm$core$Maybe$Nothing,
            A4(
              $NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$optional,
              "qs",
              $elm$json$Json$Decode$nullable($elm$json$Json$Decode$value),
              $elm$core$Maybe$Nothing,
              A4(
                $NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$optional,
                "method",
                $elm$json$Json$Decode$nullable($elm$json$Json$Decode$string),
                $elm$core$Maybe$Nothing,
                A4(
                  $NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$optional,
                  "url",
                  $elm$json$Json$Decode$nullable($elm$json$Json$Decode$string),
                  $elm$core$Maybe$Nothing,
                  $elm$json$Json$Decode$succeed($author$project$Custom$Command$Apps$Push$API)
                )
              )
            )
          )
        )
      );
      var $author$project$Custom$Command$Apps$Push$AppModule = F6(
        function(name, label, description, type_, connection, webhook) {
          return { bp: connection, bv: description, bU: label, b3: name, d0: type_, cT: webhook };
        }
      );
      var $author$project$Custom$Command$Apps$Push$appModuleDecoder = A4(
        $NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$optional,
        "webhook",
        $elm$json$Json$Decode$nullable($elm$json$Json$Decode$string),
        $elm$core$Maybe$Nothing,
        A4(
          $NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$optional,
          "connection",
          $elm$json$Json$Decode$nullable($elm$json$Json$Decode$string),
          $elm$core$Maybe$Nothing,
          A3(
            $NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
            "type",
            $elm$json$Json$Decode$string,
            A3(
              $NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
              "description",
              $elm$json$Json$Decode$nullable($elm$json$Json$Decode$string),
              A3(
                $NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
                "label",
                $elm$json$Json$Decode$nullable($elm$json$Json$Decode$string),
                A3(
                  $NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
                  "name",
                  $elm$json$Json$Decode$string,
                  $elm$json$Json$Decode$succeed($author$project$Custom$Command$Apps$Push$AppModule)
                )
              )
            )
          )
        )
      );
      var $elm$json$Json$Encode$bool = _Json_wrap;
      var $elm$json$Json$Encode$list = F2(
        function(func, entries) {
          return _Json_wrap(
            A3(
              $elm$core$List$foldl,
              _Json_addEntry(func),
              _Json_emptyArray(0),
              entries
            )
          );
        }
      );
      var $author$project$Custom$Command$Apps$Push$encodeMetadata = function(metadata) {
        return $author$project$Api$Body$applicationJson(
          $elm$json$Json$Encode$object(
            _List_fromArray(
              [
                _Utils_Tuple2(
                  "label",
                  $elm$json$Json$Encode$string(metadata.bU)
                ),
                _Utils_Tuple2(
                  "description",
                  $elm$json$Json$Encode$string(metadata.bv)
                ),
                _Utils_Tuple2(
                  "theme",
                  $elm$json$Json$Encode$string(metadata.cJ)
                ),
                _Utils_Tuple2(
                  "language",
                  $elm$json$Json$Encode$string(metadata.bV)
                ),
                _Utils_Tuple2(
                  "global",
                  $elm$json$Json$Encode$bool(metadata.bI)
                ),
                _Utils_Tuple2(
                  "countries",
                  A2($elm$json$Json$Encode$list, $elm$json$Json$Encode$string, metadata.bq)
                )
              ]
            )
          )
        );
      };
      var $author$project$Content$FileContent = function(a) {
        return { $: 1, a };
      };
      var $author$project$Content$fromFile = $author$project$Content$FileContent;
      var $author$project$FileSystem$read = F3(
        function(command, resolver, path2) {
          return A2(
            $elm$core$Task$map,
            $author$project$Instruction$Input,
            A2(
              $elm$core$Task$map,
              $author$project$Content$fromFile,
              A2(
                $elm$core$Task$mapError,
                $author$project$Api$Response$httpErrorToString,
                $elm$http$Http$task(
                  {
                    F: $elm$http$Http$jsonBody(
                      $elm$json$Json$Encode$string(path2)
                    ),
                    dk: _List_Nil,
                    Y: "FS",
                    dJ: resolver,
                    dZ: $elm$core$Maybe$Nothing,
                    E: command
                  }
                )
              )
            )
          );
        }
      );
      var $author$project$FileSystem$resolveToJson = function(decoder) {
        return $elm$http$Http$stringResolver(
          $author$project$Api$Response$resolveString(
            function(_v0) {
              var body = _v0.b;
              return A2(
                $elm$core$Result$map,
                $author$project$Api$Body$applicationJson,
                A2(
                  $elm$core$Result$mapError,
                  $elm$json$Json$Decode$errorToString,
                  A2($elm$json$Json$Decode$decodeString, decoder, body)
                )
              );
            }
          )
        );
      };
      var $author$project$FileSystem$listDirectories = function(directoryPath) {
        return A3(
          $author$project$FileSystem$read,
          "listDirectories",
          $author$project$FileSystem$resolveToJson($elm$json$Json$Decode$value),
          directoryPath
        );
      };
      var $elm$json$Json$Decode$maybe = function(decoder) {
        return $elm$json$Json$Decode$oneOf(
          _List_fromArray(
            [
              A2($elm$json$Json$Decode$map, $elm$core$Maybe$Just, decoder),
              $elm$json$Json$Decode$succeed($elm$core$Maybe$Nothing)
            ]
          )
        );
      };
      var $author$project$Custom$Command$Apps$Push$Metadata = F8(
        function(name, version, label, description, theme, language, global2, countries) {
          return { bq: countries, bv: description, bI: global2, bU: label, bV: language, b3: name, cJ: theme, z: version };
        }
      );
      var $elm$json$Json$Decode$bool = _Json_decodeBool;
      var $author$project$Custom$Command$Apps$Push$metadataDecoder = A4(
        $NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$optional,
        "countries",
        $elm$json$Json$Decode$list($elm$json$Json$Decode$string),
        _List_Nil,
        A3(
          $NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
          "global",
          $elm$json$Json$Decode$bool,
          A3(
            $NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
            "language",
            $elm$json$Json$Decode$string,
            A3(
              $NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
              "theme",
              $elm$json$Json$Decode$string,
              A4(
                $NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$optional,
                "description",
                $elm$json$Json$Decode$string,
                "",
                A3(
                  $NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
                  "label",
                  $elm$json$Json$Decode$string,
                  A3(
                    $NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
                    "version",
                    $elm$json$Json$Decode$int,
                    A3(
                      $NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
                      "name",
                      $elm$json$Json$Decode$string,
                      $elm$json$Json$Decode$succeed($author$project$Custom$Command$Apps$Push$Metadata)
                    )
                  )
                )
              )
            )
          )
        )
      );
      var $author$project$FileSystem$resolveToImagePng = $elm$http$Http$stringResolver(
        $author$project$Api$Response$resolveString(
          function(_v0) {
            var body = _v0.b;
            return A2(
              $elm$core$Result$map,
              $author$project$Api$Body$imagePng,
              A2(
                $elm$core$Result$fromMaybe,
                "Could not decode Base64 string.",
                $danfishgold$base64_bytes$Base64$toBytes(body)
              )
            );
          }
        )
      );
      var $author$project$FileSystem$readImagePngFile = function(filePath) {
        return A3($author$project$FileSystem$read, "readBinaryFile", $author$project$FileSystem$resolveToImagePng, filePath);
      };
      var $author$project$Api$Body$ApplicationJavaScript = function(a) {
        return { $: 2, a };
      };
      var $author$project$Api$Body$applicationJavaScript = function(text) {
        return $author$project$Api$Body$ApplicationJavaScript(text);
      };
      var $author$project$FileSystem$resolveToJavaScript = $elm$http$Http$stringResolver(
        $author$project$Api$Response$resolveString(
          function(_v0) {
            var body = _v0.b;
            return $elm$core$Result$Ok(
              $author$project$Api$Body$applicationJavaScript(body)
            );
          }
        )
      );
      var $author$project$FileSystem$readJavaScriptFile = function(filePath) {
        return A3($author$project$FileSystem$read, "readFile", $author$project$FileSystem$resolveToJavaScript, filePath);
      };
      var $author$project$FileSystem$readJsonFile = function(filePath) {
        return A3(
          $author$project$FileSystem$read,
          "readFile",
          $author$project$FileSystem$resolveToJson($elm$json$Json$Decode$value),
          filePath
        );
      };
      var $author$project$Api$Body$TextMarkdown = function(a) {
        return { $: 1, a };
      };
      var $author$project$Api$Body$textMarkdown = function(text) {
        return $author$project$Api$Body$TextMarkdown(text);
      };
      var $author$project$FileSystem$resolveToMarkdown = $elm$http$Http$stringResolver(
        $author$project$Api$Response$resolveString(
          function(_v0) {
            var body = _v0.b;
            return $elm$core$Result$Ok(
              $author$project$Api$Body$textMarkdown(body)
            );
          }
        )
      );
      var $author$project$FileSystem$readMarkdownFile = function(filePath) {
        return A3($author$project$FileSystem$read, "readFile", $author$project$FileSystem$resolveToMarkdown, filePath);
      };
      var $elm_community$json_extra$Json$Encode$Extra$maybe = function(encoder) {
        return A2(
          $elm$core$Basics$composeR,
          $elm$core$Maybe$map(encoder),
          $elm$core$Maybe$withDefault($elm$json$Json$Encode$null)
        );
      };
      var $author$project$Api$Request$patch = function(_v0) {
        var token = _v0.I;
        var url = _v0.E;
        var body = _v0.F;
        var responseResolver = _v0.H;
        return $author$project$Api$Request$request(
          { F: body, Y: "PATCH", H: responseResolver, I: token, E: url }
        );
      };
      var $author$project$Gen$Command$Apps$Connections$Metadata$Update$responseDecoder = A2($elm$json$Json$Decode$at, _List_Nil, $elm$json$Json$Decode$value);
      var $author$project$Gen$Command$Apps$Connections$Metadata$Update$url = function(options) {
        return $author$project$Api$Url$url(
          {
            dg: options.dg,
            dC: A3(
              $elm$core$String$replace,
              "{SDK_connectionName}",
              $elm$core$Basics$identity(options.dO),
              "/sdk/apps/connections/{SDK_connectionName}"
            ),
            dH: $elm$core$List$concat(
              _List_fromArray(
                [
                  A2($author$project$Api$Url$boolQueryParameter, "all", options.f),
                  A2($author$project$Api$Url$boolQueryParameter, "opensource", options.h)
                ]
              )
            )
          }
        );
      };
      var $author$project$Gen$Command$Apps$Connections$Metadata$Update$request = function(options) {
        var body = $author$project$Api$Body$applicationJson(
          $elm$json$Json$Encode$object(
            _List_fromArray(
              [
                _Utils_Tuple2(
                  "label",
                  A2($elm_community$json_extra$Json$Encode$Extra$maybe, $elm$json$Json$Encode$string, options.bU)
                )
              ]
            )
          )
        );
        return A2(
          $author$project$Instruction$request,
          options.aF,
          $author$project$Api$Request$patch(
            {
              F: body,
              H: $author$project$Api$Response$resolveToJson($author$project$Gen$Command$Apps$Connections$Metadata$Update$responseDecoder),
              I: options.I,
              E: $author$project$Gen$Command$Apps$Connections$Metadata$Update$url(options)
            }
          )
        );
      };
      var $author$project$Api$Request$put = function(_v0) {
        var token = _v0.I;
        var url = _v0.E;
        var body = _v0.F;
        var responseResolver = _v0.H;
        return $author$project$Api$Request$request(
          { F: body, Y: "PUT", H: responseResolver, I: token, E: url }
        );
      };
      var $author$project$Gen$Command$Apps$Connections$Sections$Set$responseDecoder = A2($elm$json$Json$Decode$at, _List_Nil, $elm$json$Json$Decode$value);
      var $author$project$Gen$Command$Apps$Connections$Sections$Set$url = function(options) {
        return $author$project$Api$Url$url(
          {
            dg: options.dg,
            dC: A3(
              $elm$core$String$replace,
              "{SDK_connectionSection}",
              $elm$core$Basics$identity(options.dP),
              A3(
                $elm$core$String$replace,
                "{SDK_connectionName}",
                $elm$core$Basics$identity(options.dO),
                "/sdk/apps/connections/{SDK_connectionName}/{SDK_connectionSection}"
              )
            ),
            dH: $elm$core$List$concat(
              _List_fromArray(
                [
                  A2($author$project$Api$Url$boolQueryParameter, "all", options.f),
                  A2($author$project$Api$Url$boolQueryParameter, "opensource", options.h)
                ]
              )
            )
          }
        );
      };
      var $author$project$Gen$Command$Apps$Connections$Sections$Set$request = function(options) {
        var body = options.F;
        return A2(
          $author$project$Instruction$request,
          options.aF,
          $author$project$Api$Request$put(
            {
              F: body,
              H: $author$project$Api$Response$resolveToJson($author$project$Gen$Command$Apps$Connections$Sections$Set$responseDecoder),
              I: options.I,
              E: $author$project$Gen$Command$Apps$Connections$Sections$Set$url(options)
            }
          )
        );
      };
      var $author$project$Gen$Command$Apps$Functions$Code$Set$responseDecoder = A2($elm$json$Json$Decode$at, _List_Nil, $elm$json$Json$Decode$value);
      var $author$project$Gen$Command$Apps$Functions$Code$Set$url = function(options) {
        return $author$project$Api$Url$url(
          {
            dg: options.dg,
            dC: A3(
              $elm$core$String$replace,
              "{SDK_functionName}",
              $elm$core$Basics$identity(options.cq),
              A3(
                $elm$core$String$replace,
                "{SDK_appVersion}",
                $elm$core$Basics$identity(options.d),
                A3(
                  $elm$core$String$replace,
                  "{SDK_appName}",
                  $elm$core$Basics$identity(options.b),
                  "/sdk/apps/{SDK_appName}/{SDK_appVersion}/functions/{SDK_functionName}/code"
                )
              )
            ),
            dH: $elm$core$List$concat(
              _List_fromArray(
                [
                  A2($author$project$Api$Url$boolQueryParameter, "all", options.f),
                  A2($author$project$Api$Url$boolQueryParameter, "opensource", options.h)
                ]
              )
            )
          }
        );
      };
      var $author$project$Gen$Command$Apps$Functions$Code$Set$request = function(options) {
        var body = options.F;
        return A2(
          $author$project$Instruction$request,
          options.aF,
          $author$project$Api$Request$put(
            {
              F: body,
              H: $author$project$Api$Response$resolveToJson($author$project$Gen$Command$Apps$Functions$Code$Set$responseDecoder),
              I: options.I,
              E: $author$project$Gen$Command$Apps$Functions$Code$Set$url(options)
            }
          )
        );
      };
      var $author$project$Gen$Command$Apps$Functions$Test$Set$responseDecoder = A2($elm$json$Json$Decode$at, _List_Nil, $elm$json$Json$Decode$value);
      var $author$project$Gen$Command$Apps$Functions$Test$Set$url = function(options) {
        return $author$project$Api$Url$url(
          {
            dg: options.dg,
            dC: A3(
              $elm$core$String$replace,
              "{SDK_functionName}",
              $elm$core$Basics$identity(options.cq),
              A3(
                $elm$core$String$replace,
                "{SDK_appVersion}",
                $elm$core$Basics$identity(options.d),
                A3(
                  $elm$core$String$replace,
                  "{SDK_appName}",
                  $elm$core$Basics$identity(options.b),
                  "/sdk/apps/{SDK_appName}/{SDK_appVersion}/functions/{SDK_functionName}/test"
                )
              )
            ),
            dH: $elm$core$List$concat(
              _List_fromArray(
                [
                  A2($author$project$Api$Url$boolQueryParameter, "all", options.f),
                  A2($author$project$Api$Url$boolQueryParameter, "opensource", options.h)
                ]
              )
            )
          }
        );
      };
      var $author$project$Gen$Command$Apps$Functions$Test$Set$request = function(options) {
        var body = options.F;
        return A2(
          $author$project$Instruction$request,
          options.aF,
          $author$project$Api$Request$put(
            {
              F: body,
              H: $author$project$Api$Response$resolveToJson($author$project$Gen$Command$Apps$Functions$Test$Set$responseDecoder),
              I: options.I,
              E: $author$project$Gen$Command$Apps$Functions$Test$Set$url(options)
            }
          )
        );
      };
      var $author$project$Gen$Command$Apps$Icon$Set$responseDecoder = A2($elm$json$Json$Decode$at, _List_Nil, $elm$json$Json$Decode$value);
      var $author$project$Gen$Command$Apps$Icon$Set$url = function(options) {
        return $author$project$Api$Url$url(
          {
            dg: options.dg,
            dC: A3(
              $elm$core$String$replace,
              "{SDK_appVersion}",
              $elm$core$Basics$identity(options.d),
              A3(
                $elm$core$String$replace,
                "{SDK_appName}",
                $elm$core$Basics$identity(options.b),
                "/sdk/apps/{SDK_appName}/{SDK_appVersion}/icon"
              )
            ),
            dH: $elm$core$List$concat(
              _List_fromArray(
                [
                  A2($author$project$Api$Url$boolQueryParameter, "all", options.f),
                  A2($author$project$Api$Url$boolQueryParameter, "opensource", options.h)
                ]
              )
            )
          }
        );
      };
      var $author$project$Gen$Command$Apps$Icon$Set$request = function(options) {
        var body = options.F;
        return A2(
          $author$project$Instruction$request,
          options.aF,
          $author$project$Api$Request$put(
            {
              F: body,
              H: $author$project$Api$Response$resolveToJson($author$project$Gen$Command$Apps$Icon$Set$responseDecoder),
              I: options.I,
              E: $author$project$Gen$Command$Apps$Icon$Set$url(options)
            }
          )
        );
      };
      var $author$project$Gen$Command$Apps$Metadata$Update$responseDecoder = A2(
        $elm$json$Json$Decode$at,
        _List_fromArray(
          ["app"]
        ),
        $elm$json$Json$Decode$value
      );
      var $author$project$Gen$Command$Apps$Metadata$Update$url = function(options) {
        return $author$project$Api$Url$url(
          {
            dg: options.dg,
            dC: A3(
              $elm$core$String$replace,
              "{SDK_appVersion}",
              $elm$core$String$fromInt(options.d),
              A3(
                $elm$core$String$replace,
                "{SDK_appName}",
                $elm$core$Basics$identity(options.b),
                "/sdk/apps/{SDK_appName}/{SDK_appVersion}"
              )
            ),
            dH: $elm$core$List$concat(
              _List_fromArray(
                [
                  A2($author$project$Api$Url$boolQueryParameter, "all", options.f),
                  A2($author$project$Api$Url$boolQueryParameter, "opensource", options.h)
                ]
              )
            )
          }
        );
      };
      var $author$project$Gen$Command$Apps$Metadata$Update$request = function(options) {
        var body = options.F;
        return A2(
          $author$project$Instruction$request,
          options.aF,
          $author$project$Api$Request$patch(
            {
              F: body,
              H: $author$project$Api$Response$resolveToJson($author$project$Gen$Command$Apps$Metadata$Update$responseDecoder),
              I: options.I,
              E: $author$project$Gen$Command$Apps$Metadata$Update$url(options)
            }
          )
        );
      };
      var $author$project$Gen$Command$Apps$Module$Update$responseDecoder = A2(
        $elm$json$Json$Decode$at,
        _List_fromArray(
          ["appModule"]
        ),
        $elm$json$Json$Decode$value
      );
      var $author$project$Gen$Command$Apps$Module$Update$url = function(options) {
        return $author$project$Api$Url$url(
          {
            dg: options.dg,
            dC: A3(
              $elm$core$String$replace,
              "{SDK_moduleName}",
              $elm$core$Basics$identity(options.cr),
              A3(
                $elm$core$String$replace,
                "{SDK_appVersion}",
                $elm$core$Basics$identity(options.d),
                A3(
                  $elm$core$String$replace,
                  "{SDK_appName}",
                  $elm$core$Basics$identity(options.b),
                  "/sdk/apps/{SDK_appName}/{SDK_appVersion}/modules/{SDK_moduleName}"
                )
              )
            ),
            dH: $elm$core$List$concat(
              _List_fromArray(
                [
                  A2($author$project$Api$Url$boolQueryParameter, "all", options.f),
                  A2($author$project$Api$Url$boolQueryParameter, "opensource", options.h)
                ]
              )
            )
          }
        );
      };
      var $author$project$Gen$Command$Apps$Module$Update$request = function(options) {
        var body = $author$project$Api$Body$applicationJson(
          $elm$json$Json$Encode$object(
            _List_fromArray(
              [
                _Utils_Tuple2(
                  "label",
                  A2($elm_community$json_extra$Json$Encode$Extra$maybe, $elm$json$Json$Encode$string, options.bU)
                ),
                _Utils_Tuple2(
                  "description",
                  A2($elm_community$json_extra$Json$Encode$Extra$maybe, $elm$json$Json$Encode$string, options.bv)
                ),
                _Utils_Tuple2(
                  "connection",
                  A2($elm_community$json_extra$Json$Encode$Extra$maybe, $elm$json$Json$Encode$string, options.bp)
                )
              ]
            )
          )
        );
        return A2(
          $author$project$Instruction$request,
          options.aF,
          $author$project$Api$Request$patch(
            {
              F: body,
              H: $author$project$Api$Response$resolveToJson($author$project$Gen$Command$Apps$Module$Update$responseDecoder),
              I: options.I,
              E: $author$project$Gen$Command$Apps$Module$Update$url(options)
            }
          )
        );
      };
      var $author$project$Config$encode = $elm$core$Basics$identity;
      var $author$project$Gen$Command$Apps$Modules$Sections$Set$responseDecoder = A2($elm$json$Json$Decode$at, _List_Nil, $elm$json$Json$Decode$value);
      var $author$project$Gen$Command$Apps$Modules$Sections$Set$url = function(options) {
        return $author$project$Api$Url$url(
          {
            dg: options.dg,
            dC: A3(
              $elm$core$String$replace,
              "{SDK_moduleSection}",
              $elm$core$Basics$identity(options.dQ),
              A3(
                $elm$core$String$replace,
                "{SDK_moduleName}",
                $elm$core$Basics$identity(options.cr),
                A3(
                  $elm$core$String$replace,
                  "{SDK_appVersion}",
                  $elm$core$Basics$identity(options.d),
                  A3(
                    $elm$core$String$replace,
                    "{SDK_appName}",
                    $elm$core$Basics$identity(options.b),
                    "/sdk/apps/{SDK_appName}/{SDK_appVersion}/modules/{SDK_moduleName}/{SDK_moduleSection}"
                  )
                )
              )
            ),
            dH: $elm$core$List$concat(
              _List_fromArray(
                [
                  A2($author$project$Api$Url$boolQueryParameter, "all", options.f),
                  A2($author$project$Api$Url$boolQueryParameter, "opensource", options.h)
                ]
              )
            )
          }
        );
      };
      var $author$project$Gen$Command$Apps$Modules$Sections$Set$request = function(options) {
        var body = $author$project$Api$Body$applicationJson(
          $elm$json$Json$Encode$object(
            _List_fromArray(
              [
                _Utils_Tuple2(
                  "url",
                  A2($elm_community$json_extra$Json$Encode$Extra$maybe, $elm$json$Json$Encode$string, options.E)
                ),
                _Utils_Tuple2(
                  "method",
                  A2($elm_community$json_extra$Json$Encode$Extra$maybe, $elm$json$Json$Encode$string, options.Y)
                ),
                _Utils_Tuple2(
                  "qs",
                  A2($elm_community$json_extra$Json$Encode$Extra$maybe, $author$project$Config$encode, options.ag)
                ),
                _Utils_Tuple2(
                  "body",
                  A2($elm_community$json_extra$Json$Encode$Extra$maybe, $author$project$Config$encode, options.F)
                ),
                _Utils_Tuple2(
                  "headers",
                  A2($elm_community$json_extra$Json$Encode$Extra$maybe, $author$project$Config$encode, options.dk)
                ),
                _Utils_Tuple2(
                  "response",
                  A2($elm_community$json_extra$Json$Encode$Extra$maybe, $author$project$Config$encode, options.ah)
                )
              ]
            )
          )
        );
        return A2(
          $author$project$Instruction$request,
          options.aF,
          $author$project$Api$Request$put(
            {
              F: body,
              H: $author$project$Api$Response$resolveToJson($author$project$Gen$Command$Apps$Modules$Sections$Set$responseDecoder),
              I: options.I,
              E: $author$project$Gen$Command$Apps$Modules$Sections$Set$url(options)
            }
          )
        );
      };
      var $author$project$Gen$Command$Apps$Readme$Set$responseDecoder = A2($elm$json$Json$Decode$at, _List_Nil, $elm$json$Json$Decode$value);
      var $author$project$Gen$Command$Apps$Readme$Set$url = function(options) {
        return $author$project$Api$Url$url(
          {
            dg: options.dg,
            dC: A3(
              $elm$core$String$replace,
              "{SDK_appVersion}",
              $elm$core$Basics$identity(options.d),
              A3(
                $elm$core$String$replace,
                "{SDK_appName}",
                $elm$core$Basics$identity(options.b),
                "/sdk/apps/{SDK_appName}/{SDK_appVersion}/readme"
              )
            ),
            dH: $elm$core$List$concat(
              _List_fromArray(
                [
                  A2($author$project$Api$Url$boolQueryParameter, "all", options.f),
                  A2($author$project$Api$Url$boolQueryParameter, "opensource", options.h)
                ]
              )
            )
          }
        );
      };
      var $author$project$Gen$Command$Apps$Readme$Set$request = function(options) {
        var body = options.F;
        return A2(
          $author$project$Instruction$request,
          options.aF,
          $author$project$Api$Request$put(
            {
              F: body,
              H: $author$project$Api$Response$resolveToJson($author$project$Gen$Command$Apps$Readme$Set$responseDecoder),
              I: options.I,
              E: $author$project$Gen$Command$Apps$Readme$Set$url(options)
            }
          )
        );
      };
      var $author$project$Gen$Command$Apps$Rpc$Update$responseDecoder = A2($elm$json$Json$Decode$at, _List_Nil, $elm$json$Json$Decode$value);
      var $author$project$Gen$Command$Apps$Rpc$Update$url = function(options) {
        return $author$project$Api$Url$url(
          {
            dg: options.dg,
            dC: A3(
              $elm$core$String$replace,
              "{SDK_rpcName}",
              $elm$core$Basics$identity(options.a6),
              A3(
                $elm$core$String$replace,
                "{SDK_appVersion}",
                $elm$core$Basics$identity(options.d),
                A3(
                  $elm$core$String$replace,
                  "{SDK_appName}",
                  $elm$core$Basics$identity(options.b),
                  "/sdk/apps/{SDK_appName}/{SDK_appVersion}/rpcs/{SDK_rpcName}"
                )
              )
            ),
            dH: $elm$core$List$concat(
              _List_fromArray(
                [
                  A2($author$project$Api$Url$boolQueryParameter, "all", options.f),
                  A2($author$project$Api$Url$boolQueryParameter, "opensource", options.h)
                ]
              )
            )
          }
        );
      };
      var $author$project$Gen$Command$Apps$Rpc$Update$request = function(options) {
        var body = $author$project$Api$Body$applicationJson(
          $elm$json$Json$Encode$object(
            _List_fromArray(
              [
                _Utils_Tuple2(
                  "label",
                  A2($elm_community$json_extra$Json$Encode$Extra$maybe, $elm$json$Json$Encode$string, options.bU)
                )
              ]
            )
          )
        );
        return A2(
          $author$project$Instruction$request,
          options.aF,
          $author$project$Api$Request$patch(
            {
              F: body,
              H: $author$project$Api$Response$resolveToJson($author$project$Gen$Command$Apps$Rpc$Update$responseDecoder),
              I: options.I,
              E: $author$project$Gen$Command$Apps$Rpc$Update$url(options)
            }
          )
        );
      };
      var $author$project$Gen$Command$Apps$Rpcs$Sections$Set$responseDecoder = A2($elm$json$Json$Decode$at, _List_Nil, $elm$json$Json$Decode$value);
      var $author$project$Gen$Command$Apps$Rpcs$Sections$Set$url = function(options) {
        return $author$project$Api$Url$url(
          {
            dg: options.dg,
            dC: A3(
              $elm$core$String$replace,
              "{SDK_rpcSection}",
              $elm$core$Basics$identity(options.cs),
              A3(
                $elm$core$String$replace,
                "{SDK_rpcName}",
                $elm$core$Basics$identity(options.a6),
                A3(
                  $elm$core$String$replace,
                  "{SDK_appVersion}",
                  $elm$core$Basics$identity(options.d),
                  A3(
                    $elm$core$String$replace,
                    "{SDK_appName}",
                    $elm$core$Basics$identity(options.b),
                    "/sdk/apps/{SDK_appName}/{SDK_appVersion}/rpcs/{SDK_rpcName}/{SDK_rpcSection}"
                  )
                )
              )
            ),
            dH: $elm$core$List$concat(
              _List_fromArray(
                [
                  A2($author$project$Api$Url$boolQueryParameter, "all", options.f),
                  A2($author$project$Api$Url$boolQueryParameter, "opensource", options.h)
                ]
              )
            )
          }
        );
      };
      var $author$project$Gen$Command$Apps$Rpcs$Sections$Set$request = function(options) {
        var body = $author$project$Api$Body$applicationJson(
          $elm$json$Json$Encode$object(
            _List_fromArray(
              [
                _Utils_Tuple2(
                  "url",
                  A2($elm_community$json_extra$Json$Encode$Extra$maybe, $elm$json$Json$Encode$string, options.E)
                ),
                _Utils_Tuple2(
                  "method",
                  A2($elm_community$json_extra$Json$Encode$Extra$maybe, $elm$json$Json$Encode$string, options.Y)
                ),
                _Utils_Tuple2(
                  "qs",
                  A2($elm_community$json_extra$Json$Encode$Extra$maybe, $author$project$Config$encode, options.ag)
                ),
                _Utils_Tuple2(
                  "body",
                  A2($elm_community$json_extra$Json$Encode$Extra$maybe, $author$project$Config$encode, options.F)
                ),
                _Utils_Tuple2(
                  "headers",
                  A2($elm_community$json_extra$Json$Encode$Extra$maybe, $author$project$Config$encode, options.dk)
                ),
                _Utils_Tuple2(
                  "response",
                  A2($elm_community$json_extra$Json$Encode$Extra$maybe, $author$project$Config$encode, options.ah)
                )
              ]
            )
          )
        );
        return A2(
          $author$project$Instruction$request,
          options.aF,
          $author$project$Api$Request$put(
            {
              F: body,
              H: $author$project$Api$Response$resolveToJson($author$project$Gen$Command$Apps$Rpcs$Sections$Set$responseDecoder),
              I: options.I,
              E: $author$project$Gen$Command$Apps$Rpcs$Sections$Set$url(options)
            }
          )
        );
      };
      var $author$project$Gen$Command$Apps$Sections$Set$responseDecoder = A2($elm$json$Json$Decode$at, _List_Nil, $elm$json$Json$Decode$value);
      var $author$project$Gen$Command$Apps$Sections$Set$url = function(options) {
        return $author$project$Api$Url$url(
          {
            dg: options.dg,
            dC: A3(
              $elm$core$String$replace,
              "{SDK_appSection}",
              $elm$core$Basics$identity(options.dN),
              A3(
                $elm$core$String$replace,
                "{SDK_appVersion}",
                $elm$core$String$fromInt(options.d),
                A3(
                  $elm$core$String$replace,
                  "{SDK_appName}",
                  $elm$core$Basics$identity(options.b),
                  "/sdk/apps/{SDK_appName}/{SDK_appVersion}/{SDK_appSection}"
                )
              )
            ),
            dH: $elm$core$List$concat(
              _List_fromArray(
                [
                  A2($author$project$Api$Url$boolQueryParameter, "all", options.f),
                  A2($author$project$Api$Url$boolQueryParameter, "opensource", options.h)
                ]
              )
            )
          }
        );
      };
      var $author$project$Gen$Command$Apps$Sections$Set$request = function(options) {
        var body = options.F;
        return A2(
          $author$project$Instruction$request,
          options.aF,
          $author$project$Api$Request$put(
            {
              F: body,
              H: $author$project$Api$Response$resolveToJson($author$project$Gen$Command$Apps$Sections$Set$responseDecoder),
              I: options.I,
              E: $author$project$Gen$Command$Apps$Sections$Set$url(options)
            }
          )
        );
      };
      var $author$project$Gen$Command$Apps$Webhook$Update$responseDecoder = A2($elm$json$Json$Decode$at, _List_Nil, $elm$json$Json$Decode$value);
      var $author$project$Gen$Command$Apps$Webhook$Update$url = function(options) {
        return $author$project$Api$Url$url(
          {
            dg: options.dg,
            dC: A3(
              $elm$core$String$replace,
              "{SDK_webhookName}",
              $elm$core$Basics$identity(options.ct),
              "/sdk/apps/webhooks/{SDK_webhookName}"
            ),
            dH: $elm$core$List$concat(
              _List_fromArray(
                [
                  A2($author$project$Api$Url$boolQueryParameter, "all", options.f),
                  A2($author$project$Api$Url$boolQueryParameter, "opensource", options.h)
                ]
              )
            )
          }
        );
      };
      var $author$project$Gen$Command$Apps$Webhook$Update$request = function(options) {
        var body = $author$project$Api$Body$applicationJson(
          $elm$json$Json$Encode$object(
            _List_fromArray(
              [
                _Utils_Tuple2(
                  "label",
                  A2($elm_community$json_extra$Json$Encode$Extra$maybe, $elm$json$Json$Encode$string, options.bU)
                )
              ]
            )
          )
        );
        return A2(
          $author$project$Instruction$request,
          options.aF,
          $author$project$Api$Request$patch(
            {
              F: body,
              H: $author$project$Api$Response$resolveToJson($author$project$Gen$Command$Apps$Webhook$Update$responseDecoder),
              I: options.I,
              E: $author$project$Gen$Command$Apps$Webhook$Update$url(options)
            }
          )
        );
      };
      var $author$project$Gen$Command$Apps$Webhooks$Sections$Set$responseDecoder = A2($elm$json$Json$Decode$at, _List_Nil, $elm$json$Json$Decode$value);
      var $author$project$Gen$Command$Apps$Webhooks$Sections$Set$url = function(options) {
        return $author$project$Api$Url$url(
          {
            dg: options.dg,
            dC: A3(
              $elm$core$String$replace,
              "{SDK_webhookSection}",
              $elm$core$Basics$identity(options.dR),
              A3(
                $elm$core$String$replace,
                "{SDK_webhookName}",
                $elm$core$Basics$identity(options.ct),
                "/sdk/apps/webhooks/{SDK_webhookName}/{SDK_webhookSection}"
              )
            ),
            dH: $elm$core$List$concat(
              _List_fromArray(
                [
                  A2($author$project$Api$Url$boolQueryParameter, "all", options.f),
                  A2($author$project$Api$Url$boolQueryParameter, "opensource", options.h)
                ]
              )
            )
          }
        );
      };
      var $author$project$Gen$Command$Apps$Webhooks$Sections$Set$request = function(options) {
        var body = options.F;
        return A2(
          $author$project$Instruction$request,
          options.aF,
          $author$project$Api$Request$put(
            {
              F: body,
              H: $author$project$Api$Response$resolveToJson($author$project$Gen$Command$Apps$Webhooks$Sections$Set$responseDecoder),
              I: options.I,
              E: $author$project$Gen$Command$Apps$Webhooks$Sections$Set$url(options)
            }
          )
        );
      };
      var $author$project$Instruction$unpackFileContent = F2(
        function(fn, payload) {
          return A3(
            $elm_community$result_extra$Result$Extra$unpack,
            $author$project$Instruction$fail,
            fn,
            function() {
              if (payload.$ === 1) {
                var body = payload.a;
                return $elm$core$Result$Ok(body);
              } else {
                return $elm$core$Result$Err("No File Content");
              }
            }()
          );
        }
      );
      var $author$project$Custom$Command$Apps$Push$run = F2(
        function(options, config) {
          return A2(
            $author$project$Instruction$andThen,
            A2(
              $elm$core$Basics$composeR,
              $author$project$Instruction$decodeInput($author$project$Custom$Command$Apps$Push$metadataDecoder),
              A2(
                $elm_community$result_extra$Result$Extra$unpack,
                $author$project$Instruction$fail,
                function(appMetadata) {
                  return $author$project$Instruction$sequence(
                    _List_fromArray(
                      [
                        $author$project$Instruction$sequence(
                          _List_fromArray(
                            [
                              $author$project$Instruction$log("Set Metadata"),
                              $author$project$Gen$Command$Apps$Metadata$Update$request(
                                {
                                  f: true,
                                  F: $author$project$Custom$Command$Apps$Push$encodeMetadata(appMetadata),
                                  dg: options.dg,
                                  h: false,
                                  aF: options.aF,
                                  b: appMetadata.b3,
                                  d: appMetadata.z,
                                  I: options.I
                                }
                              )
                            ]
                          )
                        ),
                        $author$project$Instruction$sequence(
                          _List_fromArray(
                            [
                              $author$project$Instruction$log("Set Base"),
                              A2(
                                $author$project$Instruction$andThen,
                                $author$project$Instruction$unpackFileContent(
                                  function(base) {
                                    return $author$project$Gen$Command$Apps$Sections$Set$request(
                                      { f: true, F: base, dg: options.dg, h: false, aF: options.aF, b: appMetadata.b3, dN: "base", d: appMetadata.z, I: options.I }
                                    );
                                  }
                                ),
                                $author$project$FileSystem$readJsonFile(options.e + "base.imljson")
                              )
                            ]
                          )
                        ),
                        $author$project$Instruction$sequence(
                          _List_fromArray(
                            [
                              $author$project$Instruction$log("Set Readme"),
                              A2(
                                $author$project$Instruction$andThen,
                                $author$project$Instruction$unpackFileContent(
                                  function(readme) {
                                    return $author$project$Gen$Command$Apps$Readme$Set$request(
                                      {
                                        f: true,
                                        F: readme,
                                        dg: options.dg,
                                        h: false,
                                        aF: options.aF,
                                        b: appMetadata.b3,
                                        d: $elm$core$String$fromInt(appMetadata.z),
                                        I: options.I
                                      }
                                    );
                                  }
                                ),
                                $author$project$FileSystem$readMarkdownFile(options.e + "readme.md")
                              )
                            ]
                          )
                        ),
                        $author$project$Instruction$sequence(
                          _List_fromArray(
                            [
                              $author$project$Instruction$log("Set Connections"),
                              A2(
                                $author$project$Instruction$andThen,
                                A2(
                                  $elm$core$Basics$composeR,
                                  $author$project$Instruction$decodeInput(
                                    $elm$json$Json$Decode$list($elm$json$Json$Decode$string)
                                  ),
                                  A2(
                                    $elm_community$result_extra$Result$Extra$unpack,
                                    $author$project$Instruction$fail,
                                    A2(
                                      $elm$core$Basics$composeR,
                                      $elm$core$List$map(
                                        function(connectionName) {
                                          return A2(
                                            $elm$core$List$cons,
                                            A2(
                                              $author$project$Instruction$andThen,
                                              A2(
                                                $elm$core$Basics$composeR,
                                                $author$project$Instruction$decodeInput(
                                                  $elm$json$Json$Decode$maybe(
                                                    A2($elm$json$Json$Decode$field, "label", $elm$json$Json$Decode$string)
                                                  )
                                                ),
                                                A2(
                                                  $elm_community$result_extra$Result$Extra$unpack,
                                                  $author$project$Instruction$fail,
                                                  function(connectionLabel) {
                                                    return $author$project$Gen$Command$Apps$Connections$Metadata$Update$request(
                                                      { f: true, dg: options.dg, bU: connectionLabel, h: false, aF: options.aF, dO: connectionName, I: options.I }
                                                    );
                                                  }
                                                )
                                              ),
                                              $author$project$FileSystem$readJsonFile(options.e + ("connections/" + (connectionName + "/metadata.json")))
                                            ),
                                            A2(
                                              $elm$core$List$map,
                                              function(section) {
                                                return A2(
                                                  $author$project$Instruction$andThen,
                                                  $author$project$Instruction$unpackFileContent(
                                                    function(body) {
                                                      return $author$project$Gen$Command$Apps$Connections$Sections$Set$request(
                                                        { f: true, F: body, dg: options.dg, h: false, aF: options.aF, dO: connectionName, dP: section, I: options.I }
                                                      );
                                                    }
                                                  ),
                                                  $author$project$FileSystem$readJsonFile(options.e + ("connections/" + (connectionName + ("/" + (section + ".imljson")))))
                                                );
                                              },
                                              _List_fromArray(
                                                ["api", "scope", "scopes", "parameters"]
                                              )
                                            )
                                          );
                                        }
                                      ),
                                      A2($elm$core$Basics$composeR, $elm$core$List$concat, $author$project$Instruction$sequence)
                                    )
                                  )
                                ),
                                $author$project$FileSystem$listDirectories(options.e + "connections/")
                              )
                            ]
                          )
                        ),
                        $author$project$Instruction$sequence(
                          _List_fromArray(
                            [
                              $author$project$Instruction$log("Set RPCs"),
                              A2(
                                $author$project$Instruction$andThen,
                                A2(
                                  $elm$core$Basics$composeR,
                                  $author$project$Instruction$decodeInput(
                                    $elm$json$Json$Decode$list($elm$json$Json$Decode$string)
                                  ),
                                  A2(
                                    $elm_community$result_extra$Result$Extra$unpack,
                                    $author$project$Instruction$fail,
                                    A2(
                                      $elm$core$Basics$composeR,
                                      $elm$core$List$map(
                                        function(rpcName) {
                                          return _List_fromArray(
                                            [
                                              A2(
                                                $author$project$Instruction$andThen,
                                                A2(
                                                  $elm$core$Basics$composeR,
                                                  $author$project$Instruction$decodeInput(
                                                    $elm$json$Json$Decode$maybe(
                                                      A2(
                                                        $elm$json$Json$Decode$field,
                                                        "appRpc",
                                                        A2($elm$json$Json$Decode$field, "label", $elm$json$Json$Decode$string)
                                                      )
                                                    )
                                                  ),
                                                  A2(
                                                    $elm_community$result_extra$Result$Extra$unpack,
                                                    $author$project$Instruction$fail,
                                                    function(connectionLabel) {
                                                      return $author$project$Gen$Command$Apps$Rpc$Update$request(
                                                        {
                                                          f: true,
                                                          dg: options.dg,
                                                          bU: connectionLabel,
                                                          h: false,
                                                          aF: options.aF,
                                                          b: appMetadata.b3,
                                                          d: $elm$core$String$fromInt(appMetadata.z),
                                                          a6: rpcName,
                                                          I: options.I
                                                        }
                                                      );
                                                    }
                                                  )
                                                ),
                                                $author$project$FileSystem$readJsonFile(options.e + ("rpcs/" + (rpcName + "/metadata.json")))
                                              ),
                                              A2(
                                                $author$project$Instruction$andThen,
                                                A2(
                                                  $elm$core$Basics$composeR,
                                                  $author$project$Instruction$decodeInput($author$project$Custom$Command$Apps$Push$apiDecoder),
                                                  A2(
                                                    $elm_community$result_extra$Result$Extra$unpack,
                                                    $author$project$Instruction$fail,
                                                    function(body) {
                                                      return $author$project$Gen$Command$Apps$Rpcs$Sections$Set$request(
                                                        {
                                                          f: true,
                                                          F: body.F,
                                                          dg: options.dg,
                                                          dk: body.dk,
                                                          Y: body.Y,
                                                          h: false,
                                                          aF: options.aF,
                                                          ag: body.ag,
                                                          ah: body.ah,
                                                          b: appMetadata.b3,
                                                          d: $elm$core$String$fromInt(appMetadata.z),
                                                          a6: rpcName,
                                                          cs: "api",
                                                          I: options.I,
                                                          E: body.E
                                                        }
                                                      );
                                                    }
                                                  )
                                                ),
                                                $author$project$FileSystem$readJsonFile(options.e + ("rpcs/" + (rpcName + "/api.imljson")))
                                              )
                                            ]
                                          );
                                        }
                                      ),
                                      A2($elm$core$Basics$composeR, $elm$core$List$concat, $author$project$Instruction$sequence)
                                    )
                                  )
                                ),
                                $author$project$FileSystem$listDirectories(options.e + "rpcs/")
                              )
                            ]
                          )
                        ),
                        $author$project$Instruction$sequence(
                          _List_fromArray(
                            [
                              $author$project$Instruction$log("Set Webhooks"),
                              A2(
                                $author$project$Instruction$andThen,
                                A2(
                                  $elm$core$Basics$composeR,
                                  $author$project$Instruction$decodeInput(
                                    $elm$json$Json$Decode$list($elm$json$Json$Decode$string)
                                  ),
                                  A2(
                                    $elm_community$result_extra$Result$Extra$unpack,
                                    $author$project$Instruction$fail,
                                    A2(
                                      $elm$core$Basics$composeR,
                                      $elm$core$List$map(
                                        function(webhookName) {
                                          return A2(
                                            $elm$core$List$cons,
                                            A2(
                                              $author$project$Instruction$andThen,
                                              A2(
                                                $elm$core$Basics$composeR,
                                                $author$project$Instruction$decodeInput(
                                                  $elm$json$Json$Decode$maybe(
                                                    A2(
                                                      $elm$json$Json$Decode$at,
                                                      _List_fromArray(
                                                        ["appWebhook", "label"]
                                                      ),
                                                      $elm$json$Json$Decode$string
                                                    )
                                                  )
                                                ),
                                                A2(
                                                  $elm_community$result_extra$Result$Extra$unpack,
                                                  $author$project$Instruction$fail,
                                                  function(connectionLabel) {
                                                    return $author$project$Gen$Command$Apps$Webhook$Update$request(
                                                      { f: true, dg: options.dg, bU: connectionLabel, h: false, aF: options.aF, ct: webhookName, I: options.I }
                                                    );
                                                  }
                                                )
                                              ),
                                              $author$project$FileSystem$readJsonFile(options.e + ("webhooks/" + (webhookName + "/metadata.json")))
                                            ),
                                            A2(
                                              $elm$core$List$map,
                                              function(section) {
                                                return A2(
                                                  $author$project$Instruction$andThen,
                                                  $author$project$Instruction$unpackFileContent(
                                                    function(body) {
                                                      return $author$project$Gen$Command$Apps$Webhooks$Sections$Set$request(
                                                        { f: true, F: body, dg: options.dg, h: false, aF: options.aF, ct: webhookName, dR: section, I: options.I }
                                                      );
                                                    }
                                                  ),
                                                  $author$project$FileSystem$readJsonFile(options.e + ("webhooks/" + (webhookName + ("/" + (section + ".imljson")))))
                                                );
                                              },
                                              _List_fromArray(
                                                ["api", "parameters", "attach", "detach", "scope"]
                                              )
                                            )
                                          );
                                        }
                                      ),
                                      A2($elm$core$Basics$composeR, $elm$core$List$concat, $author$project$Instruction$sequence)
                                    )
                                  )
                                ),
                                $author$project$FileSystem$listDirectories(options.e + "webhooks/")
                              )
                            ]
                          )
                        ),
                        $author$project$Instruction$sequence(
                          _List_fromArray(
                            [
                              $author$project$Instruction$log("Set Modules"),
                              A2(
                                $author$project$Instruction$andThen,
                                A2(
                                  $elm$core$Basics$composeR,
                                  $author$project$Instruction$decodeInput(
                                    $elm$json$Json$Decode$list($elm$json$Json$Decode$string)
                                  ),
                                  A2(
                                    $elm_community$result_extra$Result$Extra$unpack,
                                    $author$project$Instruction$fail,
                                    A2(
                                      $elm$core$Basics$composeR,
                                      $elm$core$List$map(
                                        function(moduleName) {
                                          return A2(
                                            $author$project$Instruction$andThen,
                                            A2(
                                              $elm$core$Basics$composeR,
                                              $author$project$Instruction$decodeInput($author$project$Custom$Command$Apps$Push$appModuleDecoder),
                                              A2(
                                                $elm_community$result_extra$Result$Extra$unpack,
                                                $author$project$Instruction$fail,
                                                function(module_) {
                                                  var sections = _List_fromArray(
                                                    ["api"]
                                                  );
                                                  return $author$project$Instruction$sequence(
                                                    A2(
                                                      $elm$core$List$cons,
                                                      $author$project$Gen$Command$Apps$Module$Update$request(
                                                        {
                                                          f: true,
                                                          bp: module_.bp,
                                                          bv: module_.bv,
                                                          dg: options.dg,
                                                          bU: module_.bU,
                                                          h: false,
                                                          aF: options.aF,
                                                          b: appMetadata.b3,
                                                          d: $elm$core$String$fromInt(appMetadata.z),
                                                          cr: moduleName,
                                                          I: options.I
                                                        }
                                                      ),
                                                      A2(
                                                        $elm$core$List$map,
                                                        function(section) {
                                                          return A2(
                                                            $author$project$Instruction$andThen,
                                                            A2(
                                                              $elm$core$Basics$composeR,
                                                              $author$project$Instruction$decodeInput($author$project$Custom$Command$Apps$Push$apiDecoder),
                                                              A2(
                                                                $elm_community$result_extra$Result$Extra$unpack,
                                                                $author$project$Instruction$fail,
                                                                function(body) {
                                                                  return $author$project$Gen$Command$Apps$Modules$Sections$Set$request(
                                                                    {
                                                                      f: true,
                                                                      F: body.F,
                                                                      dg: options.dg,
                                                                      dk: body.dk,
                                                                      Y: body.Y,
                                                                      h: false,
                                                                      aF: options.aF,
                                                                      ag: body.ag,
                                                                      ah: body.ah,
                                                                      b: appMetadata.b3,
                                                                      d: $elm$core$String$fromInt(appMetadata.z),
                                                                      cr: moduleName,
                                                                      dQ: section,
                                                                      I: options.I,
                                                                      E: body.E
                                                                    }
                                                                  );
                                                                }
                                                              )
                                                            ),
                                                            $author$project$FileSystem$readJsonFile(options.e + ("modules/" + (moduleName + ("/" + (section + ".imljson")))))
                                                          );
                                                        },
                                                        sections
                                                      )
                                                    )
                                                  );
                                                }
                                              )
                                            ),
                                            $author$project$FileSystem$readJsonFile(options.e + ("modules/" + (moduleName + "/metadata.json")))
                                          );
                                        }
                                      ),
                                      $author$project$Instruction$sequence
                                    )
                                  )
                                ),
                                $author$project$FileSystem$listDirectories(options.e + "modules/")
                              )
                            ]
                          )
                        ),
                        $author$project$Instruction$sequence(
                          _List_fromArray(
                            [
                              $author$project$Instruction$log("Set Functions"),
                              A2(
                                $author$project$Instruction$andThen,
                                A2(
                                  $elm$core$Basics$composeR,
                                  $author$project$Instruction$decodeInput(
                                    $elm$json$Json$Decode$list($elm$json$Json$Decode$string)
                                  ),
                                  A2(
                                    $elm_community$result_extra$Result$Extra$unpack,
                                    $author$project$Instruction$fail,
                                    A2(
                                      $elm$core$Basics$composeR,
                                      $elm$core$List$map(
                                        function(functionName) {
                                          return _List_fromArray(
                                            [
                                              A2(
                                                $author$project$Instruction$andThen,
                                                $author$project$Instruction$unpackFileContent(
                                                  function(body) {
                                                    return $author$project$Gen$Command$Apps$Functions$Code$Set$request(
                                                      {
                                                        f: true,
                                                        F: body,
                                                        dg: options.dg,
                                                        h: false,
                                                        aF: options.aF,
                                                        b: appMetadata.b3,
                                                        d: $elm$core$String$fromInt(appMetadata.z),
                                                        cq: functionName,
                                                        I: options.I
                                                      }
                                                    );
                                                  }
                                                ),
                                                $author$project$FileSystem$readJavaScriptFile(options.e + ("functions/" + (functionName + "/code.js")))
                                              ),
                                              A2(
                                                $author$project$Instruction$andThen,
                                                $author$project$Instruction$unpackFileContent(
                                                  function(body) {
                                                    return $author$project$Gen$Command$Apps$Functions$Test$Set$request(
                                                      {
                                                        f: true,
                                                        F: body,
                                                        dg: options.dg,
                                                        h: false,
                                                        aF: options.aF,
                                                        b: appMetadata.b3,
                                                        d: $elm$core$String$fromInt(appMetadata.z),
                                                        cq: functionName,
                                                        I: options.I
                                                      }
                                                    );
                                                  }
                                                ),
                                                $author$project$FileSystem$readJavaScriptFile(options.e + ("functions/" + (functionName + "/test.js")))
                                              )
                                            ]
                                          );
                                        }
                                      ),
                                      A2($elm$core$Basics$composeR, $elm$core$List$concat, $author$project$Instruction$sequence)
                                    )
                                  )
                                ),
                                $author$project$FileSystem$listDirectories(options.e + "functions/")
                              )
                            ]
                          )
                        ),
                        $author$project$Instruction$sequence(
                          _List_fromArray(
                            [
                              $author$project$Instruction$log("Set Icon"),
                              A2(
                                $author$project$Instruction$andThen,
                                $author$project$Instruction$unpackFileContent(
                                  function(body) {
                                    return $author$project$Gen$Command$Apps$Icon$Set$request(
                                      {
                                        f: true,
                                        F: body,
                                        dg: options.dg,
                                        h: false,
                                        aF: options.aF,
                                        b: appMetadata.b3,
                                        d: $elm$core$String$fromInt(appMetadata.z),
                                        I: options.I
                                      }
                                    );
                                  }
                                ),
                                $author$project$FileSystem$readImagePngFile(options.e + "assets/icon.png")
                              )
                            ]
                          )
                        )
                      ]
                    )
                  );
                }
              )
            ),
            $author$project$FileSystem$readJsonFile(options.e + "metadata.json")
          );
        }
      );
      var $author$project$Scenario$CustomVariable$Organization = 0;
      var $author$project$Scenario$CustomVariable$Team = 1;
      var $author$project$Scenario$Blueprint$Blueprint = F3(
        function(name, metadata, flow) {
          return { bE: flow, aA: metadata, b3: name };
        }
      );
      var $author$project$Scenario$Blueprint$FlowItem = F6(
        function(id, mapper, metadata, module_, parameters, version) {
          return { ad: id, bX: mapper, aA: metadata, b0: module_, b8: parameters, z: version };
        }
      );
      var $author$project$Scenario$Blueprint$FlowItemMetadata = F5(
        function(expect, restore, designer, _interface, parameters) {
          return { ar: designer, av: expect, bP: _interface, b8: parameters, co: restore };
        }
      );
      var $author$project$Scenario$Blueprint$FlowItemMetadataDesigner = F2(
        function(x, y) {
          return { cX: x, cY: y };
        }
      );
      var $author$project$Scenario$Blueprint$flowItemMetadataDesignerDecoder = A3(
        $NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
        "y",
        $elm$json$Json$Decode$int,
        A3(
          $NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
          "x",
          $elm$json$Json$Decode$int,
          $elm$json$Json$Decode$succeed($author$project$Scenario$Blueprint$FlowItemMetadataDesigner)
        )
      );
      var $author$project$Scenario$Blueprint$FlowItemMetadataExpect = F5(
        function(name, type_, label, required, validate) {
          return { bU: label, b3: name, aI: required, d0: type_, cP: validate };
        }
      );
      var $author$project$Scenario$Blueprint$FlowItemMetadataExpectValidate = function(_enum) {
        return { bz: _enum };
      };
      var $author$project$Scenario$Blueprint$flowItemMetadataExpectValidateDecoder = A3(
        $NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
        "enum",
        $elm$json$Json$Decode$list($elm$json$Json$Decode$string),
        $elm$json$Json$Decode$succeed($author$project$Scenario$Blueprint$FlowItemMetadataExpectValidate)
      );
      var $author$project$Scenario$Blueprint$flowItemMetadataExpectDecoder = A4(
        $NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$optional,
        "validate",
        $elm$json$Json$Decode$nullable($author$project$Scenario$Blueprint$flowItemMetadataExpectValidateDecoder),
        $elm$core$Maybe$Nothing,
        A4(
          $NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$optional,
          "required",
          $elm$json$Json$Decode$bool,
          false,
          A3(
            $NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
            "label",
            $elm$json$Json$Decode$string,
            A3(
              $NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
              "type",
              $elm$json$Json$Decode$string,
              A3(
                $NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
                "name",
                $elm$json$Json$Decode$string,
                $elm$json$Json$Decode$succeed($author$project$Scenario$Blueprint$FlowItemMetadataExpect)
              )
            )
          )
        )
      );
      var $author$project$Scenario$Blueprint$flowItemMetadataInterfaceDecoder = $elm$json$Json$Decode$value;
      var $author$project$Scenario$Blueprint$FlowItemMetadataParameter = F4(
        function(name, type_, label, required) {
          return { bU: label, b3: name, aI: required, d0: type_ };
        }
      );
      var $author$project$Scenario$Blueprint$flowItemMetadataParameterDecoder = A4(
        $NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$optional,
        "required",
        $elm$json$Json$Decode$bool,
        false,
        A3(
          $NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
          "label",
          $elm$json$Json$Decode$string,
          A3(
            $NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
            "type",
            $elm$json$Json$Decode$string,
            A3(
              $NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
              "name",
              $elm$json$Json$Decode$string,
              $elm$json$Json$Decode$succeed($author$project$Scenario$Blueprint$FlowItemMetadataParameter)
            )
          )
        )
      );
      var $author$project$Scenario$Blueprint$FlowItemMetadataRestore = F2(
        function(expect, parameters) {
          return { av: expect, b8: parameters };
        }
      );
      var $author$project$Scenario$Blueprint$flowItemMetadataRestoreExpectDecoder = $elm$json$Json$Decode$value;
      var $author$project$Scenario$Blueprint$flowItemMetadataRestoreParametersDecoder = $elm$json$Json$Decode$value;
      var $author$project$Scenario$Blueprint$flowItemMetadataRestoreDecoder = A4(
        $NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$optional,
        "parameters",
        $author$project$Scenario$Blueprint$flowItemMetadataRestoreParametersDecoder,
        $elm$json$Json$Encode$null,
        A4(
          $NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$optional,
          "expect",
          $author$project$Scenario$Blueprint$flowItemMetadataRestoreExpectDecoder,
          $elm$json$Json$Encode$null,
          $elm$json$Json$Decode$succeed($author$project$Scenario$Blueprint$FlowItemMetadataRestore)
        )
      );
      var $author$project$Scenario$Blueprint$flowItemMetadataDecoder = A4(
        $NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$optional,
        "parameters",
        $elm$json$Json$Decode$list($author$project$Scenario$Blueprint$flowItemMetadataParameterDecoder),
        _List_Nil,
        A4(
          $NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$optional,
          "interface",
          $elm$json$Json$Decode$list($author$project$Scenario$Blueprint$flowItemMetadataInterfaceDecoder),
          _List_Nil,
          A3(
            $NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
            "designer",
            $author$project$Scenario$Blueprint$flowItemMetadataDesignerDecoder,
            A3(
              $NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
              "restore",
              $author$project$Scenario$Blueprint$flowItemMetadataRestoreDecoder,
              A4(
                $NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$optional,
                "expect",
                $elm$json$Json$Decode$list($author$project$Scenario$Blueprint$flowItemMetadataExpectDecoder),
                _List_Nil,
                $elm$json$Json$Decode$succeed($author$project$Scenario$Blueprint$FlowItemMetadata)
              )
            )
          )
        )
      );
      var $author$project$Scenario$Blueprint$ConnectionParameters = function(a) {
        return { $: 0, a };
      };
      var $author$project$Scenario$Blueprint$DataStoreParameters = function(a) {
        return { $: 2, a };
      };
      var $author$project$Scenario$Blueprint$NoParameters = { $: 3 };
      var $author$project$Scenario$Blueprint$WebhookParameters = function(a) {
        return { $: 1, a };
      };
      var $author$project$Scenario$Blueprint$flowItemParametersDecoder = $elm$json$Json$Decode$oneOf(
        _List_fromArray(
          [
            A2(
              $elm$json$Json$Decode$map,
              $author$project$Scenario$Blueprint$ConnectionParameters,
              A3(
                $NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
                "__IMTCONN__",
                $elm$json$Json$Decode$int,
                $elm$json$Json$Decode$succeed(
                  function(imtConn) {
                    return { aY: imtConn };
                  }
                )
              )
            ),
            A2(
              $elm$json$Json$Decode$map,
              $author$project$Scenario$Blueprint$WebhookParameters,
              A3(
                $NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
                "maxResults",
                $elm$json$Json$Decode$int,
                A3(
                  $NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
                  "hook",
                  $elm$json$Json$Decode$int,
                  $elm$json$Json$Decode$succeed(
                    F2(
                      function(hook, maxResults) {
                        return { aX: hook, bZ: maxResults };
                      }
                    )
                  )
                )
              )
            ),
            A2(
              $elm$json$Json$Decode$map,
              $author$project$Scenario$Blueprint$DataStoreParameters,
              A3(
                $NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
                "datastore",
                $elm$json$Json$Decode$int,
                $elm$json$Json$Decode$succeed(
                  function(datastore) {
                    return { aQ: datastore };
                  }
                )
              )
            ),
            $elm$json$Json$Decode$succeed($author$project$Scenario$Blueprint$NoParameters)
          ]
        )
      );
      var $author$project$Scenario$Blueprint$flowItemDecoder = A3(
        $NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
        "version",
        $elm$json$Json$Decode$int,
        A3(
          $NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
          "parameters",
          $author$project$Scenario$Blueprint$flowItemParametersDecoder,
          A3(
            $NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
            "module",
            $elm$json$Json$Decode$string,
            A3(
              $NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
              "metadata",
              $author$project$Scenario$Blueprint$flowItemMetadataDecoder,
              A3(
                $NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
                "mapper",
                $elm$json$Json$Decode$value,
                A3(
                  $NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
                  "id",
                  $elm$json$Json$Decode$int,
                  $elm$json$Json$Decode$succeed($author$project$Scenario$Blueprint$FlowItem)
                )
              )
            )
          )
        )
      );
      var $author$project$Scenario$Blueprint$Metadata = F4(
        function(designer, instant, scenario, version) {
          return { ar: designer, bN: instant, cv: scenario, z: version };
        }
      );
      var $author$project$Scenario$Blueprint$MetadataDesigner = function(orphans) {
        return { b7: orphans };
      };
      var $author$project$Scenario$Blueprint$metadataDesignerDecoder = A3(
        $NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
        "orphans",
        $elm$json$Json$Decode$list(
          $elm$json$Json$Decode$succeed(0)
        ),
        $elm$json$Json$Decode$succeed($author$project$Scenario$Blueprint$MetadataDesigner)
      );
      var $author$project$Scenario$Blueprint$MetadataScenario = F9(
        function(autoCommit, autoCommitTriggerLast, confidential, dataloss, dlq, freshVariables, maxErrors, roundtrips, sequential) {
          return { bh: autoCommit, bi: autoCommitTriggerLast, bn: confidential, br: dataloss, bx: dlq, bH: freshVariables, bY: maxErrors, cp: roundtrips, cz: sequential };
        }
      );
      var $author$project$Scenario$Blueprint$metadataScenarioDecoder = A3(
        $NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
        "sequential",
        $elm$json$Json$Decode$bool,
        A3(
          $NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
          "roundtrips",
          $elm$json$Json$Decode$int,
          A3(
            $NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
            "maxErrors",
            $elm$json$Json$Decode$int,
            A3(
              $NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
              "freshVariables",
              $elm$json$Json$Decode$bool,
              A3(
                $NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
                "dlq",
                $elm$json$Json$Decode$bool,
                A3(
                  $NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
                  "dataloss",
                  $elm$json$Json$Decode$bool,
                  A3(
                    $NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
                    "confidential",
                    $elm$json$Json$Decode$bool,
                    A3(
                      $NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
                      "autoCommitTriggerLast",
                      $elm$json$Json$Decode$bool,
                      A3(
                        $NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
                        "autoCommit",
                        $elm$json$Json$Decode$bool,
                        $elm$json$Json$Decode$succeed($author$project$Scenario$Blueprint$MetadataScenario)
                      )
                    )
                  )
                )
              )
            )
          )
        )
      );
      var $author$project$Scenario$Blueprint$metadataDecoder = A3(
        $NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
        "version",
        $elm$json$Json$Decode$int,
        A3(
          $NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
          "scenario",
          $author$project$Scenario$Blueprint$metadataScenarioDecoder,
          A3(
            $NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
            "instant",
            $elm$json$Json$Decode$bool,
            A3(
              $NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
              "designer",
              $author$project$Scenario$Blueprint$metadataDesignerDecoder,
              $elm$json$Json$Decode$succeed($author$project$Scenario$Blueprint$Metadata)
            )
          )
        )
      );
      var $author$project$Scenario$Blueprint$decoder = A3(
        $NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
        "flow",
        $elm$json$Json$Decode$list($author$project$Scenario$Blueprint$flowItemDecoder),
        A3(
          $NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
          "metadata",
          $author$project$Scenario$Blueprint$metadataDecoder,
          A3(
            $NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
            "name",
            $elm$json$Json$Decode$string,
            $elm$json$Json$Decode$succeed($author$project$Scenario$Blueprint$Blueprint)
          )
        )
      );
      var $author$project$Scenario$Connection$Connection = F5(
        function(accountName, accountType, id, name, scopes) {
          return { c0: accountName, an: accountType, ad: id, b3: name, aJ: scopes };
        }
      );
      var $author$project$Scenario$Connection$decoder = A3(
        $NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
        "scopes",
        $elm$json$Json$Decode$list($elm$json$Json$Decode$string),
        A3(
          $NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
          "name",
          $elm$json$Json$Decode$string,
          A3(
            $NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
            "id",
            $elm$json$Json$Decode$int,
            A3(
              $NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
              "accountType",
              $elm$json$Json$Decode$string,
              A3(
                $NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
                "accountName",
                $elm$json$Json$Decode$string,
                $elm$json$Json$Decode$succeed($author$project$Scenario$Connection$Connection)
              )
            )
          )
        )
      );
      var $author$project$Scenario$DataStore$DataStore = F4(
        function(id, name, dataStructureId, maxSize) {
          return { ap: dataStructureId, ad: id, b_: maxSize, b3: name };
        }
      );
      var $author$project$Scenario$DataStore$decoder = A3(
        $NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
        "maxSize",
        $elm$json$Json$Decode$string,
        A3(
          $NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
          "datastructureId",
          $elm$json$Json$Decode$int,
          A3(
            $NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
            "name",
            $elm$json$Json$Decode$string,
            A3(
              $NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
              "id",
              $elm$json$Json$Decode$int,
              $elm$json$Json$Decode$succeed($author$project$Scenario$DataStore$DataStore)
            )
          )
        )
      );
      var $author$project$Scenario$DataStructure$DataStructure = F4(
        function(id, name, spec, strict) {
          return { ad: id, b3: name, cC: spec, cF: strict };
        }
      );
      var $author$project$Scenario$DataStructure$SpecItem = F6(
        function(_default, label, multiline, name, required, type_) {
          return { aq: _default, bU: label, aD: multiline, b3: name, aI: required, d0: type_ };
        }
      );
      var $author$project$Scenario$DataStructure$specItemDecoder = A3(
        $NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
        "type",
        $elm$json$Json$Decode$string,
        A3(
          $NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
          "required",
          $elm$json$Json$Decode$bool,
          A3(
            $NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
            "name",
            $elm$json$Json$Decode$string,
            A3(
              $NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
              "multiline",
              $elm$json$Json$Decode$bool,
              A4(
                $NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$optional,
                "label",
                $elm$json$Json$Decode$nullable($elm$json$Json$Decode$string),
                $elm$core$Maybe$Nothing,
                A3(
                  $NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
                  "default",
                  $elm$json$Json$Decode$value,
                  $elm$json$Json$Decode$succeed($author$project$Scenario$DataStructure$SpecItem)
                )
              )
            )
          )
        )
      );
      var $author$project$Scenario$DataStructure$decoder = A3(
        $NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
        "strict",
        $elm$json$Json$Decode$bool,
        A3(
          $NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
          "spec",
          $elm$json$Json$Decode$list($author$project$Scenario$DataStructure$specItemDecoder),
          A3(
            $NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
            "name",
            $elm$json$Json$Decode$string,
            A3(
              $NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
              "id",
              $elm$json$Json$Decode$int,
              $elm$json$Json$Decode$succeed($author$project$Scenario$DataStructure$DataStructure)
            )
          )
        )
      );
      var $author$project$Scenario$Scheduling$Daily = F2(
        function(a, b) {
          return { $: 3, a, b };
        }
      );
      var $elm$json$Json$Decode$fail = _Json_fail;
      var $justinmimbs$date$Date$deadEndToString = function(_v0) {
        var problem = _v0.dG;
        if (problem.$ === 12) {
          var message = problem.a;
          return message;
        } else {
          return "Expected a date in ISO 8601 format";
        }
      };
      var $justinmimbs$date$Date$MonthAndDay = F2(
        function(a, b) {
          return { $: 0, a, b };
        }
      );
      var $justinmimbs$date$Date$OrdinalDay = function(a) {
        return { $: 2, a };
      };
      var $justinmimbs$date$Date$WeekAndWeekday = F2(
        function(a, b) {
          return { $: 1, a, b };
        }
      );
      var $elm$parser$Parser$Advanced$commit = function(a) {
        return function(s) {
          return A3($elm$parser$Parser$Advanced$Good, true, a, s);
        };
      };
      var $elm$parser$Parser$commit = $elm$parser$Parser$Advanced$commit;
      var $elm$parser$Parser$mapChompedString = $elm$parser$Parser$Advanced$mapChompedString;
      var $justinmimbs$date$Date$int1 = A2(
        $elm$parser$Parser$mapChompedString,
        F2(
          function(str, _v0) {
            return A2(
              $elm$core$Maybe$withDefault,
              0,
              $elm$core$String$toInt(str)
            );
          }
        ),
        $elm$parser$Parser$chompIf($elm$core$Char$isDigit)
      );
      var $justinmimbs$date$Date$int2 = A2(
        $elm$parser$Parser$mapChompedString,
        F2(
          function(str, _v0) {
            return A2(
              $elm$core$Maybe$withDefault,
              0,
              $elm$core$String$toInt(str)
            );
          }
        ),
        A2(
          $elm$parser$Parser$ignorer,
          A2(
            $elm$parser$Parser$ignorer,
            $elm$parser$Parser$succeed(0),
            $elm$parser$Parser$chompIf($elm$core$Char$isDigit)
          ),
          $elm$parser$Parser$chompIf($elm$core$Char$isDigit)
        )
      );
      var $justinmimbs$date$Date$int3 = A2(
        $elm$parser$Parser$mapChompedString,
        F2(
          function(str, _v0) {
            return A2(
              $elm$core$Maybe$withDefault,
              0,
              $elm$core$String$toInt(str)
            );
          }
        ),
        A2(
          $elm$parser$Parser$ignorer,
          A2(
            $elm$parser$Parser$ignorer,
            A2(
              $elm$parser$Parser$ignorer,
              $elm$parser$Parser$succeed(0),
              $elm$parser$Parser$chompIf($elm$core$Char$isDigit)
            ),
            $elm$parser$Parser$chompIf($elm$core$Char$isDigit)
          ),
          $elm$parser$Parser$chompIf($elm$core$Char$isDigit)
        )
      );
      var $justinmimbs$date$Date$dayOfYear = $elm$parser$Parser$oneOf(
        _List_fromArray(
          [
            A2(
              $elm$parser$Parser$keeper,
              A2(
                $elm$parser$Parser$ignorer,
                $elm$parser$Parser$succeed($elm$core$Basics$identity),
                $elm$parser$Parser$token("-")
              ),
              $elm$parser$Parser$oneOf(
                _List_fromArray(
                  [
                    $elm$parser$Parser$backtrackable(
                      A2(
                        $elm$parser$Parser$andThen,
                        $elm$parser$Parser$commit,
                        A2($elm$parser$Parser$map, $justinmimbs$date$Date$OrdinalDay, $justinmimbs$date$Date$int3)
                      )
                    ),
                    A2(
                      $elm$parser$Parser$keeper,
                      A2(
                        $elm$parser$Parser$keeper,
                        $elm$parser$Parser$succeed($justinmimbs$date$Date$MonthAndDay),
                        $justinmimbs$date$Date$int2
                      ),
                      $elm$parser$Parser$oneOf(
                        _List_fromArray(
                          [
                            A2(
                              $elm$parser$Parser$keeper,
                              A2(
                                $elm$parser$Parser$ignorer,
                                $elm$parser$Parser$succeed($elm$core$Basics$identity),
                                $elm$parser$Parser$token("-")
                              ),
                              $justinmimbs$date$Date$int2
                            ),
                            $elm$parser$Parser$succeed(1)
                          ]
                        )
                      )
                    ),
                    A2(
                      $elm$parser$Parser$keeper,
                      A2(
                        $elm$parser$Parser$keeper,
                        A2(
                          $elm$parser$Parser$ignorer,
                          $elm$parser$Parser$succeed($justinmimbs$date$Date$WeekAndWeekday),
                          $elm$parser$Parser$token("W")
                        ),
                        $justinmimbs$date$Date$int2
                      ),
                      $elm$parser$Parser$oneOf(
                        _List_fromArray(
                          [
                            A2(
                              $elm$parser$Parser$keeper,
                              A2(
                                $elm$parser$Parser$ignorer,
                                $elm$parser$Parser$succeed($elm$core$Basics$identity),
                                $elm$parser$Parser$token("-")
                              ),
                              $justinmimbs$date$Date$int1
                            ),
                            $elm$parser$Parser$succeed(1)
                          ]
                        )
                      )
                    )
                  ]
                )
              )
            ),
            $elm$parser$Parser$backtrackable(
              A2(
                $elm$parser$Parser$andThen,
                $elm$parser$Parser$commit,
                A2(
                  $elm$parser$Parser$keeper,
                  A2(
                    $elm$parser$Parser$keeper,
                    $elm$parser$Parser$succeed($justinmimbs$date$Date$MonthAndDay),
                    $justinmimbs$date$Date$int2
                  ),
                  $elm$parser$Parser$oneOf(
                    _List_fromArray(
                      [
                        $justinmimbs$date$Date$int2,
                        $elm$parser$Parser$succeed(1)
                      ]
                    )
                  )
                )
              )
            ),
            A2($elm$parser$Parser$map, $justinmimbs$date$Date$OrdinalDay, $justinmimbs$date$Date$int3),
            A2(
              $elm$parser$Parser$keeper,
              A2(
                $elm$parser$Parser$keeper,
                A2(
                  $elm$parser$Parser$ignorer,
                  $elm$parser$Parser$succeed($justinmimbs$date$Date$WeekAndWeekday),
                  $elm$parser$Parser$token("W")
                ),
                $justinmimbs$date$Date$int2
              ),
              $elm$parser$Parser$oneOf(
                _List_fromArray(
                  [
                    $justinmimbs$date$Date$int1,
                    $elm$parser$Parser$succeed(1)
                  ]
                )
              )
            ),
            $elm$parser$Parser$succeed(
              $justinmimbs$date$Date$OrdinalDay(1)
            )
          ]
        )
      );
      var $justinmimbs$date$Date$RD = $elm$core$Basics$identity;
      var $elm$core$Basics$modBy = _Basics_modBy;
      var $elm$core$Basics$neq = _Utils_notEqual;
      var $justinmimbs$date$Date$isLeapYear = function(y) {
        return !A2($elm$core$Basics$modBy, 4, y) && !!A2($elm$core$Basics$modBy, 100, y) || !A2($elm$core$Basics$modBy, 400, y);
      };
      var $justinmimbs$date$Date$daysBeforeMonth = F2(
        function(y, m) {
          var leapDays = $justinmimbs$date$Date$isLeapYear(y) ? 1 : 0;
          switch (m) {
            case 0:
              return 0;
            case 1:
              return 31;
            case 2:
              return 59 + leapDays;
            case 3:
              return 90 + leapDays;
            case 4:
              return 120 + leapDays;
            case 5:
              return 151 + leapDays;
            case 6:
              return 181 + leapDays;
            case 7:
              return 212 + leapDays;
            case 8:
              return 243 + leapDays;
            case 9:
              return 273 + leapDays;
            case 10:
              return 304 + leapDays;
            default:
              return 334 + leapDays;
          }
        }
      );
      var $justinmimbs$date$Date$floorDiv = F2(
        function(a, b) {
          return $elm$core$Basics$floor(a / b);
        }
      );
      var $justinmimbs$date$Date$daysBeforeYear = function(y1) {
        var y = y1 - 1;
        var leapYears = A2($justinmimbs$date$Date$floorDiv, y, 4) - A2($justinmimbs$date$Date$floorDiv, y, 100) + A2($justinmimbs$date$Date$floorDiv, y, 400);
        return 365 * y + leapYears;
      };
      var $justinmimbs$date$Date$daysInMonth = F2(
        function(y, m) {
          switch (m) {
            case 0:
              return 31;
            case 1:
              return $justinmimbs$date$Date$isLeapYear(y) ? 29 : 28;
            case 2:
              return 31;
            case 3:
              return 30;
            case 4:
              return 31;
            case 5:
              return 30;
            case 6:
              return 31;
            case 7:
              return 31;
            case 8:
              return 30;
            case 9:
              return 31;
            case 10:
              return 30;
            default:
              return 31;
          }
        }
      );
      var $justinmimbs$date$Date$isBetweenInt = F3(
        function(a, b, x) {
          return _Utils_cmp(a, x) < 1 && _Utils_cmp(x, b) < 1;
        }
      );
      var $justinmimbs$date$Date$monthToName = function(m) {
        switch (m) {
          case 0:
            return "January";
          case 1:
            return "February";
          case 2:
            return "March";
          case 3:
            return "April";
          case 4:
            return "May";
          case 5:
            return "June";
          case 6:
            return "July";
          case 7:
            return "August";
          case 8:
            return "September";
          case 9:
            return "October";
          case 10:
            return "November";
          default:
            return "December";
        }
      };
      var $elm$time$Time$Apr = 3;
      var $elm$time$Time$Aug = 7;
      var $elm$time$Time$Dec = 11;
      var $elm$time$Time$Feb = 1;
      var $elm$time$Time$Jan = 0;
      var $elm$time$Time$Jul = 6;
      var $elm$time$Time$Jun = 5;
      var $elm$time$Time$Mar = 2;
      var $elm$time$Time$May = 4;
      var $elm$time$Time$Nov = 10;
      var $elm$time$Time$Oct = 9;
      var $elm$time$Time$Sep = 8;
      var $justinmimbs$date$Date$numberToMonth = function(mn) {
        var _v0 = A2($elm$core$Basics$max, 1, mn);
        switch (_v0) {
          case 1:
            return 0;
          case 2:
            return 1;
          case 3:
            return 2;
          case 4:
            return 3;
          case 5:
            return 4;
          case 6:
            return 5;
          case 7:
            return 6;
          case 8:
            return 7;
          case 9:
            return 8;
          case 10:
            return 9;
          case 11:
            return 10;
          default:
            return 11;
        }
      };
      var $justinmimbs$date$Date$fromCalendarParts = F3(
        function(y, mn, d) {
          return !A3($justinmimbs$date$Date$isBetweenInt, 1, 12, mn) ? $elm$core$Result$Err(
            "Invalid date: " + ("month " + ($elm$core$String$fromInt(mn) + " is out of range") + (" (1 to 12)" + ("; received (year " + ($elm$core$String$fromInt(y) + (", month " + ($elm$core$String$fromInt(mn) + (", day " + ($elm$core$String$fromInt(d) + ")"))))))))
          ) : !A3(
            $justinmimbs$date$Date$isBetweenInt,
            1,
            A2(
              $justinmimbs$date$Date$daysInMonth,
              y,
              $justinmimbs$date$Date$numberToMonth(mn)
            ),
            d
          ) ? $elm$core$Result$Err(
            "Invalid date: " + ("day " + ($elm$core$String$fromInt(d) + " is out of range") + (" (1 to " + ($elm$core$String$fromInt(
              A2(
                $justinmimbs$date$Date$daysInMonth,
                y,
                $justinmimbs$date$Date$numberToMonth(mn)
              )
            ) + ")") + (" for " + $justinmimbs$date$Date$monthToName(
              $justinmimbs$date$Date$numberToMonth(mn)
            ) + ((mn === 2 && d === 29 ? " (" + ($elm$core$String$fromInt(y) + " is not a leap year)") : "") + ("; received (year " + ($elm$core$String$fromInt(y) + (", month " + ($elm$core$String$fromInt(mn) + (", day " + ($elm$core$String$fromInt(d) + ")"))))))))))
          ) : $elm$core$Result$Ok(
            $justinmimbs$date$Date$daysBeforeYear(y) + A2(
              $justinmimbs$date$Date$daysBeforeMonth,
              y,
              $justinmimbs$date$Date$numberToMonth(mn)
            ) + d
          );
        }
      );
      var $justinmimbs$date$Date$fromOrdinalParts = F2(
        function(y, od) {
          var daysInYear = $justinmimbs$date$Date$isLeapYear(y) ? 366 : 365;
          return !A3($justinmimbs$date$Date$isBetweenInt, 1, daysInYear, od) ? $elm$core$Result$Err(
            "Invalid ordinal date: " + ("ordinal-day " + ($elm$core$String$fromInt(od) + " is out of range") + (" (1 to " + ($elm$core$String$fromInt(daysInYear) + ")") + (" for " + $elm$core$String$fromInt(y) + ("; received (year " + ($elm$core$String$fromInt(y) + (", ordinal-day " + ($elm$core$String$fromInt(od) + ")")))))))
          ) : $elm$core$Result$Ok(
            $justinmimbs$date$Date$daysBeforeYear(y) + od
          );
        }
      );
      var $justinmimbs$date$Date$weekdayNumber = function(_v0) {
        var rd = _v0;
        var _v1 = A2($elm$core$Basics$modBy, 7, rd);
        if (!_v1) {
          return 7;
        } else {
          var n = _v1;
          return n;
        }
      };
      var $justinmimbs$date$Date$daysBeforeWeekYear = function(y) {
        var jan4 = $justinmimbs$date$Date$daysBeforeYear(y) + 4;
        return jan4 - $justinmimbs$date$Date$weekdayNumber(jan4);
      };
      var $justinmimbs$date$Date$firstOfYear = function(y) {
        return $justinmimbs$date$Date$daysBeforeYear(y) + 1;
      };
      var $justinmimbs$date$Date$is53WeekYear = function(y) {
        var wdnJan1 = $justinmimbs$date$Date$weekdayNumber(
          $justinmimbs$date$Date$firstOfYear(y)
        );
        return wdnJan1 === 4 || wdnJan1 === 3 && $justinmimbs$date$Date$isLeapYear(y);
      };
      var $justinmimbs$date$Date$fromWeekParts = F3(
        function(wy, wn, wdn) {
          var weeksInYear = $justinmimbs$date$Date$is53WeekYear(wy) ? 53 : 52;
          return !A3($justinmimbs$date$Date$isBetweenInt, 1, weeksInYear, wn) ? $elm$core$Result$Err(
            "Invalid week date: " + ("week " + ($elm$core$String$fromInt(wn) + " is out of range") + (" (1 to " + ($elm$core$String$fromInt(weeksInYear) + ")") + (" for " + $elm$core$String$fromInt(wy) + ("; received (year " + ($elm$core$String$fromInt(wy) + (", week " + ($elm$core$String$fromInt(wn) + (", weekday " + ($elm$core$String$fromInt(wdn) + ")")))))))))
          ) : !A3($justinmimbs$date$Date$isBetweenInt, 1, 7, wdn) ? $elm$core$Result$Err(
            "Invalid week date: " + ("weekday " + ($elm$core$String$fromInt(wdn) + " is out of range") + (" (1 to 7)" + ("; received (year " + ($elm$core$String$fromInt(wy) + (", week " + ($elm$core$String$fromInt(wn) + (", weekday " + ($elm$core$String$fromInt(wdn) + ")"))))))))
          ) : $elm$core$Result$Ok(
            $justinmimbs$date$Date$daysBeforeWeekYear(wy) + (wn - 1) * 7 + wdn
          );
        }
      );
      var $justinmimbs$date$Date$fromYearAndDayOfYear = function(_v0) {
        var y = _v0.a;
        var doy = _v0.b;
        switch (doy.$) {
          case 0:
            var mn = doy.a;
            var d = doy.b;
            return A3($justinmimbs$date$Date$fromCalendarParts, y, mn, d);
          case 1:
            var wn = doy.a;
            var wdn = doy.b;
            return A3($justinmimbs$date$Date$fromWeekParts, y, wn, wdn);
          default:
            var od = doy.a;
            return A2($justinmimbs$date$Date$fromOrdinalParts, y, od);
        }
      };
      var $justinmimbs$date$Date$int4 = A2(
        $elm$parser$Parser$mapChompedString,
        F2(
          function(str, _v0) {
            return A2(
              $elm$core$Maybe$withDefault,
              0,
              $elm$core$String$toInt(str)
            );
          }
        ),
        A2(
          $elm$parser$Parser$ignorer,
          A2(
            $elm$parser$Parser$ignorer,
            A2(
              $elm$parser$Parser$ignorer,
              A2(
                $elm$parser$Parser$ignorer,
                A2(
                  $elm$parser$Parser$ignorer,
                  $elm$parser$Parser$succeed(0),
                  $elm$parser$Parser$oneOf(
                    _List_fromArray(
                      [
                        $elm$parser$Parser$chompIf(
                          function(c) {
                            return c === "-";
                          }
                        ),
                        $elm$parser$Parser$succeed(0)
                      ]
                    )
                  )
                ),
                $elm$parser$Parser$chompIf($elm$core$Char$isDigit)
              ),
              $elm$parser$Parser$chompIf($elm$core$Char$isDigit)
            ),
            $elm$parser$Parser$chompIf($elm$core$Char$isDigit)
          ),
          $elm$parser$Parser$chompIf($elm$core$Char$isDigit)
        )
      );
      var $justinmimbs$date$Date$resultToParser = function(result) {
        if (!result.$) {
          var x = result.a;
          return $elm$parser$Parser$succeed(x);
        } else {
          var message = result.a;
          return $elm$parser$Parser$problem(message);
        }
      };
      var $justinmimbs$date$Date$parser = A2(
        $elm$parser$Parser$andThen,
        A2($elm$core$Basics$composeR, $justinmimbs$date$Date$fromYearAndDayOfYear, $justinmimbs$date$Date$resultToParser),
        A2(
          $elm$parser$Parser$keeper,
          A2(
            $elm$parser$Parser$keeper,
            $elm$parser$Parser$succeed($elm$core$Tuple$pair),
            $justinmimbs$date$Date$int4
          ),
          $justinmimbs$date$Date$dayOfYear
        )
      );
      var $justinmimbs$date$Date$fromIsoString = A2(
        $elm$core$Basics$composeR,
        $elm$parser$Parser$run(
          A2(
            $elm$parser$Parser$keeper,
            $elm$parser$Parser$succeed($elm$core$Basics$identity),
            A2(
              $elm$parser$Parser$ignorer,
              $justinmimbs$date$Date$parser,
              A2(
                $elm$parser$Parser$andThen,
                $justinmimbs$date$Date$resultToParser,
                $elm$parser$Parser$oneOf(
                  _List_fromArray(
                    [
                      A2($elm$parser$Parser$map, $elm$core$Result$Ok, $elm$parser$Parser$end),
                      A2(
                        $elm$parser$Parser$map,
                        $elm$core$Basics$always(
                          $elm$core$Result$Err("Expected a date only, not a date and time")
                        ),
                        $elm$parser$Parser$chompIf(
                          $elm$core$Basics$eq("T")
                        )
                      ),
                      $elm$parser$Parser$succeed(
                        $elm$core$Result$Err("Expected a date only")
                      )
                    ]
                  )
                )
              )
            )
          )
        ),
        $elm$core$Result$mapError(
          A2(
            $elm$core$Basics$composeR,
            $elm$core$List$head,
            A2(
              $elm$core$Basics$composeR,
              $elm$core$Maybe$map($justinmimbs$date$Date$deadEndToString),
              $elm$core$Maybe$withDefault("")
            )
          )
        )
      );
      var $author$project$Scenario$Scheduling$dateDecoder = A2(
        $elm$json$Json$Decode$andThen,
        function(dateString) {
          var _v0 = $justinmimbs$date$Date$fromIsoString(dateString);
          if (!_v0.$) {
            var v = _v0.a;
            return $elm$json$Json$Decode$succeed(v);
          } else {
            var e = _v0.a;
            return $elm$json$Json$Decode$fail("Could not decode Date: " + e);
          }
        },
        $elm$json$Json$Decode$string
      );
      var $elm$json$Json$Decode$index = _Json_decodeIndex;
      var $author$project$Scenario$Scheduling$betweenDecoder = A3(
        $elm$json$Json$Decode$map2,
        $elm$core$Tuple$pair,
        A2($elm$json$Json$Decode$index, 0, $author$project$Scenario$Scheduling$dateDecoder),
        A2($elm$json$Json$Decode$index, 1, $author$project$Scenario$Scheduling$dateDecoder)
      );
      var $author$project$Scenario$Scheduling$dailyDecoder = A4(
        $NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$optional,
        "between",
        $elm$json$Json$Decode$nullable($author$project$Scenario$Scheduling$betweenDecoder),
        $elm$core$Maybe$Nothing,
        A3(
          $NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
          "time",
          $elm$json$Json$Decode$string,
          $elm$json$Json$Decode$succeed($author$project$Scenario$Scheduling$Daily)
        )
      );
      var $author$project$Scenario$Scheduling$Immediately = { $: 0 };
      var $author$project$Scenario$Scheduling$immediatelyDecoder = $elm$json$Json$Decode$succeed($author$project$Scenario$Scheduling$Immediately);
      var $author$project$Scenario$Scheduling$Indefinitely = F3(
        function(a, b, c) {
          return { $: 1, a, b, c };
        }
      );
      var $author$project$Scenario$Scheduling$Restrict = F3(
        function(time, days, months) {
          return { bu: days, b2: months, cK: time };
        }
      );
      var $author$project$Scenario$Scheduling$restrictDecoder = A3(
        $NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
        "months",
        $elm$json$Json$Decode$list($elm$json$Json$Decode$int),
        A3(
          $NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
          "days",
          $elm$json$Json$Decode$list($elm$json$Json$Decode$int),
          A3(
            $NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
            "time",
            A3(
              $elm$json$Json$Decode$map2,
              $elm$core$Tuple$pair,
              A2($elm$json$Json$Decode$index, 0, $elm$json$Json$Decode$string),
              A2($elm$json$Json$Decode$index, 1, $elm$json$Json$Decode$string)
            ),
            $elm$json$Json$Decode$succeed($author$project$Scenario$Scheduling$Restrict)
          )
        )
      );
      var $author$project$Scenario$Scheduling$indefinitelyDecoder = A4(
        $NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$optional,
        "restrict",
        $elm$json$Json$Decode$nullable($author$project$Scenario$Scheduling$restrictDecoder),
        $elm$core$Maybe$Nothing,
        A4(
          $NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$optional,
          "between",
          $elm$json$Json$Decode$nullable($author$project$Scenario$Scheduling$betweenDecoder),
          $elm$core$Maybe$Nothing,
          A3(
            $NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
            "interval",
            $elm$json$Json$Decode$int,
            $elm$json$Json$Decode$succeed($author$project$Scenario$Scheduling$Indefinitely)
          )
        )
      );
      var $author$project$Scenario$Scheduling$Monthly = F3(
        function(a, b, c) {
          return { $: 5, a, b, c };
        }
      );
      var $author$project$Scenario$Scheduling$monthlyDecoder = A4(
        $NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$optional,
        "between",
        $elm$json$Json$Decode$nullable($author$project$Scenario$Scheduling$betweenDecoder),
        $elm$core$Maybe$Nothing,
        A3(
          $NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
          "days",
          $elm$json$Json$Decode$list($elm$json$Json$Decode$int),
          A3(
            $NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
            "time",
            $elm$json$Json$Decode$string,
            $elm$json$Json$Decode$succeed($author$project$Scenario$Scheduling$Monthly)
          )
        )
      );
      var $author$project$Scenario$Scheduling$OnDemand = { $: 7 };
      var $author$project$Scenario$Scheduling$onDemandDecoder = $elm$json$Json$Decode$succeed($author$project$Scenario$Scheduling$OnDemand);
      var $author$project$Scenario$Scheduling$Once = function(a) {
        return { $: 2, a };
      };
      var $author$project$Scenario$Scheduling$onceDecoder = A3(
        $NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
        "date",
        $author$project$Scenario$Scheduling$dateDecoder,
        $elm$json$Json$Decode$succeed($author$project$Scenario$Scheduling$Once)
      );
      var $author$project$Scenario$Scheduling$Weekly = F3(
        function(a, b, c) {
          return { $: 4, a, b, c };
        }
      );
      var $author$project$Scenario$Scheduling$weeklyDecoder = A4(
        $NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$optional,
        "between",
        $elm$json$Json$Decode$nullable($author$project$Scenario$Scheduling$betweenDecoder),
        $elm$core$Maybe$Nothing,
        A3(
          $NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
          "days",
          $elm$json$Json$Decode$list($elm$json$Json$Decode$int),
          A3(
            $NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
            "time",
            $elm$json$Json$Decode$string,
            $elm$json$Json$Decode$succeed($author$project$Scenario$Scheduling$Weekly)
          )
        )
      );
      var $author$project$Scenario$Scheduling$Yearly = F4(
        function(a, b, c, d) {
          return { $: 6, a, b, c, d };
        }
      );
      var $author$project$Scenario$Scheduling$yearlyDecoder = A4(
        $NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$optional,
        "between",
        $elm$json$Json$Decode$nullable($author$project$Scenario$Scheduling$betweenDecoder),
        $elm$core$Maybe$Nothing,
        A3(
          $NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
          "months",
          $elm$json$Json$Decode$list($elm$json$Json$Decode$int),
          A3(
            $NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
            "days",
            $elm$json$Json$Decode$list($elm$json$Json$Decode$int),
            A3(
              $NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
              "time",
              $elm$json$Json$Decode$string,
              $elm$json$Json$Decode$succeed($author$project$Scenario$Scheduling$Yearly)
            )
          )
        )
      );
      var $author$project$Scenario$Scheduling$decoder = A2(
        $elm$json$Json$Decode$andThen,
        function(type_) {
          switch (type_) {
            case "immediately":
              return $author$project$Scenario$Scheduling$immediatelyDecoder;
            case "indefinitely":
              return $author$project$Scenario$Scheduling$indefinitelyDecoder;
            case "once":
              return $author$project$Scenario$Scheduling$onceDecoder;
            case "daily":
              return $author$project$Scenario$Scheduling$dailyDecoder;
            case "weekly":
              return $author$project$Scenario$Scheduling$weeklyDecoder;
            case "monthly":
              return $author$project$Scenario$Scheduling$monthlyDecoder;
            case "yearly":
              return $author$project$Scenario$Scheduling$yearlyDecoder;
            case "on-demand":
              return $author$project$Scenario$Scheduling$onDemandDecoder;
            default:
              return $elm$json$Json$Decode$fail("Unsupported Scheduling type");
          }
        },
        A2($elm$json$Json$Decode$field, "type", $elm$json$Json$Decode$string)
      );
      var $author$project$Scenario$Webhook$Webhook = F8(
        function(data, enabled, gone, id, name, scenarioId, typeName, type_) {
          return { de: data, as: enabled, aw: gone, ad: id, b3: name, ai: scenarioId, d$: typeName, d0: type_ };
        }
      );
      var $author$project$Scenario$Webhook$AdvancedOptions = F5(
        function(headers, ip, method, stringify, udt) {
          return { dk: headers, ay: ip, Y: method, cG: stringify, d1: udt };
        }
      );
      var $author$project$Scenario$Webhook$advancedOptionsDecoder = A4(
        $NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$optional,
        "udt",
        $elm$json$Json$Decode$nullable($elm$json$Json$Decode$int),
        $elm$core$Maybe$Nothing,
        A3(
          $NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
          "stringify",
          $elm$json$Json$Decode$bool,
          A3(
            $NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
            "method",
            $elm$json$Json$Decode$bool,
            A4(
              $NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$optional,
              "ip",
              $elm$json$Json$Decode$nullable($elm$json$Json$Decode$string),
              $elm$core$Maybe$Nothing,
              A3(
                $NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
                "headers",
                $elm$json$Json$Decode$bool,
                $elm$json$Json$Decode$succeed($author$project$Scenario$Webhook$AdvancedOptions)
              )
            )
          )
        )
      );
      var $author$project$Scenario$Webhook$decoder = A3(
        $NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
        "type",
        $elm$json$Json$Decode$string,
        A3(
          $NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
          "typeName",
          $elm$json$Json$Decode$string,
          A4(
            $NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$optional,
            "scenarioId",
            $elm$json$Json$Decode$nullable($elm$json$Json$Decode$int),
            $elm$core$Maybe$Nothing,
            A3(
              $NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
              "name",
              $elm$json$Json$Decode$string,
              A3(
                $NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
                "id",
                $elm$json$Json$Decode$int,
                A3(
                  $NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
                  "gone",
                  $elm$json$Json$Decode$bool,
                  A3(
                    $NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
                    "enabled",
                    $elm$json$Json$Decode$bool,
                    A3(
                      $NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
                      "data",
                      $author$project$Scenario$Webhook$advancedOptionsDecoder,
                      $elm$json$Json$Decode$succeed($author$project$Scenario$Webhook$Webhook)
                    )
                  )
                )
              )
            )
          )
        )
      );
      var $author$project$Scenario$Blueprint$encodeFlowItemMetadataDesigner = function(flowItemMetadataDesigner) {
        return $elm$json$Json$Encode$object(
          _List_fromArray(
            [
              _Utils_Tuple2(
                "x",
                $elm$json$Json$Encode$int(flowItemMetadataDesigner.cX)
              ),
              _Utils_Tuple2(
                "y",
                $elm$json$Json$Encode$int(flowItemMetadataDesigner.cY)
              )
            ]
          )
        );
      };
      var $author$project$Scenario$Blueprint$encodeFlowItemMetadataExpectValidate = function(flowItemMetadataExpectValidate) {
        return $elm$json$Json$Encode$object(
          _List_fromArray(
            [
              _Utils_Tuple2(
                "enum",
                A2($elm$json$Json$Encode$list, $elm$json$Json$Encode$string, flowItemMetadataExpectValidate.bz)
              )
            ]
          )
        );
      };
      var $author$project$Scenario$Blueprint$encodeFlowItemMetadataExpect = function(flowItemMetadataExpect) {
        return $elm$json$Json$Encode$object(
          _List_fromArray(
            [
              _Utils_Tuple2(
                "name",
                $elm$json$Json$Encode$string(flowItemMetadataExpect.b3)
              ),
              _Utils_Tuple2(
                "type",
                $elm$json$Json$Encode$string(flowItemMetadataExpect.d0)
              ),
              _Utils_Tuple2(
                "label",
                $elm$json$Json$Encode$string(flowItemMetadataExpect.bU)
              ),
              _Utils_Tuple2(
                "required",
                $elm$json$Json$Encode$bool(flowItemMetadataExpect.aI)
              ),
              _Utils_Tuple2(
                "validate",
                A2($elm_community$json_extra$Json$Encode$Extra$maybe, $author$project$Scenario$Blueprint$encodeFlowItemMetadataExpectValidate, flowItemMetadataExpect.cP)
              )
            ]
          )
        );
      };
      var $author$project$Scenario$Blueprint$encodeFlowItemMetadataInterface = function(flowItemMetadataInterface) {
        return flowItemMetadataInterface;
      };
      var $author$project$Scenario$Blueprint$encodeFlowItemMetadataParameter = function(flowItemMetadataParameter) {
        return $elm$json$Json$Encode$object(
          _List_fromArray(
            [
              _Utils_Tuple2(
                "name",
                $elm$json$Json$Encode$string(flowItemMetadataParameter.b3)
              ),
              _Utils_Tuple2(
                "type",
                $elm$json$Json$Encode$string(flowItemMetadataParameter.d0)
              ),
              _Utils_Tuple2(
                "label",
                $elm$json$Json$Encode$string(flowItemMetadataParameter.bU)
              ),
              _Utils_Tuple2(
                "required",
                $elm$json$Json$Encode$bool(flowItemMetadataParameter.aI)
              )
            ]
          )
        );
      };
      var $author$project$Scenario$Blueprint$encodeFlowItemMetadataRestoreExpect = function(flowItemMetadataRestoreExpect) {
        return flowItemMetadataRestoreExpect;
      };
      var $author$project$Scenario$Blueprint$encodeFlowItemMetadataRestoreParameters = function(flowItemMetadataRestoreParameters) {
        return flowItemMetadataRestoreParameters;
      };
      var $author$project$Scenario$Blueprint$encodeFlowItemMetadataRestore = F2(
        function(clearConnectionMapping, flowItemMetadataRestore) {
          return $elm$json$Json$Encode$object(
            _List_fromArray(
              [
                _Utils_Tuple2(
                  "expect",
                  $author$project$Scenario$Blueprint$encodeFlowItemMetadataRestoreExpect(flowItemMetadataRestore.av)
                ),
                _Utils_Tuple2(
                  "parameters",
                  clearConnectionMapping ? $elm$json$Json$Encode$object(_List_Nil) : $author$project$Scenario$Blueprint$encodeFlowItemMetadataRestoreParameters(flowItemMetadataRestore.b8)
                )
              ]
            )
          );
        }
      );
      var $author$project$Scenario$Blueprint$encodeFlowItemMetadata = F2(
        function(clearConnectionMapping, flowItemMetadata) {
          return $elm$json$Json$Encode$object(
            _List_fromArray(
              [
                _Utils_Tuple2(
                  "expect",
                  A2($elm$json$Json$Encode$list, $author$project$Scenario$Blueprint$encodeFlowItemMetadataExpect, flowItemMetadata.av)
                ),
                _Utils_Tuple2(
                  "restore",
                  A2($author$project$Scenario$Blueprint$encodeFlowItemMetadataRestore, clearConnectionMapping, flowItemMetadata.co)
                ),
                _Utils_Tuple2(
                  "designer",
                  $author$project$Scenario$Blueprint$encodeFlowItemMetadataDesigner(flowItemMetadata.ar)
                ),
                _Utils_Tuple2(
                  "interface",
                  A2($elm$json$Json$Encode$list, $author$project$Scenario$Blueprint$encodeFlowItemMetadataInterface, flowItemMetadata.bP)
                ),
                _Utils_Tuple2(
                  "parameters",
                  A2($elm$json$Json$Encode$list, $author$project$Scenario$Blueprint$encodeFlowItemMetadataParameter, flowItemMetadata.b8)
                )
              ]
            )
          );
        }
      );
      var $author$project$Scenario$Blueprint$encodeFlowItemParameters = F2(
        function(clearConnectionMapping, flowItemParameters) {
          switch (flowItemParameters.$) {
            case 0:
              var p = flowItemParameters.a;
              return clearConnectionMapping ? $elm$json$Json$Encode$object(_List_Nil) : $elm$json$Json$Encode$object(
                _List_fromArray(
                  [
                    _Utils_Tuple2(
                      "__IMTCONN__",
                      $elm$json$Json$Encode$int(p.aY)
                    )
                  ]
                )
              );
            case 1:
              var p = flowItemParameters.a;
              return $elm$json$Json$Encode$object(
                _List_fromArray(
                  [
                    _Utils_Tuple2(
                      "hook",
                      $elm$json$Json$Encode$int(p.aX)
                    ),
                    _Utils_Tuple2(
                      "maxResults",
                      $elm$json$Json$Encode$int(p.bZ)
                    )
                  ]
                )
              );
            case 2:
              var p = flowItemParameters.a;
              return $elm$json$Json$Encode$object(
                _List_fromArray(
                  [
                    _Utils_Tuple2(
                      "datastore",
                      $elm$json$Json$Encode$int(p.aQ)
                    )
                  ]
                )
              );
            default:
              return $elm$json$Json$Encode$object(_List_Nil);
          }
        }
      );
      var $author$project$Scenario$Blueprint$encodeFlowItem = F2(
        function(clearConnectionMapping, flowItem) {
          return $elm$json$Json$Encode$object(
            _List_fromArray(
              [
                _Utils_Tuple2(
                  "id",
                  $elm$json$Json$Encode$int(flowItem.ad)
                ),
                _Utils_Tuple2("mapper", flowItem.bX),
                _Utils_Tuple2(
                  "metadata",
                  A2($author$project$Scenario$Blueprint$encodeFlowItemMetadata, clearConnectionMapping, flowItem.aA)
                ),
                _Utils_Tuple2(
                  "module",
                  $elm$json$Json$Encode$string(flowItem.b0)
                ),
                _Utils_Tuple2(
                  "parameters",
                  A2($author$project$Scenario$Blueprint$encodeFlowItemParameters, clearConnectionMapping, flowItem.b8)
                ),
                _Utils_Tuple2(
                  "version",
                  $elm$json$Json$Encode$int(flowItem.z)
                )
              ]
            )
          );
        }
      );
      var $author$project$Scenario$Blueprint$encodeMetadataDesigner = function(metadataDesigner) {
        return $elm$json$Json$Encode$object(
          _List_fromArray(
            [
              _Utils_Tuple2(
                "orphans",
                A2(
                  $elm$json$Json$Encode$list,
                  function(_v0) {
                    return $elm$json$Json$Encode$null;
                  },
                  metadataDesigner.b7
                )
              )
            ]
          )
        );
      };
      var $author$project$Scenario$Blueprint$encodeMetadataScenario = function(metadataScenario) {
        return $elm$json$Json$Encode$object(
          _List_fromArray(
            [
              _Utils_Tuple2(
                "autoCommit",
                $elm$json$Json$Encode$bool(metadataScenario.bh)
              ),
              _Utils_Tuple2(
                "autoCommitTriggerLast",
                $elm$json$Json$Encode$bool(metadataScenario.bi)
              ),
              _Utils_Tuple2(
                "confidential",
                $elm$json$Json$Encode$bool(metadataScenario.bn)
              ),
              _Utils_Tuple2(
                "dataloss",
                $elm$json$Json$Encode$bool(metadataScenario.br)
              ),
              _Utils_Tuple2(
                "dlq",
                $elm$json$Json$Encode$bool(metadataScenario.bx)
              ),
              _Utils_Tuple2(
                "freshVariables",
                $elm$json$Json$Encode$bool(metadataScenario.bH)
              ),
              _Utils_Tuple2(
                "maxErrors",
                $elm$json$Json$Encode$int(metadataScenario.bY)
              ),
              _Utils_Tuple2(
                "roundtrips",
                $elm$json$Json$Encode$int(metadataScenario.cp)
              ),
              _Utils_Tuple2(
                "sequential",
                $elm$json$Json$Encode$bool(metadataScenario.cz)
              )
            ]
          )
        );
      };
      var $author$project$Scenario$Blueprint$encodeMetadata = function(metadata) {
        return $elm$json$Json$Encode$object(
          _List_fromArray(
            [
              _Utils_Tuple2(
                "designer",
                $author$project$Scenario$Blueprint$encodeMetadataDesigner(metadata.ar)
              ),
              _Utils_Tuple2(
                "instant",
                $elm$json$Json$Encode$bool(metadata.bN)
              ),
              _Utils_Tuple2(
                "scenario",
                $author$project$Scenario$Blueprint$encodeMetadataScenario(metadata.cv)
              ),
              _Utils_Tuple2(
                "version",
                $elm$json$Json$Encode$int(metadata.z)
              )
            ]
          )
        );
      };
      var $author$project$Scenario$Blueprint$encode = F2(
        function(clearConnectionMapping, scenario) {
          return $elm$json$Json$Encode$object(
            _List_fromArray(
              [
                _Utils_Tuple2(
                  "name",
                  $elm$json$Json$Encode$string(scenario.b3)
                ),
                _Utils_Tuple2(
                  "metadata",
                  $author$project$Scenario$Blueprint$encodeMetadata(scenario.aA)
                ),
                _Utils_Tuple2(
                  "flow",
                  A2(
                    $elm$json$Json$Encode$list,
                    $author$project$Scenario$Blueprint$encodeFlowItem(clearConnectionMapping),
                    scenario.bE
                  )
                )
              ]
            )
          );
        }
      );
      var $author$project$Scenario$Connection$encode = function(connection) {
        return $elm$json$Json$Encode$object(
          _List_fromArray(
            [
              _Utils_Tuple2(
                "accountName",
                $elm$json$Json$Encode$string(connection.c0)
              ),
              _Utils_Tuple2(
                "accountType",
                $elm$json$Json$Encode$string(connection.an)
              ),
              _Utils_Tuple2(
                "id",
                $elm$json$Json$Encode$int(connection.ad)
              ),
              _Utils_Tuple2(
                "name",
                $elm$json$Json$Encode$string(connection.b3)
              ),
              _Utils_Tuple2(
                "scopes",
                A2(
                  $elm$json$Json$Encode$list,
                  function(s) {
                    return $elm$json$Json$Encode$string(s);
                  },
                  connection.aJ
                )
              )
            ]
          )
        );
      };
      var $author$project$Scenario$DataStore$encode = function(dataStore) {
        return $elm$json$Json$Encode$object(
          _List_fromArray(
            [
              _Utils_Tuple2(
                "id",
                $elm$json$Json$Encode$int(dataStore.ad)
              ),
              _Utils_Tuple2(
                "name",
                $elm$json$Json$Encode$string(dataStore.b3)
              ),
              _Utils_Tuple2(
                "datastructureId",
                $elm$json$Json$Encode$int(dataStore.ap)
              ),
              _Utils_Tuple2(
                "maxSize",
                $elm$json$Json$Encode$string(dataStore.b_)
              )
            ]
          )
        );
      };
      var $author$project$Scenario$DataStructure$encodeSpecItem = function(spec) {
        return $elm$json$Json$Encode$object(
          _List_fromArray(
            [
              _Utils_Tuple2("default", spec.aq),
              _Utils_Tuple2(
                "label",
                A2($elm_community$json_extra$Json$Encode$Extra$maybe, $elm$json$Json$Encode$string, spec.bU)
              ),
              _Utils_Tuple2(
                "multiline",
                $elm$json$Json$Encode$bool(spec.aD)
              ),
              _Utils_Tuple2(
                "name",
                $elm$json$Json$Encode$string(spec.b3)
              ),
              _Utils_Tuple2(
                "required",
                $elm$json$Json$Encode$bool(spec.aI)
              ),
              _Utils_Tuple2(
                "type",
                $elm$json$Json$Encode$string(spec.d0)
              )
            ]
          )
        );
      };
      var $author$project$Scenario$DataStructure$encode = function(dataStructure) {
        return $elm$json$Json$Encode$object(
          _List_fromArray(
            [
              _Utils_Tuple2(
                "id",
                $elm$json$Json$Encode$int(dataStructure.ad)
              ),
              _Utils_Tuple2(
                "name",
                $elm$json$Json$Encode$string(dataStructure.b3)
              ),
              _Utils_Tuple2(
                "spec",
                A2($elm$json$Json$Encode$list, $author$project$Scenario$DataStructure$encodeSpecItem, dataStructure.cC)
              ),
              _Utils_Tuple2(
                "strict",
                $elm$json$Json$Encode$bool(dataStructure.cF)
              )
            ]
          )
        );
      };
      var $justinmimbs$date$Date$monthToNumber = function(m) {
        switch (m) {
          case 0:
            return 1;
          case 1:
            return 2;
          case 2:
            return 3;
          case 3:
            return 4;
          case 4:
            return 5;
          case 5:
            return 6;
          case 6:
            return 7;
          case 7:
            return 8;
          case 8:
            return 9;
          case 9:
            return 10;
          case 10:
            return 11;
          default:
            return 12;
        }
      };
      var $justinmimbs$date$Date$toCalendarDateHelp = F3(
        function(y, m, d) {
          toCalendarDateHelp:
            while (true) {
              var monthDays = A2($justinmimbs$date$Date$daysInMonth, y, m);
              var mn = $justinmimbs$date$Date$monthToNumber(m);
              if (mn < 12 && _Utils_cmp(d, monthDays) > 0) {
                var $temp$y = y, $temp$m = $justinmimbs$date$Date$numberToMonth(mn + 1), $temp$d = d - monthDays;
                y = $temp$y;
                m = $temp$m;
                d = $temp$d;
                continue toCalendarDateHelp;
              } else {
                return { bt: d, b1: m, cZ: y };
              }
            }
        }
      );
      var $justinmimbs$date$Date$divWithRemainder = F2(
        function(a, b) {
          return _Utils_Tuple2(
            A2($justinmimbs$date$Date$floorDiv, a, b),
            A2($elm$core$Basics$modBy, b, a)
          );
        }
      );
      var $justinmimbs$date$Date$year = function(_v0) {
        var rd = _v0;
        var _v1 = A2($justinmimbs$date$Date$divWithRemainder, rd, 146097);
        var n400 = _v1.a;
        var r400 = _v1.b;
        var _v2 = A2($justinmimbs$date$Date$divWithRemainder, r400, 36524);
        var n100 = _v2.a;
        var r100 = _v2.b;
        var _v3 = A2($justinmimbs$date$Date$divWithRemainder, r100, 1461);
        var n4 = _v3.a;
        var r4 = _v3.b;
        var _v4 = A2($justinmimbs$date$Date$divWithRemainder, r4, 365);
        var n1 = _v4.a;
        var r1 = _v4.b;
        var n = !r1 ? 0 : 1;
        return n400 * 400 + n100 * 100 + n4 * 4 + n1 + n;
      };
      var $justinmimbs$date$Date$toOrdinalDate = function(_v0) {
        var rd = _v0;
        var y = $justinmimbs$date$Date$year(rd);
        return {
          a2: rd - $justinmimbs$date$Date$daysBeforeYear(y),
          cZ: y
        };
      };
      var $justinmimbs$date$Date$toCalendarDate = function(_v0) {
        var rd = _v0;
        var date = $justinmimbs$date$Date$toOrdinalDate(rd);
        return A3($justinmimbs$date$Date$toCalendarDateHelp, date.cZ, 0, date.a2);
      };
      var $justinmimbs$date$Date$day = A2(
        $elm$core$Basics$composeR,
        $justinmimbs$date$Date$toCalendarDate,
        function($) {
          return $.bt;
        }
      );
      var $justinmimbs$date$Date$month = A2(
        $elm$core$Basics$composeR,
        $justinmimbs$date$Date$toCalendarDate,
        function($) {
          return $.b1;
        }
      );
      var $justinmimbs$date$Date$monthNumber = A2($elm$core$Basics$composeR, $justinmimbs$date$Date$month, $justinmimbs$date$Date$monthToNumber);
      var $justinmimbs$date$Date$ordinalDay = A2(
        $elm$core$Basics$composeR,
        $justinmimbs$date$Date$toOrdinalDate,
        function($) {
          return $.a2;
        }
      );
      var $elm$core$String$cons = _String_cons;
      var $elm$core$String$fromChar = function(_char) {
        return A2($elm$core$String$cons, _char, "");
      };
      var $elm$core$Bitwise$and = _Bitwise_and;
      var $elm$core$String$repeatHelp = F3(
        function(n, chunk, result) {
          return n <= 0 ? result : A3(
            $elm$core$String$repeatHelp,
            n >> 1,
            _Utils_ap(chunk, chunk),
            !(n & 1) ? result : _Utils_ap(result, chunk)
          );
        }
      );
      var $elm$core$String$repeat = F2(
        function(n, chunk) {
          return A3($elm$core$String$repeatHelp, n, chunk, "");
        }
      );
      var $elm$core$String$padLeft = F3(
        function(n, _char, string) {
          return _Utils_ap(
            A2(
              $elm$core$String$repeat,
              n - $elm$core$String$length(string),
              $elm$core$String$fromChar(_char)
            ),
            string
          );
        }
      );
      var $elm$core$Basics$abs = function(n) {
        return n < 0 ? -n : n;
      };
      var $justinmimbs$date$Date$padSignedInt = F2(
        function(length, _int) {
          return _Utils_ap(
            _int < 0 ? "-" : "",
            A3(
              $elm$core$String$padLeft,
              length,
              "0",
              $elm$core$String$fromInt(
                $elm$core$Basics$abs(_int)
              )
            )
          );
        }
      );
      var $justinmimbs$date$Date$monthToQuarter = function(m) {
        return ($justinmimbs$date$Date$monthToNumber(m) + 2) / 3 | 0;
      };
      var $justinmimbs$date$Date$quarter = A2($elm$core$Basics$composeR, $justinmimbs$date$Date$month, $justinmimbs$date$Date$monthToQuarter);
      var $elm$core$String$right = F2(
        function(n, string) {
          return n < 1 ? "" : A3(
            $elm$core$String$slice,
            -n,
            $elm$core$String$length(string),
            string
          );
        }
      );
      var $elm$time$Time$Fri = 4;
      var $elm$time$Time$Mon = 0;
      var $elm$time$Time$Sat = 5;
      var $elm$time$Time$Sun = 6;
      var $elm$time$Time$Thu = 3;
      var $elm$time$Time$Tue = 1;
      var $elm$time$Time$Wed = 2;
      var $justinmimbs$date$Date$numberToWeekday = function(wdn) {
        var _v0 = A2($elm$core$Basics$max, 1, wdn);
        switch (_v0) {
          case 1:
            return 0;
          case 2:
            return 1;
          case 3:
            return 2;
          case 4:
            return 3;
          case 5:
            return 4;
          case 6:
            return 5;
          default:
            return 6;
        }
      };
      var $justinmimbs$date$Date$toWeekDate = function(_v0) {
        var rd = _v0;
        var wdn = $justinmimbs$date$Date$weekdayNumber(rd);
        var wy = $justinmimbs$date$Date$year(rd + (4 - wdn));
        var week1Day1 = $justinmimbs$date$Date$daysBeforeWeekYear(wy) + 1;
        return {
          cU: 1 + ((rd - week1Day1) / 7 | 0),
          cV: wy,
          d5: $justinmimbs$date$Date$numberToWeekday(wdn)
        };
      };
      var $justinmimbs$date$Date$weekNumber = A2(
        $elm$core$Basics$composeR,
        $justinmimbs$date$Date$toWeekDate,
        function($) {
          return $.cU;
        }
      );
      var $justinmimbs$date$Date$weekYear = A2(
        $elm$core$Basics$composeR,
        $justinmimbs$date$Date$toWeekDate,
        function($) {
          return $.cV;
        }
      );
      var $justinmimbs$date$Date$weekday = A2($elm$core$Basics$composeR, $justinmimbs$date$Date$weekdayNumber, $justinmimbs$date$Date$numberToWeekday);
      var $elm$core$Basics$min = F2(
        function(x, y) {
          return _Utils_cmp(x, y) < 0 ? x : y;
        }
      );
      var $justinmimbs$date$Date$ordinalSuffix = function(n) {
        var nn = A2($elm$core$Basics$modBy, 100, n);
        var _v0 = A2(
          $elm$core$Basics$min,
          nn < 20 ? nn : A2($elm$core$Basics$modBy, 10, nn),
          4
        );
        switch (_v0) {
          case 1:
            return "st";
          case 2:
            return "nd";
          case 3:
            return "rd";
          default:
            return "th";
        }
      };
      var $justinmimbs$date$Date$withOrdinalSuffix = function(n) {
        return _Utils_ap(
          $elm$core$String$fromInt(n),
          $justinmimbs$date$Date$ordinalSuffix(n)
        );
      };
      var $justinmimbs$date$Date$formatField = F4(
        function(language, _char, length, date) {
          switch (_char) {
            case "y":
              if (length === 2) {
                return A2(
                  $elm$core$String$right,
                  2,
                  A3(
                    $elm$core$String$padLeft,
                    2,
                    "0",
                    $elm$core$String$fromInt(
                      $justinmimbs$date$Date$year(date)
                    )
                  )
                );
              } else {
                return A2(
                  $justinmimbs$date$Date$padSignedInt,
                  length,
                  $justinmimbs$date$Date$year(date)
                );
              }
            case "Y":
              if (length === 2) {
                return A2(
                  $elm$core$String$right,
                  2,
                  A3(
                    $elm$core$String$padLeft,
                    2,
                    "0",
                    $elm$core$String$fromInt(
                      $justinmimbs$date$Date$weekYear(date)
                    )
                  )
                );
              } else {
                return A2(
                  $justinmimbs$date$Date$padSignedInt,
                  length,
                  $justinmimbs$date$Date$weekYear(date)
                );
              }
            case "Q":
              switch (length) {
                case 1:
                  return $elm$core$String$fromInt(
                    $justinmimbs$date$Date$quarter(date)
                  );
                case 2:
                  return $elm$core$String$fromInt(
                    $justinmimbs$date$Date$quarter(date)
                  );
                case 3:
                  return "Q" + $elm$core$String$fromInt(
                    $justinmimbs$date$Date$quarter(date)
                  );
                case 4:
                  return $justinmimbs$date$Date$withOrdinalSuffix(
                    $justinmimbs$date$Date$quarter(date)
                  );
                case 5:
                  return $elm$core$String$fromInt(
                    $justinmimbs$date$Date$quarter(date)
                  );
                default:
                  return "";
              }
            case "M":
              switch (length) {
                case 1:
                  return $elm$core$String$fromInt(
                    $justinmimbs$date$Date$monthNumber(date)
                  );
                case 2:
                  return A3(
                    $elm$core$String$padLeft,
                    2,
                    "0",
                    $elm$core$String$fromInt(
                      $justinmimbs$date$Date$monthNumber(date)
                    )
                  );
                case 3:
                  return language.aB(
                    $justinmimbs$date$Date$month(date)
                  );
                case 4:
                  return language.a0(
                    $justinmimbs$date$Date$month(date)
                  );
                case 5:
                  return A2(
                    $elm$core$String$left,
                    1,
                    language.aB(
                      $justinmimbs$date$Date$month(date)
                    )
                  );
                default:
                  return "";
              }
            case "w":
              switch (length) {
                case 1:
                  return $elm$core$String$fromInt(
                    $justinmimbs$date$Date$weekNumber(date)
                  );
                case 2:
                  return A3(
                    $elm$core$String$padLeft,
                    2,
                    "0",
                    $elm$core$String$fromInt(
                      $justinmimbs$date$Date$weekNumber(date)
                    )
                  );
                default:
                  return "";
              }
            case "d":
              switch (length) {
                case 1:
                  return $elm$core$String$fromInt(
                    $justinmimbs$date$Date$day(date)
                  );
                case 2:
                  return A3(
                    $elm$core$String$padLeft,
                    2,
                    "0",
                    $elm$core$String$fromInt(
                      $justinmimbs$date$Date$day(date)
                    )
                  );
                case 3:
                  return language.aR(
                    $justinmimbs$date$Date$day(date)
                  );
                default:
                  return "";
              }
            case "D":
              switch (length) {
                case 1:
                  return $elm$core$String$fromInt(
                    $justinmimbs$date$Date$ordinalDay(date)
                  );
                case 2:
                  return A3(
                    $elm$core$String$padLeft,
                    2,
                    "0",
                    $elm$core$String$fromInt(
                      $justinmimbs$date$Date$ordinalDay(date)
                    )
                  );
                case 3:
                  return A3(
                    $elm$core$String$padLeft,
                    3,
                    "0",
                    $elm$core$String$fromInt(
                      $justinmimbs$date$Date$ordinalDay(date)
                    )
                  );
                default:
                  return "";
              }
            case "E":
              switch (length) {
                case 1:
                  return language.U(
                    $justinmimbs$date$Date$weekday(date)
                  );
                case 2:
                  return language.U(
                    $justinmimbs$date$Date$weekday(date)
                  );
                case 3:
                  return language.U(
                    $justinmimbs$date$Date$weekday(date)
                  );
                case 4:
                  return language.bc(
                    $justinmimbs$date$Date$weekday(date)
                  );
                case 5:
                  return A2(
                    $elm$core$String$left,
                    1,
                    language.U(
                      $justinmimbs$date$Date$weekday(date)
                    )
                  );
                case 6:
                  return A2(
                    $elm$core$String$left,
                    2,
                    language.U(
                      $justinmimbs$date$Date$weekday(date)
                    )
                  );
                default:
                  return "";
              }
            case "e":
              switch (length) {
                case 1:
                  return $elm$core$String$fromInt(
                    $justinmimbs$date$Date$weekdayNumber(date)
                  );
                case 2:
                  return $elm$core$String$fromInt(
                    $justinmimbs$date$Date$weekdayNumber(date)
                  );
                default:
                  return A4($justinmimbs$date$Date$formatField, language, "E", length, date);
              }
            default:
              return "";
          }
        }
      );
      var $justinmimbs$date$Date$formatWithTokens = F3(
        function(language, tokens, date) {
          return A3(
            $elm$core$List$foldl,
            F2(
              function(token, formatted) {
                if (!token.$) {
                  var _char = token.a;
                  var length = token.b;
                  return _Utils_ap(
                    A4($justinmimbs$date$Date$formatField, language, _char, length, date),
                    formatted
                  );
                } else {
                  var str = token.a;
                  return _Utils_ap(str, formatted);
                }
              }
            ),
            "",
            tokens
          );
        }
      );
      var $justinmimbs$date$Pattern$Literal = function(a) {
        return { $: 1, a };
      };
      var $justinmimbs$date$Pattern$escapedQuote = A2(
        $elm$parser$Parser$ignorer,
        $elm$parser$Parser$succeed(
          $justinmimbs$date$Pattern$Literal("'")
        ),
        $elm$parser$Parser$token("''")
      );
      var $justinmimbs$date$Pattern$Field = F2(
        function(a, b) {
          return { $: 0, a, b };
        }
      );
      var $elm$parser$Parser$Advanced$getOffset = function(s) {
        return A3($elm$parser$Parser$Advanced$Good, false, s.b6, s);
      };
      var $elm$parser$Parser$getOffset = $elm$parser$Parser$Advanced$getOffset;
      var $justinmimbs$date$Pattern$fieldRepeats = function(str) {
        var _v0 = $elm$core$String$toList(str);
        if (_v0.b && !_v0.b.b) {
          var _char = _v0.a;
          return A2(
            $elm$parser$Parser$keeper,
            A2(
              $elm$parser$Parser$keeper,
              $elm$parser$Parser$succeed(
                F2(
                  function(x, y) {
                    return A2($justinmimbs$date$Pattern$Field, _char, 1 + (y - x));
                  }
                )
              ),
              A2(
                $elm$parser$Parser$ignorer,
                $elm$parser$Parser$getOffset,
                $elm$parser$Parser$chompWhile(
                  $elm$core$Basics$eq(_char)
                )
              )
            ),
            $elm$parser$Parser$getOffset
          );
        } else {
          return $elm$parser$Parser$problem("expected exactly one char");
        }
      };
      var $justinmimbs$date$Pattern$field = A2(
        $elm$parser$Parser$andThen,
        $justinmimbs$date$Pattern$fieldRepeats,
        $elm$parser$Parser$getChompedString(
          $elm$parser$Parser$chompIf($elm$core$Char$isAlpha)
        )
      );
      var $justinmimbs$date$Pattern$finalize = A2(
        $elm$core$List$foldl,
        F2(
          function(token, tokens) {
            var _v0 = _Utils_Tuple2(token, tokens);
            if (_v0.a.$ === 1 && _v0.b.b && _v0.b.a.$ === 1) {
              var x = _v0.a.a;
              var _v1 = _v0.b;
              var y = _v1.a.a;
              var rest = _v1.b;
              return A2(
                $elm$core$List$cons,
                $justinmimbs$date$Pattern$Literal(
                  _Utils_ap(x, y)
                ),
                rest
              );
            } else {
              return A2($elm$core$List$cons, token, tokens);
            }
          }
        ),
        _List_Nil
      );
      var $elm$parser$Parser$Advanced$lazy = function(thunk) {
        return function(s) {
          var _v0 = thunk(0);
          var parse = _v0;
          return parse(s);
        };
      };
      var $elm$parser$Parser$lazy = $elm$parser$Parser$Advanced$lazy;
      var $justinmimbs$date$Pattern$isLiteralChar = function(_char) {
        return _char !== "'" && !$elm$core$Char$isAlpha(_char);
      };
      var $justinmimbs$date$Pattern$literal = A2(
        $elm$parser$Parser$map,
        $justinmimbs$date$Pattern$Literal,
        $elm$parser$Parser$getChompedString(
          A2(
            $elm$parser$Parser$ignorer,
            A2(
              $elm$parser$Parser$ignorer,
              $elm$parser$Parser$succeed(0),
              $elm$parser$Parser$chompIf($justinmimbs$date$Pattern$isLiteralChar)
            ),
            $elm$parser$Parser$chompWhile($justinmimbs$date$Pattern$isLiteralChar)
          )
        )
      );
      var $justinmimbs$date$Pattern$quotedHelp = function(result) {
        return $elm$parser$Parser$oneOf(
          _List_fromArray(
            [
              A2(
                $elm$parser$Parser$andThen,
                function(str) {
                  return $justinmimbs$date$Pattern$quotedHelp(
                    _Utils_ap(result, str)
                  );
                },
                $elm$parser$Parser$getChompedString(
                  A2(
                    $elm$parser$Parser$ignorer,
                    A2(
                      $elm$parser$Parser$ignorer,
                      $elm$parser$Parser$succeed(0),
                      $elm$parser$Parser$chompIf(
                        $elm$core$Basics$neq("'")
                      )
                    ),
                    $elm$parser$Parser$chompWhile(
                      $elm$core$Basics$neq("'")
                    )
                  )
                )
              ),
              A2(
                $elm$parser$Parser$andThen,
                function(_v0) {
                  return $justinmimbs$date$Pattern$quotedHelp(result + "'");
                },
                $elm$parser$Parser$token("''")
              ),
              $elm$parser$Parser$succeed(result)
            ]
          )
        );
      };
      var $justinmimbs$date$Pattern$quoted = A2(
        $elm$parser$Parser$keeper,
        A2(
          $elm$parser$Parser$ignorer,
          $elm$parser$Parser$succeed($justinmimbs$date$Pattern$Literal),
          $elm$parser$Parser$chompIf(
            $elm$core$Basics$eq("'")
          )
        ),
        A2(
          $elm$parser$Parser$ignorer,
          $justinmimbs$date$Pattern$quotedHelp(""),
          $elm$parser$Parser$oneOf(
            _List_fromArray(
              [
                $elm$parser$Parser$chompIf(
                  $elm$core$Basics$eq("'")
                ),
                $elm$parser$Parser$end
              ]
            )
          )
        )
      );
      var $justinmimbs$date$Pattern$patternHelp = function(tokens) {
        return $elm$parser$Parser$oneOf(
          _List_fromArray(
            [
              A2(
                $elm$parser$Parser$andThen,
                function(token) {
                  return $justinmimbs$date$Pattern$patternHelp(
                    A2($elm$core$List$cons, token, tokens)
                  );
                },
                $elm$parser$Parser$oneOf(
                  _List_fromArray(
                    [$justinmimbs$date$Pattern$field, $justinmimbs$date$Pattern$literal, $justinmimbs$date$Pattern$escapedQuote, $justinmimbs$date$Pattern$quoted]
                  )
                )
              ),
              $elm$parser$Parser$lazy(
                function(_v0) {
                  return $elm$parser$Parser$succeed(
                    $justinmimbs$date$Pattern$finalize(tokens)
                  );
                }
              )
            ]
          )
        );
      };
      var $justinmimbs$date$Pattern$fromString = function(str) {
        return A2(
          $elm$core$Result$withDefault,
          _List_fromArray(
            [
              $justinmimbs$date$Pattern$Literal(str)
            ]
          ),
          A2(
            $elm$parser$Parser$run,
            $justinmimbs$date$Pattern$patternHelp(_List_Nil),
            str
          )
        );
      };
      var $justinmimbs$date$Date$formatWithLanguage = F2(
        function(language, pattern) {
          var tokens = $elm$core$List$reverse(
            $justinmimbs$date$Pattern$fromString(pattern)
          );
          return A2($justinmimbs$date$Date$formatWithTokens, language, tokens);
        }
      );
      var $justinmimbs$date$Date$weekdayToName = function(wd) {
        switch (wd) {
          case 0:
            return "Monday";
          case 1:
            return "Tuesday";
          case 2:
            return "Wednesday";
          case 3:
            return "Thursday";
          case 4:
            return "Friday";
          case 5:
            return "Saturday";
          default:
            return "Sunday";
        }
      };
      var $justinmimbs$date$Date$language_en = {
        aR: $justinmimbs$date$Date$withOrdinalSuffix,
        a0: $justinmimbs$date$Date$monthToName,
        aB: A2(
          $elm$core$Basics$composeR,
          $justinmimbs$date$Date$monthToName,
          $elm$core$String$left(3)
        ),
        bc: $justinmimbs$date$Date$weekdayToName,
        U: A2(
          $elm$core$Basics$composeR,
          $justinmimbs$date$Date$weekdayToName,
          $elm$core$String$left(3)
        )
      };
      var $justinmimbs$date$Date$format = function(pattern) {
        return A2($justinmimbs$date$Date$formatWithLanguage, $justinmimbs$date$Date$language_en, pattern);
      };
      var $justinmimbs$date$Date$toIsoString = $justinmimbs$date$Date$format("yyyy-MM-dd");
      var $author$project$Scenario$Scheduling$encodeDate = A2($elm$core$Basics$composeR, $justinmimbs$date$Date$toIsoString, $elm$json$Json$Encode$string);
      var $author$project$Scenario$Scheduling$encodeBetween = function(_v0) {
        var startDate = _v0.a;
        var endDate = _v0.b;
        return A2(
          $elm$json$Json$Encode$list,
          $author$project$Scenario$Scheduling$encodeDate,
          _List_fromArray(
            [startDate, endDate]
          )
        );
      };
      var $author$project$Scenario$Scheduling$encodeTime = $elm$json$Json$Encode$string;
      var $author$project$Scenario$Scheduling$encodeRestrict = function(_v0) {
        var time = _v0.cK;
        var days = _v0.bu;
        var months = _v0.b2;
        return $elm$json$Json$Encode$object(
          _List_fromArray(
            [
              _Utils_Tuple2(
                "time",
                A2(
                  $elm$json$Json$Encode$list,
                  $author$project$Scenario$Scheduling$encodeTime,
                  _List_fromArray(
                    [time.a, time.b]
                  )
                )
              ),
              _Utils_Tuple2(
                "days",
                A2($elm$json$Json$Encode$list, $elm$json$Json$Encode$int, days)
              ),
              _Utils_Tuple2(
                "months",
                A2($elm$json$Json$Encode$list, $elm$json$Json$Encode$int, months)
              )
            ]
          )
        );
      };
      var $elm$core$List$filter = F2(
        function(isGood, list) {
          return A3(
            $elm$core$List$foldr,
            F2(
              function(x, xs) {
                return isGood(x) ? A2($elm$core$List$cons, x, xs) : xs;
              }
            ),
            _List_Nil,
            list
          );
        }
      );
      var $author$project$Scenario$Scheduling$skipNullValues = $elm$core$List$filter(
        function(_v0) {
          var v = _v0.b;
          return !_Utils_eq(v, $elm$json$Json$Encode$null);
        }
      );
      var $author$project$Scenario$Scheduling$encode = function(scheduling) {
        return $elm$json$Json$Encode$object(
          function() {
            switch (scheduling.$) {
              case 0:
                return _List_fromArray(
                  [
                    _Utils_Tuple2(
                      "type",
                      $elm$json$Json$Encode$string("immediately")
                    )
                  ]
                );
              case 1:
                var interval = scheduling.a;
                var between = scheduling.b;
                var restrict = scheduling.c;
                return $author$project$Scenario$Scheduling$skipNullValues(
                  _List_fromArray(
                    [
                      _Utils_Tuple2(
                        "type",
                        $elm$json$Json$Encode$string("indefinitely")
                      ),
                      _Utils_Tuple2(
                        "interval",
                        $elm$json$Json$Encode$int(interval)
                      ),
                      _Utils_Tuple2(
                        "between",
                        A2($elm_community$json_extra$Json$Encode$Extra$maybe, $author$project$Scenario$Scheduling$encodeBetween, between)
                      ),
                      _Utils_Tuple2(
                        "restrict",
                        A2($elm_community$json_extra$Json$Encode$Extra$maybe, $author$project$Scenario$Scheduling$encodeRestrict, restrict)
                      )
                    ]
                  )
                );
              case 2:
                var date = scheduling.a;
                return _List_fromArray(
                  [
                    _Utils_Tuple2(
                      "type",
                      $elm$json$Json$Encode$string("once")
                    ),
                    _Utils_Tuple2(
                      "date",
                      $author$project$Scenario$Scheduling$encodeDate(date)
                    )
                  ]
                );
              case 3:
                var time = scheduling.a;
                var between = scheduling.b;
                return $author$project$Scenario$Scheduling$skipNullValues(
                  _List_fromArray(
                    [
                      _Utils_Tuple2(
                        "type",
                        $elm$json$Json$Encode$string("daily")
                      ),
                      _Utils_Tuple2(
                        "time",
                        $author$project$Scenario$Scheduling$encodeTime(time)
                      ),
                      _Utils_Tuple2(
                        "between",
                        A2($elm_community$json_extra$Json$Encode$Extra$maybe, $author$project$Scenario$Scheduling$encodeBetween, between)
                      )
                    ]
                  )
                );
              case 4:
                var time = scheduling.a;
                var days = scheduling.b;
                var between = scheduling.c;
                return $author$project$Scenario$Scheduling$skipNullValues(
                  _List_fromArray(
                    [
                      _Utils_Tuple2(
                        "type",
                        $elm$json$Json$Encode$string("weekly")
                      ),
                      _Utils_Tuple2(
                        "time",
                        $author$project$Scenario$Scheduling$encodeTime(time)
                      ),
                      _Utils_Tuple2(
                        "days",
                        A2($elm$json$Json$Encode$list, $elm$json$Json$Encode$int, days)
                      ),
                      _Utils_Tuple2(
                        "between",
                        A2($elm_community$json_extra$Json$Encode$Extra$maybe, $author$project$Scenario$Scheduling$encodeBetween, between)
                      )
                    ]
                  )
                );
              case 5:
                var time = scheduling.a;
                var days = scheduling.b;
                var between = scheduling.c;
                return $author$project$Scenario$Scheduling$skipNullValues(
                  _List_fromArray(
                    [
                      _Utils_Tuple2(
                        "type",
                        $elm$json$Json$Encode$string("monthly")
                      ),
                      _Utils_Tuple2(
                        "time",
                        $author$project$Scenario$Scheduling$encodeTime(time)
                      ),
                      _Utils_Tuple2(
                        "days",
                        A2($elm$json$Json$Encode$list, $elm$json$Json$Encode$int, days)
                      ),
                      _Utils_Tuple2(
                        "between",
                        A2($elm_community$json_extra$Json$Encode$Extra$maybe, $author$project$Scenario$Scheduling$encodeBetween, between)
                      )
                    ]
                  )
                );
              case 6:
                var time = scheduling.a;
                var days = scheduling.b;
                var months = scheduling.c;
                var between = scheduling.d;
                return $author$project$Scenario$Scheduling$skipNullValues(
                  _List_fromArray(
                    [
                      _Utils_Tuple2(
                        "type",
                        $elm$json$Json$Encode$string("yearly")
                      ),
                      _Utils_Tuple2(
                        "time",
                        $author$project$Scenario$Scheduling$encodeTime(time)
                      ),
                      _Utils_Tuple2(
                        "days",
                        A2($elm$json$Json$Encode$list, $elm$json$Json$Encode$int, days)
                      ),
                      _Utils_Tuple2(
                        "months",
                        A2($elm$json$Json$Encode$list, $elm$json$Json$Encode$int, months)
                      ),
                      _Utils_Tuple2(
                        "between",
                        A2($elm_community$json_extra$Json$Encode$Extra$maybe, $author$project$Scenario$Scheduling$encodeBetween, between)
                      )
                    ]
                  )
                );
              default:
                return _List_fromArray(
                  [
                    _Utils_Tuple2(
                      "type",
                      $elm$json$Json$Encode$string("on-demand")
                    )
                  ]
                );
            }
          }()
        );
      };
      var $author$project$Scenario$Webhook$encodeAdvancedOptions = function(webhookData) {
        return $elm$json$Json$Encode$object(
          _List_fromArray(
            [
              _Utils_Tuple2(
                "headers",
                $elm$json$Json$Encode$bool(webhookData.dk)
              ),
              _Utils_Tuple2(
                "ip",
                A2($elm_community$json_extra$Json$Encode$Extra$maybe, $elm$json$Json$Encode$string, webhookData.ay)
              ),
              _Utils_Tuple2(
                "method",
                $elm$json$Json$Encode$bool(webhookData.Y)
              ),
              _Utils_Tuple2(
                "stringify",
                $elm$json$Json$Encode$bool(webhookData.cG)
              ),
              _Utils_Tuple2(
                "udt",
                A2($elm_community$json_extra$Json$Encode$Extra$maybe, $elm$json$Json$Encode$int, webhookData.d1)
              )
            ]
          )
        );
      };
      var $author$project$Scenario$Webhook$encode = function(webhook) {
        return $elm$json$Json$Encode$object(
          _List_fromArray(
            [
              _Utils_Tuple2(
                "id",
                $elm$json$Json$Encode$int(webhook.ad)
              ),
              _Utils_Tuple2(
                "name",
                $elm$json$Json$Encode$string(webhook.b3)
              ),
              _Utils_Tuple2(
                "typeName",
                $elm$json$Json$Encode$string(webhook.d$)
              ),
              _Utils_Tuple2(
                "type",
                $elm$json$Json$Encode$string(webhook.d0)
              ),
              _Utils_Tuple2(
                "data",
                $author$project$Scenario$Webhook$encodeAdvancedOptions(webhook.de)
              ),
              _Utils_Tuple2(
                "enabled",
                $elm$json$Json$Encode$bool(webhook.as)
              ),
              _Utils_Tuple2(
                "gone",
                $elm$json$Json$Encode$bool(webhook.aw)
              ),
              _Utils_Tuple2(
                "scenarioId",
                A2($elm_community$json_extra$Json$Encode$Extra$maybe, $elm$json$Json$Encode$int, webhook.ai)
              )
            ]
          )
        );
      };
      var $elm$core$Dict$filter = F2(
        function(isGood, dict) {
          return A3(
            $elm$core$Dict$foldl,
            F3(
              function(k, v, d) {
                return A2(isGood, k, v) ? A3($elm$core$Dict$insert, k, v, d) : d;
              }
            ),
            $elm$core$Dict$empty,
            dict
          );
        }
      );
      var $author$project$Scenario$Connection$fromBlueprint = function(scenarioBlueprint) {
        return A2(
          $elm$core$List$filterMap,
          function(flowItem) {
            var _v0 = flowItem.b8;
            if (!_v0.$) {
              var connectionParameters = _v0.a;
              return A2(
                $elm$core$Maybe$map,
                function(accountName) {
                  return _Utils_Tuple2(connectionParameters.aY, accountName);
                },
                $elm$core$List$head(
                  A2(
                    $elm$core$List$map,
                    function(param) {
                      return A3($elm$core$String$replace, "account:", "", param.d0);
                    },
                    A2(
                      $elm$core$List$filter,
                      function(param) {
                        return param.b3 === "__IMTCONN__";
                      },
                      flowItem.aA.b8
                    )
                  )
                )
              );
            } else {
              return $elm$core$Maybe$Nothing;
            }
          },
          scenarioBlueprint.bE
        );
      };
      var $elm_community$maybe_extra$Maybe$Extra$combineHelp = F2(
        function(list, acc) {
          combineHelp:
            while (true) {
              if (list.b) {
                var head = list.a;
                var tail = list.b;
                if (!head.$) {
                  var a = head.a;
                  var $temp$list = tail, $temp$acc = A2($elm$core$List$cons, a, acc);
                  list = $temp$list;
                  acc = $temp$acc;
                  continue combineHelp;
                } else {
                  return $elm$core$Maybe$Nothing;
                }
              } else {
                return $elm$core$Maybe$Just(
                  $elm$core$List$reverse(acc)
                );
              }
            }
        }
      );
      var $elm_community$maybe_extra$Maybe$Extra$combine = function(list) {
        return A2($elm_community$maybe_extra$Maybe$Extra$combineHelp, list, _List_Nil);
      };
      var $elm$core$List$concatMap = F2(
        function(f, list) {
          return $elm$core$List$concat(
            A2($elm$core$List$map, f, list)
          );
        }
      );
      var $elm$regex$Regex$find = _Regex_findAtMost(_Regex_infinity);
      var $elm_community$maybe_extra$Maybe$Extra$cons = F2(
        function(item, list) {
          if (!item.$) {
            var v = item.a;
            return A2($elm$core$List$cons, v, list);
          } else {
            return list;
          }
        }
      );
      var $elm_community$maybe_extra$Maybe$Extra$values = A2($elm$core$List$foldr, $elm_community$maybe_extra$Maybe$Extra$cons, _List_Nil);
      var $author$project$Scenario$CustomVariable$fromBlueprint = function(scenarioBlueprint) {
        var customVariableRegex = A2(
          $elm$core$Maybe$withDefault,
          $elm$regex$Regex$never,
          $elm$regex$Regex$fromString("{{var\\.(organization|team)\\.(.+?)}}")
        );
        return $elm$core$Dict$fromList(
          $elm_community$maybe_extra$Maybe$Extra$values(
            A2(
              $elm$core$List$concatMap,
              function(flowItem) {
                return A2(
                  $elm$core$List$map,
                  function(match) {
                    var _v0 = $elm_community$maybe_extra$Maybe$Extra$combine(match.dW);
                    if (!_v0.$ && _v0.a.b && _v0.a.b.b && !_v0.a.b.b.b) {
                      var _v1 = _v0.a;
                      var scope2 = _v1.a;
                      var _v2 = _v1.b;
                      var name = _v2.a;
                      switch (scope2) {
                        case "organization":
                          return $elm$core$Maybe$Just(
                            _Utils_Tuple2(name, 0)
                          );
                        case "team":
                          return $elm$core$Maybe$Just(
                            _Utils_Tuple2(name, 1)
                          );
                        default:
                          return $elm$core$Maybe$Nothing;
                      }
                    } else {
                      return $elm$core$Maybe$Nothing;
                    }
                  },
                  A2(
                    $elm$regex$Regex$find,
                    customVariableRegex,
                    A2($elm$json$Json$Encode$encode, 0, flowItem.bX)
                  )
                );
              },
              scenarioBlueprint.bE
            )
          )
        );
      };
      var $author$project$Scenario$DataStore$fromBlueprint = function(scenarioBlueprint) {
        return A2(
          $elm$core$List$filterMap,
          function(flowItem) {
            var _v0 = flowItem.b8;
            if (_v0.$ === 2) {
              var dataStoreParameters = _v0.a;
              return $elm$core$Maybe$Just(dataStoreParameters.aQ);
            } else {
              return $elm$core$Maybe$Nothing;
            }
          },
          scenarioBlueprint.bE
        );
      };
      var $author$project$Scenario$Webhook$fromBlueprint = function(scenarioBlueprint) {
        return A2(
          $elm$core$List$filterMap,
          function(flowItem) {
            var _v0 = flowItem.b8;
            if (_v0.$ === 1) {
              var webhookParameters = _v0.a;
              return $elm$core$Maybe$Just(
                _Utils_Tuple2(webhookParameters.aX, flowItem.b0)
              );
            } else {
              return $elm$core$Maybe$Nothing;
            }
          },
          scenarioBlueprint.bE
        );
      };
      var $elm$core$Dict$isEmpty = function(dict) {
        if (dict.$ === -2) {
          return true;
        } else {
          return false;
        }
      };
      var $author$project$Gen$Command$Connection$Get$responseDecoder = A2(
        $elm$json$Json$Decode$at,
        _List_fromArray(
          ["connection"]
        ),
        $elm$json$Json$Decode$value
      );
      var $author$project$Api$Url$listStringQueryParameter = F2(
        function(key, value) {
          if (!value.$) {
            var v = value.a;
            return A2(
              $elm$core$List$map,
              $elm$url$Url$Builder$string(key),
              v
            );
          } else {
            return _List_Nil;
          }
        }
      );
      var $author$project$Gen$Command$Connection$Get$url = function(options) {
        return $author$project$Api$Url$url(
          {
            dg: options.dg,
            dC: A3(
              $elm$core$String$replace,
              "{connectionId}",
              $elm$core$String$fromInt(options.da),
              "/connections/{connectionId}"
            ),
            dH: $elm$core$List$concat(
              _List_fromArray(
                [
                  A2($author$project$Api$Url$listStringQueryParameter, "cols[]", options.aO)
                ]
              )
            )
          }
        );
      };
      var $author$project$Gen$Command$Connection$Get$request = function(options) {
        var body = $elm$core$Maybe$Nothing;
        return A2(
          $author$project$Instruction$request,
          options.aF,
          $author$project$Api$Request$get(
            {
              H: $author$project$Api$Response$resolveToJson($author$project$Gen$Command$Connection$Get$responseDecoder),
              I: options.I,
              E: $author$project$Gen$Command$Connection$Get$url(options)
            }
          )
        );
      };
      var $author$project$Gen$Command$DataStores$Get$responseDecoder = A2(
        $elm$json$Json$Decode$at,
        _List_fromArray(
          ["dataStore"]
        ),
        $elm$json$Json$Decode$value
      );
      var $author$project$Gen$Command$DataStores$Get$url = function(options) {
        return $author$project$Api$Url$url(
          {
            dg: options.dg,
            dC: A3(
              $elm$core$String$replace,
              "{dataStoreId}",
              $elm$core$String$fromInt(options.df),
              "/data-stores/{dataStoreId}"
            ),
            dH: $elm$core$List$concat(
              _List_fromArray(
                [
                  A2($author$project$Api$Url$listStringQueryParameter, "cols[]", options.aO)
                ]
              )
            )
          }
        );
      };
      var $author$project$Gen$Command$DataStores$Get$request = function(options) {
        var body = $elm$core$Maybe$Nothing;
        return A2(
          $author$project$Instruction$request,
          options.aF,
          $author$project$Api$Request$get(
            {
              H: $author$project$Api$Response$resolveToJson($author$project$Gen$Command$DataStores$Get$responseDecoder),
              I: options.I,
              E: $author$project$Gen$Command$DataStores$Get$url(options)
            }
          )
        );
      };
      var $author$project$Gen$Command$DataStructures$Update$responseDecoder = A2(
        $elm$json$Json$Decode$at,
        _List_fromArray(
          ["dataStructure"]
        ),
        $elm$json$Json$Decode$value
      );
      var $author$project$Gen$Command$DataStructures$Update$url = function(options) {
        return $author$project$Api$Url$url(
          {
            dg: options.dg,
            dC: A3(
              $elm$core$String$replace,
              "{dataStructureId}",
              $elm$core$String$fromInt(options.ap),
              "/data-structures/{dataStructureId}"
            ),
            dH: $elm$core$List$concat(_List_Nil)
          }
        );
      };
      var $author$project$Gen$Command$DataStructures$Update$request = function(options) {
        var body = $author$project$Api$Body$applicationJson(
          $elm$json$Json$Encode$object(
            _List_fromArray(
              [
                _Utils_Tuple2(
                  "name",
                  A2($elm_community$json_extra$Json$Encode$Extra$maybe, $elm$json$Json$Encode$string, options.b3)
                ),
                _Utils_Tuple2(
                  "strict",
                  A2($elm_community$json_extra$Json$Encode$Extra$maybe, $elm$json$Json$Encode$bool, options.cF)
                ),
                _Utils_Tuple2(
                  "spec",
                  A2(
                    $elm_community$json_extra$Json$Encode$Extra$maybe,
                    $elm$json$Json$Encode$list($elm$json$Json$Encode$string),
                    options.cC
                  )
                )
              ]
            )
          )
        );
        return A2(
          $author$project$Instruction$request,
          options.aF,
          $author$project$Api$Request$patch(
            {
              F: body,
              H: $author$project$Api$Response$resolveToJson($author$project$Gen$Command$DataStructures$Update$responseDecoder),
              I: options.I,
              E: $author$project$Gen$Command$DataStructures$Update$url(options)
            }
          )
        );
      };
      var $author$project$Gen$Command$Hooks$Get$responseDecoder = A2(
        $elm$json$Json$Decode$at,
        _List_fromArray(
          ["hook"]
        ),
        $elm$json$Json$Decode$value
      );
      var $author$project$Gen$Command$Hooks$Get$url = function(options) {
        return $author$project$Api$Url$url(
          {
            dg: options.dg,
            dC: A3(
              $elm$core$String$replace,
              "{hookId}",
              $elm$core$String$fromInt(options.dn),
              "/hooks/{hookId}"
            ),
            dH: $elm$core$List$concat(_List_Nil)
          }
        );
      };
      var $author$project$Gen$Command$Hooks$Get$request = function(options) {
        var body = $elm$core$Maybe$Nothing;
        return A2(
          $author$project$Instruction$request,
          options.aF,
          $author$project$Api$Request$get(
            {
              H: $author$project$Api$Response$resolveToJson($author$project$Gen$Command$Hooks$Get$responseDecoder),
              I: options.I,
              E: $author$project$Gen$Command$Hooks$Get$url(options)
            }
          )
        );
      };
      var $author$project$Gen$Command$Organizations$Variables$Get$responseDecoder = A2(
        $elm$json$Json$Decode$at,
        _List_fromArray(
          ["organizationVariables"]
        ),
        $elm$json$Json$Decode$value
      );
      var $author$project$Gen$Command$Organizations$Variables$Get$url = function(options) {
        return $author$project$Api$Url$url(
          {
            dg: options.dg,
            dC: A3(
              $elm$core$String$replace,
              "{organizationId}",
              $elm$core$String$fromInt(options.a3),
              "/organizations/{organizationId}/variables"
            ),
            dH: $elm$core$List$concat(_List_Nil)
          }
        );
      };
      var $author$project$Gen$Command$Organizations$Variables$Get$request = function(options) {
        var body = $elm$core$Maybe$Nothing;
        return A2(
          $author$project$Instruction$request,
          options.aF,
          $author$project$Api$Request$get(
            {
              H: $author$project$Api$Response$resolveToJson($author$project$Gen$Command$Organizations$Variables$Get$responseDecoder),
              I: options.I,
              E: $author$project$Gen$Command$Organizations$Variables$Get$url(options)
            }
          )
        );
      };
      var $author$project$Gen$Command$Scenarios$Blueprints$Get$responseDecoder = A2(
        $elm$json$Json$Decode$at,
        _List_fromArray(
          ["response", "blueprint"]
        ),
        $elm$json$Json$Decode$value
      );
      var $elm$url$Url$Builder$int = F2(
        function(key, value) {
          return A2(
            $elm$url$Url$Builder$QueryParameter,
            $elm$url$Url$percentEncode(key),
            $elm$core$String$fromInt(value)
          );
        }
      );
      var $author$project$Api$Url$optionalIntQueryParameter = F2(
        function(key, value) {
          if (!value.$) {
            var v = value.a;
            return _List_fromArray(
              [
                A2($elm$url$Url$Builder$int, key, v)
              ]
            );
          } else {
            return _List_Nil;
          }
        }
      );
      var $author$project$Gen$Command$Scenarios$Blueprints$Get$url = function(options) {
        return $author$project$Api$Url$url(
          {
            dg: options.dg,
            dC: A3(
              $elm$core$String$replace,
              "{scenarioId}",
              $elm$core$String$fromInt(options.ai),
              "/scenarios/{scenarioId}/blueprint"
            ),
            dH: $elm$core$List$concat(
              _List_fromArray(
                [
                  A2($author$project$Api$Url$optionalIntQueryParameter, "blueprintId", options.aN),
                  A2($author$project$Api$Url$boolQueryParameter, "draft", options.aT)
                ]
              )
            )
          }
        );
      };
      var $author$project$Gen$Command$Scenarios$Blueprints$Get$request = function(options) {
        var body = $elm$core$Maybe$Nothing;
        return A2(
          $author$project$Instruction$request,
          options.aF,
          $author$project$Api$Request$get(
            {
              H: $author$project$Api$Response$resolveToJson($author$project$Gen$Command$Scenarios$Blueprints$Get$responseDecoder),
              I: options.I,
              E: $author$project$Gen$Command$Scenarios$Blueprints$Get$url(options)
            }
          )
        );
      };
      var $author$project$Gen$Command$Scenarios$Get$responseDecoder = A2(
        $elm$json$Json$Decode$at,
        _List_fromArray(
          ["scenario"]
        ),
        $elm$json$Json$Decode$value
      );
      var $author$project$Gen$Command$Scenarios$Get$url = function(options) {
        return $author$project$Api$Url$url(
          {
            dg: options.dg,
            dC: A3(
              $elm$core$String$replace,
              "{scenarioId}",
              $elm$core$String$fromInt(options.ai),
              "/scenarios/{scenarioId}"
            ),
            dH: $elm$core$List$concat(
              _List_fromArray(
                [
                  A2($author$project$Api$Url$listStringQueryParameter, "cols[]", options.aO)
                ]
              )
            )
          }
        );
      };
      var $author$project$Gen$Command$Scenarios$Get$request = function(options) {
        var body = $elm$core$Maybe$Nothing;
        return A2(
          $author$project$Instruction$request,
          options.aF,
          $author$project$Api$Request$get(
            {
              H: $author$project$Api$Response$resolveToJson($author$project$Gen$Command$Scenarios$Get$responseDecoder),
              I: options.I,
              E: $author$project$Gen$Command$Scenarios$Get$url(options)
            }
          )
        );
      };
      var $author$project$Gen$Command$Teams$Variables$Get$responseDecoder = A2(
        $elm$json$Json$Decode$at,
        _List_fromArray(
          ["teamVariables"]
        ),
        $elm$json$Json$Decode$value
      );
      var $author$project$Gen$Command$Teams$Variables$Get$url = function(options) {
        return $author$project$Api$Url$url(
          {
            dg: options.dg,
            dC: A3(
              $elm$core$String$replace,
              "{teamId}",
              $elm$core$String$fromInt(options.ba),
              "/teams/{teamId}/variables"
            ),
            dH: $elm$core$List$concat(_List_Nil)
          }
        );
      };
      var $author$project$Gen$Command$Teams$Variables$Get$request = function(options) {
        var body = $elm$core$Maybe$Nothing;
        return A2(
          $author$project$Instruction$request,
          options.aF,
          $author$project$Api$Request$get(
            {
              H: $author$project$Api$Response$resolveToJson($author$project$Gen$Command$Teams$Variables$Get$responseDecoder),
              I: options.I,
              E: $author$project$Gen$Command$Teams$Variables$Get$url(options)
            }
          )
        );
      };
      var $author$project$Custom$Command$Scenarios$Pull$saveVariable = F3(
        function(customVariables, output, metadata) {
          var _v0 = A2(
            $elm$json$Json$Decode$decodeValue,
            A2($elm$json$Json$Decode$field, "name", $elm$json$Json$Decode$string),
            metadata
          );
          if (_v0.$ === 1) {
            var e = _v0.a;
            return $author$project$Instruction$fail(
              $elm$json$Json$Decode$errorToString(e)
            );
          } else {
            var varName = _v0.a;
            var _v1 = A2($elm$core$Dict$get, varName, customVariables);
            if (!_v1.$) {
              var scope2 = _v1.a;
              var directory = function() {
                if (!scope2) {
                  return "organizationVariables/";
                } else {
                  return "teamVariables/";
                }
              }();
              return $author$project$Instruction$sequence(
                _List_fromArray(
                  [
                    $author$project$Instruction$log(varName),
                    A2($author$project$FileSystem$writeJsonFile, output + ("variables/" + (directory + (varName + ".json"))), metadata)
                  ]
                )
              );
            } else {
              return $author$project$Instruction$log("Skip system variable");
            }
          }
        }
      );
      var $author$project$Custom$Command$Scenarios$Pull$run = F2(
        function(options, config) {
          return $author$project$Instruction$sequence(
            _List_fromArray(
              [
                $author$project$Instruction$log("Get Scenario Blueprint"),
                A2(
                  $author$project$Instruction$andThen,
                  A2(
                    $elm$core$Basics$composeR,
                    $author$project$Instruction$decodeInput($author$project$Scenario$Blueprint$decoder),
                    A2(
                      $elm_community$result_extra$Result$Extra$unpack,
                      $author$project$Instruction$fail,
                      function(scenarioBlueprint) {
                        var webhooks = $author$project$Scenario$Webhook$fromBlueprint(scenarioBlueprint);
                        var dataStores = $author$project$Scenario$DataStore$fromBlueprint(scenarioBlueprint);
                        var customVariables = $author$project$Scenario$CustomVariable$fromBlueprint(scenarioBlueprint);
                        var connections = $author$project$Scenario$Connection$fromBlueprint(scenarioBlueprint);
                        return $author$project$Instruction$sequence(
                          _List_fromArray(
                            [
                              $author$project$Instruction$sequence(
                                _List_fromArray(
                                  [
                                    $author$project$Instruction$log("Write Blueprint file"),
                                    A2(
                                      $author$project$FileSystem$writeJsonFile,
                                      A2($elm$core$Maybe$withDefault, "", options.aF) + "blueprint.json",
                                      A2($author$project$Scenario$Blueprint$encode, false, scenarioBlueprint)
                                    )
                                  ]
                                )
                              ),
                              $author$project$Instruction$sequence(
                                $elm$core$List$concat(
                                  A2(
                                    $elm$core$List$map,
                                    function(_v0) {
                                      var connectionId = _v0.a;
                                      var accountName = _v0.b;
                                      return _List_fromArray(
                                        [
                                          $author$project$Instruction$log(
                                            "Get Connection with Id = " + $elm$core$String$fromInt(connectionId)
                                          ),
                                          A2(
                                            $author$project$Instruction$andThen,
                                            A2(
                                              $elm$core$Basics$composeR,
                                              $author$project$Instruction$decodeInput($author$project$Scenario$Connection$decoder),
                                              A2(
                                                $elm_community$result_extra$Result$Extra$unpack,
                                                $author$project$Instruction$fail,
                                                function(connection) {
                                                  return A2(
                                                    $author$project$FileSystem$writeJsonFile,
                                                    A2($elm$core$Maybe$withDefault, "", options.aF) + ("connections/" + (connection.c0 + ("_" + ($elm$core$String$fromInt(connection.ad) + ".json")))),
                                                    $author$project$Scenario$Connection$encode(connection)
                                                  );
                                                }
                                              )
                                            ),
                                            $author$project$Gen$Command$Connection$Get$request(
                                              {
                                                aO: $elm$core$Maybe$Just(
                                                  _List_fromArray(
                                                    ["id", "accountName", "name", "accountType", "scopes"]
                                                  )
                                                ),
                                                da: connectionId,
                                                dg: options.dg,
                                                aF: $elm$core$Maybe$Nothing,
                                                I: options.I
                                              }
                                            )
                                          )
                                        ]
                                      );
                                    },
                                    connections
                                  )
                                )
                              ),
                              $author$project$Instruction$sequence(
                                $elm$core$List$concat(
                                  A2(
                                    $elm$core$List$map,
                                    function(_v1) {
                                      var webhookId = _v1.a;
                                      var typeName = _v1.b;
                                      return _List_fromArray(
                                        [
                                          $author$project$Instruction$log(
                                            "Get Webhook with Id = " + $elm$core$String$fromInt(webhookId)
                                          ),
                                          A2(
                                            $author$project$Instruction$andThen,
                                            A2(
                                              $elm$core$Basics$composeR,
                                              $author$project$Instruction$decodeInput($author$project$Scenario$Webhook$decoder),
                                              A2(
                                                $elm_community$result_extra$Result$Extra$unpack,
                                                $author$project$Instruction$fail,
                                                function(webhook) {
                                                  return $author$project$Instruction$sequence(
                                                    _List_fromArray(
                                                      [
                                                        A2(
                                                          $author$project$FileSystem$writeJsonFile,
                                                          A2($elm$core$Maybe$withDefault, "", options.aF) + ("webhooks/" + (webhook.d$ + ("_" + ($elm$core$String$fromInt(webhook.ad) + ".json")))),
                                                          $author$project$Scenario$Webhook$encode(webhook)
                                                        ),
                                                        $author$project$Instruction$sequence(
                                                          function() {
                                                            var _v2 = webhook.de.d1;
                                                            if (!_v2.$) {
                                                              var dataStructureId = _v2.a;
                                                              return _List_fromArray(
                                                                [
                                                                  $author$project$Instruction$log(
                                                                    "Get Data Structure with Id = " + $elm$core$String$fromInt(dataStructureId)
                                                                  ),
                                                                  A2(
                                                                    $author$project$Instruction$andThen,
                                                                    A2(
                                                                      $elm$core$Basics$composeR,
                                                                      $author$project$Instruction$decodeInput($author$project$Scenario$DataStructure$decoder),
                                                                      A2(
                                                                        $elm_community$result_extra$Result$Extra$unpack,
                                                                        $author$project$Instruction$fail,
                                                                        function(dataStructure) {
                                                                          return A2(
                                                                            $author$project$FileSystem$writeJsonFile,
                                                                            A2($elm$core$Maybe$withDefault, "", options.aF) + ("dataStructures/" + ($elm$core$String$fromInt(dataStructure.ad) + ".json")),
                                                                            $author$project$Scenario$DataStructure$encode(dataStructure)
                                                                          );
                                                                        }
                                                                      )
                                                                    ),
                                                                    $author$project$Gen$Command$DataStructures$Update$request(
                                                                      { ap: dataStructureId, dg: options.dg, b3: $elm$core$Maybe$Nothing, aF: $elm$core$Maybe$Nothing, cC: $elm$core$Maybe$Nothing, cF: $elm$core$Maybe$Nothing, I: options.I }
                                                                    )
                                                                  )
                                                                ]
                                                              );
                                                            } else {
                                                              return _List_fromArray(
                                                                [
                                                                  $author$project$Instruction$log("No Data Structure for Webhook")
                                                                ]
                                                              );
                                                            }
                                                          }()
                                                        )
                                                      ]
                                                    )
                                                  );
                                                }
                                              )
                                            ),
                                            $author$project$Gen$Command$Hooks$Get$request(
                                              { dg: options.dg, dn: webhookId, aF: $elm$core$Maybe$Nothing, I: options.I }
                                            )
                                          )
                                        ]
                                      );
                                    },
                                    webhooks
                                  )
                                )
                              ),
                              $author$project$Instruction$sequence(
                                $elm$core$List$concat(
                                  A2(
                                    $elm$core$List$map,
                                    function(dataStoreId) {
                                      return _List_fromArray(
                                        [
                                          $author$project$Instruction$log(
                                            "Get Data Store with Id = " + $elm$core$String$fromInt(dataStoreId)
                                          ),
                                          A2(
                                            $author$project$Instruction$andThen,
                                            A2(
                                              $elm$core$Basics$composeR,
                                              $author$project$Instruction$decodeInput($author$project$Scenario$DataStore$decoder),
                                              A2(
                                                $elm_community$result_extra$Result$Extra$unpack,
                                                $author$project$Instruction$fail,
                                                function(dataStore) {
                                                  return $author$project$Instruction$sequence(
                                                    _List_fromArray(
                                                      [
                                                        A2(
                                                          $author$project$FileSystem$writeJsonFile,
                                                          A2($elm$core$Maybe$withDefault, "", options.aF) + ("dataStores/" + ($elm$core$String$fromInt(dataStore.ad) + ".json")),
                                                          $author$project$Scenario$DataStore$encode(dataStore)
                                                        ),
                                                        $author$project$Instruction$sequence(
                                                          _List_fromArray(
                                                            [
                                                              $author$project$Instruction$log(
                                                                "Get Data Structure with Id = " + $elm$core$String$fromInt(dataStore.ap)
                                                              ),
                                                              A2(
                                                                $author$project$Instruction$andThen,
                                                                A2(
                                                                  $elm$core$Basics$composeR,
                                                                  $author$project$Instruction$decodeInput($author$project$Scenario$DataStructure$decoder),
                                                                  A2(
                                                                    $elm_community$result_extra$Result$Extra$unpack,
                                                                    $author$project$Instruction$fail,
                                                                    function(dataStructure) {
                                                                      return A2(
                                                                        $author$project$FileSystem$writeJsonFile,
                                                                        A2($elm$core$Maybe$withDefault, "", options.aF) + ("dataStructures/" + ($elm$core$String$fromInt(dataStructure.ad) + ".json")),
                                                                        $author$project$Scenario$DataStructure$encode(dataStructure)
                                                                      );
                                                                    }
                                                                  )
                                                                ),
                                                                $author$project$Gen$Command$DataStructures$Update$request(
                                                                  { ap: dataStore.ap, dg: options.dg, b3: $elm$core$Maybe$Nothing, aF: $elm$core$Maybe$Nothing, cC: $elm$core$Maybe$Nothing, cF: $elm$core$Maybe$Nothing, I: options.I }
                                                                )
                                                              )
                                                            ]
                                                          )
                                                        )
                                                      ]
                                                    )
                                                  );
                                                }
                                              )
                                            ),
                                            $author$project$Gen$Command$DataStores$Get$request(
                                              {
                                                aO: $elm$core$Maybe$Just(
                                                  _List_fromArray(
                                                    ["id", "name", "datastructureId", "maxSize"]
                                                  )
                                                ),
                                                df: dataStoreId,
                                                dg: options.dg,
                                                aF: $elm$core$Maybe$Nothing,
                                                I: options.I
                                              }
                                            )
                                          )
                                        ]
                                      );
                                    },
                                    dataStores
                                  )
                                )
                              ),
                              $elm$core$Dict$isEmpty(
                                A2(
                                  $elm$core$Dict$filter,
                                  F2(
                                    function(_v3, type_) {
                                      return !type_;
                                    }
                                  ),
                                  customVariables
                                )
                              ) ? $author$project$Instruction$log("Skip Custom Organization Variables") : A2(
                                $author$project$Instruction$andThen,
                                A2(
                                  $elm$core$Basics$composeR,
                                  $author$project$Instruction$decodeInput(
                                    $elm$json$Json$Decode$list($elm$json$Json$Decode$value)
                                  ),
                                  $author$project$Instruction$forEach(
                                    A2(
                                      $author$project$Custom$Command$Scenarios$Pull$saveVariable,
                                      customVariables,
                                      A2($elm$core$Maybe$withDefault, "", options.aF)
                                    )
                                  )
                                ),
                                $author$project$Gen$Command$Organizations$Variables$Get$request(
                                  { dg: options.dg, a3: options.a3, aF: $elm$core$Maybe$Nothing, I: options.I }
                                )
                              ),
                              $elm$core$Dict$isEmpty(
                                A2(
                                  $elm$core$Dict$filter,
                                  F2(
                                    function(_v4, type_) {
                                      return type_ === 1;
                                    }
                                  ),
                                  customVariables
                                )
                              ) ? $author$project$Instruction$log("Skip Custom Team Variables") : A2(
                                $author$project$Instruction$andThen,
                                A2(
                                  $elm$core$Basics$composeR,
                                  $author$project$Instruction$decodeInput(
                                    $elm$json$Json$Decode$list($elm$json$Json$Decode$value)
                                  ),
                                  $author$project$Instruction$forEach(
                                    A2(
                                      $author$project$Custom$Command$Scenarios$Pull$saveVariable,
                                      customVariables,
                                      A2($elm$core$Maybe$withDefault, "", options.aF)
                                    )
                                  )
                                ),
                                $author$project$Gen$Command$Teams$Variables$Get$request(
                                  { dg: options.dg, aF: $elm$core$Maybe$Nothing, ba: options.ba, I: options.I }
                                )
                              )
                            ]
                          )
                        );
                      }
                    )
                  ),
                  $author$project$Gen$Command$Scenarios$Blueprints$Get$request(
                    { aN: options.aN, dg: options.dg, aT: options.aT, aF: $elm$core$Maybe$Nothing, ai: options.ai, I: options.I }
                  )
                ),
                $author$project$Instruction$log("Get Scenario Scheduling"),
                A2(
                  $author$project$Instruction$andThen,
                  A2(
                    $elm$core$Basics$composeR,
                    $author$project$Instruction$decodeInput(
                      A2(
                        $elm$json$Json$Decode$at,
                        _List_fromArray(
                          ["scheduling"]
                        ),
                        $author$project$Scenario$Scheduling$decoder
                      )
                    ),
                    A2(
                      $elm_community$result_extra$Result$Extra$unpack,
                      $author$project$Instruction$fail,
                      function(scheduling) {
                        return A2(
                          $author$project$FileSystem$writeJsonFile,
                          A2($elm$core$Maybe$withDefault, "", options.aF) + "scheduling.json",
                          $author$project$Scenario$Scheduling$encode(scheduling)
                        );
                      }
                    )
                  ),
                  $author$project$Gen$Command$Scenarios$Get$request(
                    {
                      aO: $elm$core$Maybe$Just(
                        _List_fromArray(
                          ["scheduling"]
                        )
                      ),
                      dg: options.dg,
                      aF: $elm$core$Maybe$Nothing,
                      ai: options.ai,
                      I: options.I
                    }
                  )
                )
              ]
            )
          );
        }
      );
      var $elm$json$Json$Decode$keyValuePairs = _Json_decodeKeyValuePairs;
      var $elm$json$Json$Decode$dict = function(decoder) {
        return A2(
          $elm$json$Json$Decode$map,
          $elm$core$Dict$fromList,
          $elm$json$Json$Decode$keyValuePairs(decoder)
        );
      };
      var $elm$core$List$isEmpty = function(xs) {
        if (!xs.b) {
          return true;
        } else {
          return false;
        }
      };
      var $author$project$Instruction$map5 = F6(
        function(func, instructionA, instructionB, instructionC, instructionD, instructionE) {
          return A2(
            $author$project$Instruction$andThen,
            function(a) {
              return A2(
                $author$project$Instruction$andThen,
                function(b) {
                  return A2(
                    $author$project$Instruction$andThen,
                    function(c) {
                      return A2(
                        $author$project$Instruction$andThen,
                        function(d) {
                          return A2(
                            $author$project$Instruction$andThen,
                            function(e) {
                              return A5(func, a, b, c, d, e);
                            },
                            instructionE
                          );
                        },
                        instructionD
                      );
                    },
                    instructionC
                  );
                },
                instructionB
              );
            },
            instructionA
          );
        }
      );
      var $author$project$Custom$Command$Scenarios$Push$remapFlowItemParameters = F2(
        function(config, flowItem) {
          return _Utils_update(
            flowItem,
            {
              b8: function() {
                var _v0 = flowItem.b8;
                switch (_v0.$) {
                  case 0:
                    var connectionParameters = _v0.a;
                    var conf = A2(
                      $elm$core$Result$withDefault,
                      $elm$core$Dict$empty,
                      A2(
                        $elm$core$Result$andThen,
                        $elm$json$Json$Decode$decodeValue(
                          $elm$json$Json$Decode$dict($elm$json$Json$Decode$int)
                        ),
                        A2(
                          $elm$core$Result$fromMaybe,
                          A2($elm$json$Json$Decode$Failure, "No Connection mapping in configuration", $elm$json$Json$Encode$null),
                          A2($elm$core$Dict$get, "account", config)
                        )
                      )
                    );
                    return $author$project$Scenario$Blueprint$ConnectionParameters(
                      _Utils_update(
                        connectionParameters,
                        {
                          aY: A2(
                            $elm$core$Maybe$withDefault,
                            connectionParameters.aY,
                            A2(
                              $elm$core$Dict$get,
                              $elm$core$String$fromInt(connectionParameters.aY),
                              conf
                            )
                          )
                        }
                      )
                    );
                  case 1:
                    var webhookParameters = _v0.a;
                    var conf = A2(
                      $elm$core$Result$withDefault,
                      $elm$core$Dict$empty,
                      A2(
                        $elm$core$Result$andThen,
                        $elm$json$Json$Decode$decodeValue(
                          $elm$json$Json$Decode$dict($elm$json$Json$Decode$int)
                        ),
                        A2(
                          $elm$core$Result$fromMaybe,
                          A2($elm$json$Json$Decode$Failure, "No Webhook mapping in configuration", $elm$json$Json$Encode$null),
                          A2($elm$core$Dict$get, "hook", config)
                        )
                      )
                    );
                    return $author$project$Scenario$Blueprint$WebhookParameters(
                      _Utils_update(
                        webhookParameters,
                        {
                          aX: A2(
                            $elm$core$Maybe$withDefault,
                            webhookParameters.aX,
                            A2(
                              $elm$core$Dict$get,
                              $elm$core$String$fromInt(webhookParameters.aX),
                              conf
                            )
                          )
                        }
                      )
                    );
                  case 2:
                    var datastoreParameters = _v0.a;
                    var conf = A2(
                      $elm$core$Result$withDefault,
                      $elm$core$Dict$empty,
                      A2(
                        $elm$core$Result$andThen,
                        $elm$json$Json$Decode$decodeValue(
                          $elm$json$Json$Decode$dict($elm$json$Json$Decode$int)
                        ),
                        A2(
                          $elm$core$Result$fromMaybe,
                          A2($elm$json$Json$Decode$Failure, "No Data Store mapping in configuration", $elm$json$Json$Encode$null),
                          A2($elm$core$Dict$get, "dataStore", config)
                        )
                      )
                    );
                    return $author$project$Scenario$Blueprint$DataStoreParameters(
                      _Utils_update(
                        datastoreParameters,
                        {
                          aQ: A2(
                            $elm$core$Maybe$withDefault,
                            datastoreParameters.aQ,
                            A2(
                              $elm$core$Dict$get,
                              $elm$core$String$fromInt(datastoreParameters.aQ),
                              conf
                            )
                          )
                        }
                      )
                    );
                  default:
                    return $author$project$Scenario$Blueprint$NoParameters;
                }
              }()
            }
          );
        }
      );
      var $author$project$Api$Request$post = function(_v0) {
        var token = _v0.I;
        var url = _v0.E;
        var body = _v0.F;
        var responseResolver = _v0.H;
        return $author$project$Api$Request$request(
          { F: body, Y: "POST", H: responseResolver, I: token, E: url }
        );
      };
      var $author$project$Gen$Command$DataStores$Create$responseDecoder = A2(
        $elm$json$Json$Decode$at,
        _List_fromArray(
          ["dataStore"]
        ),
        $elm$json$Json$Decode$value
      );
      var $author$project$Gen$Command$DataStores$Create$url = function(options) {
        return $author$project$Api$Url$url(
          {
            dg: options.dg,
            dC: "/data-stores",
            dH: $elm$core$List$concat(_List_Nil)
          }
        );
      };
      var $author$project$Gen$Command$DataStores$Create$request = function(options) {
        var body = $author$project$Api$Body$applicationJson(
          $elm$json$Json$Encode$object(
            _List_fromArray(
              [
                _Utils_Tuple2(
                  "name",
                  $elm$json$Json$Encode$string(options.b3)
                ),
                _Utils_Tuple2(
                  "teamId",
                  $elm$json$Json$Encode$int(options.ba)
                ),
                _Utils_Tuple2(
                  "datastructureId",
                  $elm$json$Json$Encode$int(options.bs)
                ),
                _Utils_Tuple2(
                  "maxSizeMB",
                  $elm$json$Json$Encode$int(options.b$)
                )
              ]
            )
          )
        );
        return A2(
          $author$project$Instruction$request,
          options.aF,
          $author$project$Api$Request$post(
            {
              F: body,
              H: $author$project$Api$Response$resolveToJson($author$project$Gen$Command$DataStores$Create$responseDecoder),
              I: options.I,
              E: $author$project$Gen$Command$DataStores$Create$url(options)
            }
          )
        );
      };
      var $author$project$Gen$Command$DataStructures$Create$responseDecoder = A2(
        $elm$json$Json$Decode$at,
        _List_fromArray(
          ["dataStructure"]
        ),
        $elm$json$Json$Decode$value
      );
      var $author$project$Gen$Command$DataStructures$Create$url = function(options) {
        return $author$project$Api$Url$url(
          {
            dg: options.dg,
            dC: "/data-structures",
            dH: $elm$core$List$concat(_List_Nil)
          }
        );
      };
      var $author$project$Gen$Command$DataStructures$Create$request = function(options) {
        var body = $author$project$Api$Body$applicationJson(
          $elm$json$Json$Encode$object(
            _List_fromArray(
              [
                _Utils_Tuple2(
                  "teamId",
                  $elm$json$Json$Encode$int(options.ba)
                ),
                _Utils_Tuple2(
                  "name",
                  $elm$json$Json$Encode$string(options.b3)
                ),
                _Utils_Tuple2(
                  "strict",
                  $elm$json$Json$Encode$bool(options.cF)
                ),
                _Utils_Tuple2(
                  "spec",
                  A2($elm$json$Json$Encode$list, $elm$json$Json$Encode$string, options.cC)
                )
              ]
            )
          )
        );
        return A2(
          $author$project$Instruction$request,
          options.aF,
          $author$project$Api$Request$post(
            {
              F: body,
              H: $author$project$Api$Response$resolveToJson($author$project$Gen$Command$DataStructures$Create$responseDecoder),
              I: options.I,
              E: $author$project$Gen$Command$DataStructures$Create$url(options)
            }
          )
        );
      };
      var $author$project$Gen$Command$Hooks$Create$responseDecoder = A2(
        $elm$json$Json$Decode$at,
        _List_fromArray(
          ["hook"]
        ),
        $elm$json$Json$Decode$value
      );
      var $author$project$Gen$Command$Hooks$Create$url = function(options) {
        return $author$project$Api$Url$url(
          {
            dg: options.dg,
            dC: "/hooks",
            dH: $elm$core$List$concat(_List_Nil)
          }
        );
      };
      var $author$project$Gen$Command$Hooks$Create$request = function(options) {
        var body = $author$project$Api$Body$applicationJson(
          $elm$json$Json$Encode$object(
            _List_fromArray(
              [
                _Utils_Tuple2(
                  "name",
                  $elm$json$Json$Encode$string(options.b3)
                ),
                _Utils_Tuple2(
                  "teamId",
                  $elm$json$Json$Encode$int(options.ba)
                ),
                _Utils_Tuple2(
                  "typeName",
                  $elm$json$Json$Encode$string(options.d$)
                ),
                _Utils_Tuple2(
                  "method",
                  $elm$json$Json$Encode$bool(options.Y)
                ),
                _Utils_Tuple2(
                  "headers",
                  $elm$json$Json$Encode$bool(options.dk)
                ),
                _Utils_Tuple2(
                  "stringify",
                  $elm$json$Json$Encode$bool(options.cG)
                )
              ]
            )
          )
        );
        return A2(
          $author$project$Instruction$request,
          options.aF,
          $author$project$Api$Request$post(
            {
              F: body,
              H: $author$project$Api$Response$resolveToJson($author$project$Gen$Command$Hooks$Create$responseDecoder),
              I: options.I,
              E: $author$project$Gen$Command$Hooks$Create$url(options)
            }
          )
        );
      };
      var $author$project$Gen$Command$Scenarios$Create$responseDecoder = A2(
        $elm$json$Json$Decode$at,
        _List_fromArray(
          ["scenario"]
        ),
        $elm$json$Json$Decode$value
      );
      var $author$project$Gen$Command$Scenarios$Create$url = function(options) {
        return $author$project$Api$Url$url(
          {
            dg: options.dg,
            dC: "/scenarios",
            dH: $elm$core$List$concat(
              _List_fromArray(
                [
                  A2($author$project$Api$Url$listStringQueryParameter, "cols[]", options.aO),
                  A2($author$project$Api$Url$boolQueryParameter, "confirmed", options.bo)
                ]
              )
            )
          }
        );
      };
      var $author$project$Gen$Command$Scenarios$Create$request = function(options) {
        var body = $author$project$Api$Body$applicationJson(
          $elm$json$Json$Encode$object(
            _List_fromArray(
              [
                _Utils_Tuple2(
                  "blueprint",
                  $elm$json$Json$Encode$string(options.bk)
                ),
                _Utils_Tuple2(
                  "teamId",
                  $elm$json$Json$Encode$int(options.ba)
                ),
                _Utils_Tuple2(
                  "scheduling",
                  $elm$json$Json$Encode$string(options.cx)
                ),
                _Utils_Tuple2(
                  "folderId",
                  A2($elm_community$json_extra$Json$Encode$Extra$maybe, $elm$json$Json$Encode$int, options.bF)
                ),
                _Utils_Tuple2(
                  "basedon",
                  A2($elm_community$json_extra$Json$Encode$Extra$maybe, $elm$json$Json$Encode$int, options.c5)
                )
              ]
            )
          )
        );
        return A2(
          $author$project$Instruction$request,
          options.aF,
          $author$project$Api$Request$post(
            {
              F: body,
              H: $author$project$Api$Response$resolveToJson($author$project$Gen$Command$Scenarios$Create$responseDecoder),
              I: options.I,
              E: $author$project$Gen$Command$Scenarios$Create$url(options)
            }
          )
        );
      };
      var $author$project$Gen$Command$Scenarios$Update$responseDecoder = A2(
        $elm$json$Json$Decode$at,
        _List_fromArray(
          ["scenario"]
        ),
        $elm$json$Json$Decode$value
      );
      var $author$project$Gen$Command$Scenarios$Update$url = function(options) {
        return $author$project$Api$Url$url(
          {
            dg: options.dg,
            dC: A3(
              $elm$core$String$replace,
              "{scenarioId}",
              $elm$core$String$fromInt(options.ai),
              "/scenarios/{scenarioId}"
            ),
            dH: $elm$core$List$concat(
              _List_fromArray(
                [
                  A2($author$project$Api$Url$listStringQueryParameter, "cols[]", options.aO),
                  A2($author$project$Api$Url$boolQueryParameter, "confirmed", options.bo)
                ]
              )
            )
          }
        );
      };
      var $author$project$Gen$Command$Scenarios$Update$request = function(options) {
        var body = $author$project$Api$Body$applicationJson(
          $elm$json$Json$Encode$object(
            _List_fromArray(
              [
                _Utils_Tuple2(
                  "blueprint",
                  A2($elm_community$json_extra$Json$Encode$Extra$maybe, $elm$json$Json$Encode$string, options.bk)
                ),
                _Utils_Tuple2(
                  "scheduling",
                  A2($elm_community$json_extra$Json$Encode$Extra$maybe, $elm$json$Json$Encode$string, options.cx)
                ),
                _Utils_Tuple2(
                  "folderId",
                  A2($elm_community$json_extra$Json$Encode$Extra$maybe, $elm$json$Json$Encode$int, options.bF)
                ),
                _Utils_Tuple2(
                  "name",
                  A2($elm_community$json_extra$Json$Encode$Extra$maybe, $elm$json$Json$Encode$string, options.b3)
                )
              ]
            )
          )
        );
        return A2(
          $author$project$Instruction$request,
          options.aF,
          $author$project$Api$Request$patch(
            {
              F: body,
              H: $author$project$Api$Response$resolveToJson($author$project$Gen$Command$Scenarios$Update$responseDecoder),
              I: options.I,
              E: $author$project$Gen$Command$Scenarios$Update$url(options)
            }
          )
        );
      };
      var $author$project$Instruction$succeed = A2($elm$core$Basics$composeR, $elm$core$Task$succeed, $elm$core$Basics$identity);
      var $author$project$Scenario$Connection$compare = F2(
        function(connectionA, connectionB) {
          return _Utils_eq(connectionA.c0, connectionB.c0) && (_Utils_eq(connectionA.an, connectionB.an) && _Utils_eq(connectionA.aJ, connectionB.aJ));
        }
      );
      var $wolfadex$elm_ansi$Ansi$Color$Font = 0;
      var $wolfadex$elm_ansi$Ansi$Internal$esc = "\x1B[";
      var $wolfadex$elm_ansi$Ansi$Internal$toCommand = function(str) {
        return _Utils_ap($wolfadex$elm_ansi$Ansi$Internal$esc, str);
      };
      var $wolfadex$elm_ansi$Ansi$Color$end = function(location) {
        return $wolfadex$elm_ansi$Ansi$Internal$toCommand(
          function() {
            if (!location) {
              return "39";
            } else {
              return "49";
            }
          }() + "m"
        );
      };
      var $wolfadex$elm_ansi$Ansi$Color$encodeLocation = function(loc) {
        if (!loc) {
          return 38;
        } else {
          return 48;
        }
      };
      var $wolfadex$elm_ansi$Ansi$Internal$separator = ";";
      var $wolfadex$elm_ansi$Ansi$Color$start = F2(
        function(location, color_) {
          return $wolfadex$elm_ansi$Ansi$Internal$toCommand(
            function(s) {
              return s + "m";
            }(
              A2(
                $elm$core$String$join,
                $wolfadex$elm_ansi$Ansi$Internal$separator,
                A2(
                  $elm$core$List$map,
                  $elm$core$String$fromInt,
                  function() {
                    switch (color_.$) {
                      case 0:
                        if (!location) {
                          return _List_fromArray(
                            [30]
                          );
                        } else {
                          return _List_fromArray(
                            [40]
                          );
                        }
                      case 1:
                        if (!location) {
                          return _List_fromArray(
                            [31]
                          );
                        } else {
                          return _List_fromArray(
                            [41]
                          );
                        }
                      case 2:
                        if (!location) {
                          return _List_fromArray(
                            [32]
                          );
                        } else {
                          return _List_fromArray(
                            [42]
                          );
                        }
                      case 3:
                        if (!location) {
                          return _List_fromArray(
                            [33]
                          );
                        } else {
                          return _List_fromArray(
                            [43]
                          );
                        }
                      case 4:
                        if (!location) {
                          return _List_fromArray(
                            [34]
                          );
                        } else {
                          return _List_fromArray(
                            [44]
                          );
                        }
                      case 5:
                        if (!location) {
                          return _List_fromArray(
                            [35]
                          );
                        } else {
                          return _List_fromArray(
                            [45]
                          );
                        }
                      case 6:
                        if (!location) {
                          return _List_fromArray(
                            [36]
                          );
                        } else {
                          return _List_fromArray(
                            [46]
                          );
                        }
                      case 7:
                        if (!location) {
                          return _List_fromArray(
                            [37]
                          );
                        } else {
                          return _List_fromArray(
                            [47]
                          );
                        }
                      case 8:
                        if (!location) {
                          return _List_fromArray(
                            [90]
                          );
                        } else {
                          return _List_fromArray(
                            [100]
                          );
                        }
                      case 9:
                        if (!location) {
                          return _List_fromArray(
                            [91]
                          );
                        } else {
                          return _List_fromArray(
                            [101]
                          );
                        }
                      case 10:
                        if (!location) {
                          return _List_fromArray(
                            [92]
                          );
                        } else {
                          return _List_fromArray(
                            [102]
                          );
                        }
                      case 11:
                        if (!location) {
                          return _List_fromArray(
                            [93]
                          );
                        } else {
                          return _List_fromArray(
                            [103]
                          );
                        }
                      case 12:
                        if (!location) {
                          return _List_fromArray(
                            [94]
                          );
                        } else {
                          return _List_fromArray(
                            [104]
                          );
                        }
                      case 13:
                        if (!location) {
                          return _List_fromArray(
                            [95]
                          );
                        } else {
                          return _List_fromArray(
                            [105]
                          );
                        }
                      case 14:
                        if (!location) {
                          return _List_fromArray(
                            [96]
                          );
                        } else {
                          return _List_fromArray(
                            [106]
                          );
                        }
                      case 15:
                        if (!location) {
                          return _List_fromArray(
                            [97]
                          );
                        } else {
                          return _List_fromArray(
                            [107]
                          );
                        }
                      default:
                        var customColor_ = color_.a;
                        return _List_fromArray(
                          [
                            $wolfadex$elm_ansi$Ansi$Color$encodeLocation(location),
                            2,
                            customColor_.a5,
                            customColor_.aW,
                            customColor_.aM
                          ]
                        );
                    }
                  }()
                )
              )
            )
          );
        }
      );
      var $wolfadex$elm_ansi$Ansi$Color$fontColor = F2(
        function(c, str) {
          return _Utils_ap(
            A2($wolfadex$elm_ansi$Ansi$Color$start, 0, c),
            _Utils_ap(
              str,
              $wolfadex$elm_ansi$Ansi$Color$end(0)
            )
          );
        }
      );
      var $wolfadex$elm_ansi$Ansi$Color$Green = { $: 2 };
      var $wolfadex$elm_ansi$Ansi$Color$green = $wolfadex$elm_ansi$Ansi$Color$Green;
      var $author$project$Instruction$success = function(message) {
        return A2(
          $elm$core$Task$map,
          $author$project$Instruction$Output,
          $author$project$Output$toStderr(
            $author$project$Output$string(
              A2($wolfadex$elm_ansi$Ansi$Color$fontColor, $wolfadex$elm_ansi$Ansi$Color$green, message)
            )
          )
        );
      };
      var $author$project$Custom$Command$Scenarios$Push$verifyConnection = F3(
        function(options, _v0, targetConnection) {
          var connectionId = _v0.a;
          var accountName = _v0.b;
          return A2(
            $author$project$Instruction$andThen,
            function(fileOutputs) {
              var _v1 = A2(
                $elm$core$Result$map,
                $author$project$Scenario$Connection$compare(targetConnection),
                A2($author$project$Instruction$decodeInput, $author$project$Scenario$Connection$decoder, fileOutputs)
              );
              if (!_v1.$ && _v1.a) {
                return $author$project$Instruction$success(
                  "Connection " + ($elm$core$String$fromInt(targetConnection.ad) + (" for " + (accountName + " verified.")))
                );
              } else {
                return $author$project$Instruction$fail(
                  "Connection " + ($elm$core$String$fromInt(targetConnection.ad) + (" for " + (accountName + " could not be verified.")))
                );
              }
            },
            $author$project$FileSystem$readJsonFile(
              options.u + ("connections/" + (accountName + ("_" + ($elm$core$String$fromInt(connectionId) + ".json"))))
            )
          );
        }
      );
      var $author$project$Scenario$CustomVariable$CustomVariable = F3(
        function(isSystem, name, typeId) {
          return { bQ: isSystem, b3: name, cN: typeId };
        }
      );
      var $author$project$Scenario$CustomVariable$decoder = A4(
        $elm$json$Json$Decode$map3,
        $author$project$Scenario$CustomVariable$CustomVariable,
        A2($elm$json$Json$Decode$field, "isSystem", $elm$json$Json$Decode$bool),
        A2($elm$json$Json$Decode$field, "name", $elm$json$Json$Decode$string),
        A2($elm$json$Json$Decode$field, "typeId", $elm$json$Json$Decode$int)
      );
      var $elm$core$Maybe$map2 = F3(
        function(func, ma, mb) {
          if (ma.$ === 1) {
            return $elm$core$Maybe$Nothing;
          } else {
            var a = ma.a;
            if (mb.$ === 1) {
              return $elm$core$Maybe$Nothing;
            } else {
              var b = mb.a;
              return $elm$core$Maybe$Just(
                A2(func, a, b)
              );
            }
          }
        }
      );
      var $author$project$Scenario$CustomVariable$scopeToString = function(scope2) {
        if (!scope2) {
          return "Organization";
        } else {
          return "Team";
        }
      };
      var $elm$core$Result$toMaybe = function(result) {
        if (!result.$) {
          var v = result.a;
          return $elm$core$Maybe$Just(v);
        } else {
          return $elm$core$Maybe$Nothing;
        }
      };
      var $elm_community$result_extra$Result$Extra$unwrap = F3(
        function(defaultValue, okFunc, result) {
          if (!result.$) {
            var ok = result.a;
            return okFunc(ok);
          } else {
            return defaultValue;
          }
        }
      );
      var $wolfadex$elm_ansi$Ansi$Color$Yellow = { $: 3 };
      var $wolfadex$elm_ansi$Ansi$Color$yellow = $wolfadex$elm_ansi$Ansi$Color$Yellow;
      var $author$project$Instruction$warning = function(message) {
        return A2(
          $elm$core$Task$map,
          $author$project$Instruction$Output,
          $author$project$Output$toStderr(
            $author$project$Output$string(
              A2($wolfadex$elm_ansi$Ansi$Color$fontColor, $wolfadex$elm_ansi$Ansi$Color$yellow, message)
            )
          )
        );
      };
      var $author$project$Custom$Command$Scenarios$Push$verifyCustomVariables = F3(
        function(options, customVariables, content) {
          var liveOrgVariables = A3(
            $elm_community$result_extra$Result$Extra$unwrap,
            $elm$core$Dict$empty,
            A2(
              $elm$core$Basics$composeR,
              $elm$core$List$map(
                function(v) {
                  return _Utils_Tuple2(v.b3, v);
                }
              ),
              $elm$core$Dict$fromList
            ),
            A2(
              $author$project$Instruction$decodeInput,
              $elm$json$Json$Decode$list($author$project$Scenario$CustomVariable$decoder),
              content
            )
          );
          return $author$project$Instruction$sequence(
            A2(
              $elm$core$List$map,
              function(_v1) {
                var name = _v1.a;
                var scope2 = _v1.b;
                var liveOrgVariable = A2($elm$core$Dict$get, name, liveOrgVariables);
                var directory = function() {
                  if (!scope2) {
                    return "organizationVariables/";
                  } else {
                    return "teamVariables/";
                  }
                }();
                return A2(
                  $author$project$Instruction$andThen,
                  function(fileOutputs) {
                    return A2(
                      $elm$core$Maybe$withDefault,
                      false,
                      A3(
                        $elm$core$Maybe$map2,
                        $elm$core$Basics$eq,
                        liveOrgVariable,
                        $elm$core$Result$toMaybe(
                          A2($author$project$Instruction$decodeInput, $author$project$Scenario$CustomVariable$decoder, fileOutputs)
                        )
                      )
                    ) ? $author$project$Instruction$log(
                      "Custom " + ($author$project$Scenario$CustomVariable$scopeToString(scope2) + (" Variable " + (name + " found.")))
                    ) : $author$project$Instruction$warning(
                      "Custom " + ($author$project$Scenario$CustomVariable$scopeToString(scope2) + (" Variable " + (name + " not found! Please create manually.")))
                    );
                  },
                  $author$project$FileSystem$readJsonFile(options.u + ("variables/" + (directory + (name + ".json"))))
                );
              },
              $elm$core$Dict$toList(
                A2(
                  $elm$core$Dict$filter,
                  F2(
                    function(_v0, type_) {
                      return !type_;
                    }
                  ),
                  customVariables
                )
              )
            )
          );
        }
      );
      var $author$project$Scenario$DataStore$compare = F2(
        function(_v0, _v1) {
          return true;
        }
      );
      var $author$project$Scenario$DataStructure$compareSpecItem = F2(
        function(_v0, _v1) {
          var nameA = _v0.a;
          var specA = _v0.b;
          var nameB = _v1.a;
          var specB = _v1.b;
          return _Utils_eq(nameA, nameB) && (_Utils_eq(specA.aq, specB.aq) && (_Utils_eq(specA.aD, specB.aD) && (_Utils_eq(specA.aI, specB.aI) && _Utils_eq(specA.d0, specB.d0))));
        }
      );
      var $elm$core$List$sortBy = _List_sortBy;
      var $author$project$Scenario$DataStructure$compareSpec = F2(
        function(specA, specB) {
          return A3(
            $elm$core$List$foldl,
            $elm$core$Basics$and,
            true,
            A3(
              $elm$core$List$map2,
              $author$project$Scenario$DataStructure$compareSpecItem,
              A2(
                $elm$core$List$sortBy,
                $elm$core$Tuple$first,
                A2(
                  $elm$core$List$map,
                  function(item) {
                    return _Utils_Tuple2(item.b3, item);
                  },
                  specA
                )
              ),
              A2(
                $elm$core$List$sortBy,
                $elm$core$Tuple$first,
                A2(
                  $elm$core$List$map,
                  function(item) {
                    return _Utils_Tuple2(item.b3, item);
                  },
                  specB
                )
              )
            )
          );
        }
      );
      var $author$project$Scenario$DataStructure$compare = F2(
        function(dataStructureA, dataStructureB) {
          return _Utils_eq(dataStructureA.cF, dataStructureB.cF) && A2($author$project$Scenario$DataStructure$compareSpec, dataStructureA.cC, dataStructureB.cC);
        }
      );
      var $author$project$Custom$Command$Scenarios$Push$verifyDataStructure = F3(
        function(options, dataStructureId, targetDataStructure) {
          return A2(
            $author$project$Instruction$andThen,
            function(fileOutputs) {
              var _v0 = A2(
                $elm$core$Result$map,
                $author$project$Scenario$DataStructure$compare(targetDataStructure),
                A2($author$project$Instruction$decodeInput, $author$project$Scenario$DataStructure$decoder, fileOutputs)
              );
              if (!_v0.$ && _v0.a) {
                return $author$project$Instruction$success(
                  "Data Structure " + ($elm$core$String$fromInt(targetDataStructure.ad) + " verified.")
                );
              } else {
                return $author$project$Instruction$fail(
                  "Data Structure " + ($elm$core$String$fromInt(targetDataStructure.ad) + " could not be verified.")
                );
              }
            },
            $author$project$FileSystem$readJsonFile(
              options.u + ("dataStructures/" + ($elm$core$String$fromInt(dataStructureId) + ".json"))
            )
          );
        }
      );
      var $author$project$Custom$Command$Scenarios$Push$verifyDataStore = F3(
        function(options, dataStoreId, targetDataStore) {
          return A2(
            $author$project$Instruction$andThen,
            function(fileOutputs) {
              var _v0 = A2($author$project$Instruction$decodeInput, $author$project$Scenario$DataStore$decoder, fileOutputs);
              if (_v0.$ === 1) {
                var e = _v0.a;
                return $author$project$Instruction$fail(e);
              } else {
                var dataStore = _v0.a;
                return A2($author$project$Scenario$DataStore$compare, dataStore, targetDataStore) ? $author$project$Instruction$sequence(
                  _List_fromArray(
                    [
                      $author$project$Instruction$success(
                        "Data Store " + ($elm$core$String$fromInt(targetDataStore.ad) + " verified.")
                      ),
                      $author$project$Instruction$log(
                        "Get Data Structure with Id = " + $elm$core$String$fromInt(targetDataStore.ap)
                      ),
                      A2(
                        $author$project$Instruction$andThen,
                        A2(
                          $elm$core$Basics$composeR,
                          $author$project$Instruction$decodeInput($author$project$Scenario$DataStructure$decoder),
                          A2(
                            $elm_community$result_extra$Result$Extra$unpack,
                            $author$project$Instruction$fail,
                            function(targetDataStructure) {
                              return A3($author$project$Custom$Command$Scenarios$Push$verifyDataStructure, options, dataStore.ap, targetDataStructure);
                            }
                          )
                        ),
                        $author$project$Gen$Command$DataStructures$Update$request(
                          { ap: targetDataStore.ap, dg: options.dg, b3: $elm$core$Maybe$Nothing, aF: $elm$core$Maybe$Nothing, cC: $elm$core$Maybe$Nothing, cF: $elm$core$Maybe$Nothing, I: options.I }
                        )
                      )
                    ]
                  )
                ) : $author$project$Instruction$fail(
                  "Data Store " + ($elm$core$String$fromInt(targetDataStore.ad) + " could not be verified.")
                );
              }
            },
            $author$project$FileSystem$readJsonFile(
              options.u + ("dataStores/" + ($elm$core$String$fromInt(dataStoreId) + ".json"))
            )
          );
        }
      );
      var $author$project$Scenario$Webhook$compareAdvancedOptions = F2(
        function(webhookA, webhookB) {
          return _Utils_eq(webhookA.dk, webhookB.dk) && (_Utils_eq(webhookA.ay, webhookB.ay) && (_Utils_eq(webhookA.Y, webhookB.Y) && _Utils_eq(webhookA.cG, webhookB.cG)));
        }
      );
      var $author$project$Scenario$Webhook$compare = F2(
        function(webhookA, webhookB) {
          return _Utils_eq(webhookA.d$, webhookB.d$) && (_Utils_eq(webhookA.as, webhookB.as) && (_Utils_eq(webhookA.aw, webhookB.aw) && A2($author$project$Scenario$Webhook$compareAdvancedOptions, webhookA.de, webhookB.de)));
        }
      );
      var $author$project$Custom$Command$Scenarios$Push$verifyWebhook = F3(
        function(options, _v0, targetWebhook) {
          var webhookId = _v0.a;
          var typeName = _v0.b;
          return A2(
            $author$project$Instruction$andThen,
            function(fileOutputs) {
              var _v1 = A2($author$project$Instruction$decodeInput, $author$project$Scenario$Webhook$decoder, fileOutputs);
              if (_v1.$ === 1) {
                var e = _v1.a;
                return $author$project$Instruction$fail(e);
              } else {
                var webhook = _v1.a;
                return A2($author$project$Scenario$Webhook$compare, webhook, targetWebhook) ? $author$project$Instruction$sequence(
                  _List_fromArray(
                    [
                      $author$project$Instruction$success(
                        "Webhook " + ($elm$core$String$fromInt(targetWebhook.ad) + (" for " + (typeName + " verified.")))
                      ),
                      function() {
                        var _v2 = webhook.de.d1;
                        if (_v2.$ === 1) {
                          var _v3 = targetWebhook.de.d1;
                          if (_v3.$ === 1) {
                            return $author$project$Instruction$log("No Data Structure to verify");
                          } else {
                            return $author$project$Instruction$fail("Target Webhook has a Data Structure set, but not the packaged Webhook");
                          }
                        } else {
                          var dataStructureId = _v2.a;
                          var _v4 = targetWebhook.de.d1;
                          if (_v4.$ === 1) {
                            return $author$project$Instruction$fail("Target Webhook does not have a Data Structure configured");
                          } else {
                            var targetDataStructureId = _v4.a;
                            return $author$project$Instruction$sequence(
                              _List_fromArray(
                                [
                                  $author$project$Instruction$log(
                                    "Get Data Structure with Id = " + $elm$core$String$fromInt(targetDataStructureId)
                                  ),
                                  A2(
                                    $author$project$Instruction$andThen,
                                    A2(
                                      $elm$core$Basics$composeR,
                                      $author$project$Instruction$decodeInput($author$project$Scenario$DataStructure$decoder),
                                      A2(
                                        $elm_community$result_extra$Result$Extra$unpack,
                                        $author$project$Instruction$fail,
                                        function(targetDataStructure) {
                                          return A3($author$project$Custom$Command$Scenarios$Push$verifyDataStructure, options, dataStructureId, targetDataStructure);
                                        }
                                      )
                                    ),
                                    $author$project$Gen$Command$DataStructures$Update$request(
                                      { ap: targetDataStructureId, dg: options.dg, b3: $elm$core$Maybe$Nothing, aF: $elm$core$Maybe$Nothing, cC: $elm$core$Maybe$Nothing, cF: $elm$core$Maybe$Nothing, I: options.I }
                                    )
                                  )
                                ]
                              )
                            );
                          }
                        }
                      }()
                    ]
                  )
                ) : $author$project$Instruction$fail(
                  "Webhook " + ($elm$core$String$fromInt(targetWebhook.ad) + (" for " + (typeName + " could not be verified.")))
                );
              }
            },
            $author$project$FileSystem$readJsonFile(
              options.u + ("webhooks/" + (typeName + ("_" + ($elm$core$String$fromInt(webhookId) + ".json"))))
            )
          );
        }
      );
      var $author$project$Custom$Command$Scenarios$Push$run = F2(
        function(options, config) {
          return $author$project$Instruction$sequence(
            _List_fromArray(
              [
                $author$project$Instruction$log("Create Scenario from Blueprint"),
                A2(
                  $author$project$Instruction$andThen,
                  A2(
                    $elm$core$Basics$composeR,
                    $author$project$Instruction$decodeInput($author$project$Scenario$Blueprint$decoder),
                    A2(
                      $elm_community$result_extra$Result$Extra$unpack,
                      $author$project$Instruction$fail,
                      function(scenarioBlueprint) {
                        var webhooks = $author$project$Scenario$Webhook$fromBlueprint(scenarioBlueprint);
                        var verifyWebhooksInstruction = function() {
                          if ($elm$core$List$isEmpty(webhooks)) {
                            return $author$project$Instruction$log("Scenario does not require Webhooks");
                          } else {
                            var conf = A2(
                              $elm$core$Result$withDefault,
                              $elm$core$Dict$empty,
                              A2(
                                $elm$core$Result$andThen,
                                $elm$json$Json$Decode$decodeValue(
                                  $elm$json$Json$Decode$dict($elm$json$Json$Decode$int)
                                ),
                                A2(
                                  $elm$core$Result$fromMaybe,
                                  A2($elm$json$Json$Decode$Failure, "No Webhook mapping in configuration", $elm$json$Json$Encode$null),
                                  A2($elm$core$Dict$get, "hook", config)
                                )
                              )
                            );
                            return $author$project$Instruction$sequence(
                              A2(
                                $elm$core$List$map,
                                function(_v10) {
                                  var webhookId = _v10.a;
                                  var typeName = _v10.b;
                                  var _v11 = A2(
                                    $elm$core$Dict$get,
                                    $elm$core$String$fromInt(webhookId),
                                    conf
                                  );
                                  if (!_v11.$) {
                                    var targetWebhookId = _v11.a;
                                    return $author$project$Instruction$sequence(
                                      _List_fromArray(
                                        [
                                          $author$project$Instruction$log(
                                            "Get Target Webhook for Id = " + $elm$core$String$fromInt(webhookId)
                                          ),
                                          A2(
                                            $author$project$Instruction$andThen,
                                            A2(
                                              $elm$core$Basics$composeR,
                                              $author$project$Instruction$decodeInput($author$project$Scenario$Webhook$decoder),
                                              A2(
                                                $elm_community$result_extra$Result$Extra$unpack,
                                                $author$project$Instruction$fail,
                                                function(targetWebhook) {
                                                  return A3(
                                                    $author$project$Custom$Command$Scenarios$Push$verifyWebhook,
                                                    options,
                                                    _Utils_Tuple2(webhookId, targetWebhook.d$),
                                                    targetWebhook
                                                  );
                                                }
                                              )
                                            ),
                                            $author$project$Gen$Command$Hooks$Get$request(
                                              { dg: options.dg, dn: targetWebhookId, aF: $elm$core$Maybe$Nothing, I: options.I }
                                            )
                                          )
                                        ]
                                      )
                                    );
                                  } else {
                                    return A2(
                                      $author$project$Instruction$andThen,
                                      function(fileOutputs) {
                                        var _v12 = A2($author$project$Instruction$decodeInput, $author$project$Scenario$Webhook$decoder, fileOutputs);
                                        if (_v12.$ === 1) {
                                          var e = _v12.a;
                                          return $author$project$Instruction$fail(e);
                                        } else {
                                          var webhook = _v12.a;
                                          return $author$project$Instruction$sequence(
                                            _List_fromArray(
                                              [
                                                $author$project$Instruction$log("Create a new Webhook"),
                                                A2(
                                                  $author$project$Instruction$andThen,
                                                  A2(
                                                    $elm$core$Basics$composeR,
                                                    $author$project$Instruction$decodeInput(
                                                      A2($elm$json$Json$Decode$field, "id", $elm$json$Json$Decode$int)
                                                    ),
                                                    A2(
                                                      $elm_community$result_extra$Result$Extra$unpack,
                                                      $author$project$Instruction$fail,
                                                      function(newWebhookId) {
                                                        return $author$project$Instruction$succeed(
                                                          $author$project$Instruction$Input(
                                                            $author$project$Content$JsonValue(
                                                              $elm$json$Json$Encode$object(
                                                                _List_fromArray(
                                                                  [
                                                                    _Utils_Tuple2(
                                                                      "webhookId",
                                                                      $elm$json$Json$Encode$int(webhookId)
                                                                    ),
                                                                    _Utils_Tuple2(
                                                                      "newWebhookId",
                                                                      $elm$json$Json$Encode$int(newWebhookId)
                                                                    )
                                                                  ]
                                                                )
                                                              )
                                                            )
                                                          )
                                                        );
                                                      }
                                                    )
                                                  ),
                                                  $author$project$Gen$Command$Hooks$Create$request(
                                                    { dg: options.dg, dk: webhook.de.dk, Y: webhook.de.Y, b3: webhook.b3, aF: $elm$core$Maybe$Nothing, cG: webhook.de.cG, ba: options.ba, I: options.I, d$: webhook.d$ }
                                                  )
                                                )
                                              ]
                                            )
                                          );
                                        }
                                      },
                                      $author$project$FileSystem$readJsonFile(
                                        options.u + ("webhooks/" + ("gateway-webhook" + ("_" + ($elm$core$String$fromInt(webhookId) + ".json"))))
                                      )
                                    );
                                  }
                                },
                                webhooks
                              )
                            );
                          }
                        }();
                        var dataStores = $author$project$Scenario$DataStore$fromBlueprint(scenarioBlueprint);
                        var verifyDataStoreInstruction = function() {
                          if ($elm$core$List$isEmpty(dataStores)) {
                            return $author$project$Instruction$log("Scenario does not require Data Stores");
                          } else {
                            var conf = A2(
                              $elm$core$Result$withDefault,
                              $elm$core$Dict$empty,
                              A2(
                                $elm$core$Result$andThen,
                                $elm$json$Json$Decode$decodeValue(
                                  $elm$json$Json$Decode$dict($elm$json$Json$Decode$int)
                                ),
                                A2(
                                  $elm$core$Result$fromMaybe,
                                  A2($elm$json$Json$Decode$Failure, "No Data Store mapping in configuration", $elm$json$Json$Encode$null),
                                  A2($elm$core$Dict$get, "dataStore", config)
                                )
                              )
                            );
                            return $author$project$Instruction$sequence(
                              A2(
                                $elm$core$List$map,
                                function(dataStoreId) {
                                  var _v5 = A2(
                                    $elm$core$Dict$get,
                                    $elm$core$String$fromInt(dataStoreId),
                                    conf
                                  );
                                  if (!_v5.$) {
                                    var targetDataStoreId = _v5.a;
                                    return $author$project$Instruction$sequence(
                                      _List_fromArray(
                                        [
                                          $author$project$Instruction$log(
                                            "Get Target Data Store for Data Store with Id = " + $elm$core$String$fromInt(dataStoreId)
                                          ),
                                          A2(
                                            $author$project$Instruction$andThen,
                                            A2(
                                              $elm$core$Basics$composeR,
                                              $author$project$Instruction$decodeInput($author$project$Scenario$DataStore$decoder),
                                              A2(
                                                $elm_community$result_extra$Result$Extra$unpack,
                                                $author$project$Instruction$fail,
                                                function(targetDataStore) {
                                                  return A3($author$project$Custom$Command$Scenarios$Push$verifyDataStore, options, dataStoreId, targetDataStore);
                                                }
                                              )
                                            ),
                                            $author$project$Gen$Command$DataStores$Get$request(
                                              {
                                                aO: $elm$core$Maybe$Just(
                                                  _List_fromArray(
                                                    ["id", "name", "datastructureId", "maxSize"]
                                                  )
                                                ),
                                                df: targetDataStoreId,
                                                dg: options.dg,
                                                aF: $elm$core$Maybe$Nothing,
                                                I: options.I
                                              }
                                            )
                                          )
                                        ]
                                      )
                                    );
                                  } else {
                                    return A2(
                                      $author$project$Instruction$andThen,
                                      function(dataStoreFileOutputs) {
                                        var _v6 = A2($author$project$Instruction$decodeInput, $author$project$Scenario$DataStore$decoder, dataStoreFileOutputs);
                                        if (_v6.$ === 1) {
                                          var e = _v6.a;
                                          return $author$project$Instruction$fail(e);
                                        } else {
                                          var dataStore = _v6.a;
                                          var dataStructureConfig = A2(
                                            $elm$core$Result$withDefault,
                                            $elm$core$Dict$empty,
                                            A2(
                                              $elm$core$Result$andThen,
                                              $elm$json$Json$Decode$decodeValue(
                                                $elm$json$Json$Decode$dict($elm$json$Json$Decode$int)
                                              ),
                                              A2(
                                                $elm$core$Result$fromMaybe,
                                                A2($elm$json$Json$Decode$Failure, "No Data Store mapping in configuration", $elm$json$Json$Encode$null),
                                                A2($elm$core$Dict$get, "dataStructure", config)
                                              )
                                            )
                                          );
                                          var _v7 = A2(
                                            $elm$core$Dict$get,
                                            $elm$core$String$fromInt(dataStore.ap),
                                            dataStructureConfig
                                          );
                                          if (!_v7.$) {
                                            var targetDataStructureId = _v7.a;
                                            return $author$project$Instruction$sequence(
                                              _List_fromArray(
                                                [
                                                  $author$project$Instruction$log(
                                                    "Get Data Structure with Id = " + $elm$core$String$fromInt(targetDataStructureId)
                                                  ),
                                                  A2(
                                                    $author$project$Instruction$andThen,
                                                    function(_v8) {
                                                      return $author$project$Instruction$sequence(
                                                        _List_fromArray(
                                                          [
                                                            $author$project$Instruction$log("Create a new Data Store"),
                                                            $author$project$Gen$Command$DataStores$Create$request(
                                                              {
                                                                bs: targetDataStructureId,
                                                                dg: options.dg,
                                                                b$: A2(
                                                                  $elm$core$Maybe$withDefault,
                                                                  0,
                                                                  $elm$core$String$toInt(dataStore.b_)
                                                                ),
                                                                b3: dataStore.b3,
                                                                aF: $elm$core$Maybe$Nothing,
                                                                ba: options.ba,
                                                                I: options.I
                                                              }
                                                            )
                                                          ]
                                                        )
                                                      );
                                                    },
                                                    A2(
                                                      $author$project$Instruction$andThen,
                                                      A2(
                                                        $elm$core$Basics$composeR,
                                                        $author$project$Instruction$decodeInput($author$project$Scenario$DataStructure$decoder),
                                                        A2(
                                                          $elm_community$result_extra$Result$Extra$unpack,
                                                          $author$project$Instruction$fail,
                                                          function(targetDataStructure) {
                                                            return A3($author$project$Custom$Command$Scenarios$Push$verifyDataStructure, options, dataStore.ap, targetDataStructure);
                                                          }
                                                        )
                                                      ),
                                                      $author$project$Gen$Command$DataStructures$Update$request(
                                                        { ap: targetDataStructureId, dg: options.dg, b3: $elm$core$Maybe$Nothing, aF: $elm$core$Maybe$Nothing, cC: $elm$core$Maybe$Nothing, cF: $elm$core$Maybe$Nothing, I: options.I }
                                                      )
                                                    )
                                                  )
                                                ]
                                              )
                                            );
                                          } else {
                                            return $author$project$Instruction$sequence(
                                              _List_fromArray(
                                                [
                                                  $author$project$Instruction$log("Create a new Data Structure"),
                                                  A2(
                                                    $author$project$Instruction$andThen,
                                                    function(dataStructureFileOutputs) {
                                                      var _v9 = A2($author$project$Instruction$decodeInput, $author$project$Scenario$DataStructure$decoder, dataStructureFileOutputs);
                                                      if (_v9.$ === 1) {
                                                        var e2 = _v9.a;
                                                        return $author$project$Instruction$fail(e2);
                                                      } else {
                                                        var dataStructure = _v9.a;
                                                        return A2(
                                                          $author$project$Instruction$andThen,
                                                          A2(
                                                            $elm$core$Basics$composeR,
                                                            $author$project$Instruction$decodeInput($author$project$Scenario$DataStructure$decoder),
                                                            A2(
                                                              $elm_community$result_extra$Result$Extra$unpack,
                                                              $author$project$Instruction$fail,
                                                              function(targetDataStructure) {
                                                                return $author$project$Instruction$sequence(
                                                                  _List_fromArray(
                                                                    [
                                                                      $author$project$Instruction$log("Create a new Data Store"),
                                                                      $author$project$Gen$Command$DataStores$Create$request(
                                                                        {
                                                                          bs: targetDataStructure.ad,
                                                                          dg: options.dg,
                                                                          b$: A2(
                                                                            $elm$core$Maybe$withDefault,
                                                                            0,
                                                                            $elm$core$String$toInt(dataStore.b_)
                                                                          ),
                                                                          b3: dataStore.b3,
                                                                          aF: $elm$core$Maybe$Nothing,
                                                                          ba: options.ba,
                                                                          I: options.I
                                                                        }
                                                                      )
                                                                    ]
                                                                  )
                                                                );
                                                              }
                                                            )
                                                          ),
                                                          $author$project$Gen$Command$DataStructures$Create$request(
                                                            {
                                                              dg: options.dg,
                                                              b3: dataStructure.b3,
                                                              aF: $elm$core$Maybe$Nothing,
                                                              cC: A2(
                                                                $elm$core$List$map,
                                                                $elm$json$Json$Encode$encode(0),
                                                                A2($elm$core$List$map, $author$project$Scenario$DataStructure$encodeSpecItem, dataStructure.cC)
                                                              ),
                                                              cF: dataStructure.cF,
                                                              ba: options.ba,
                                                              I: options.I
                                                            }
                                                          )
                                                        );
                                                      }
                                                    },
                                                    $author$project$FileSystem$readJsonFile(
                                                      options.u + ("dataStructures/" + ($elm$core$String$fromInt(dataStore.ap) + ".json"))
                                                    )
                                                  )
                                                ]
                                              )
                                            );
                                          }
                                        }
                                      },
                                      $author$project$FileSystem$readJsonFile(
                                        options.u + ("dataStores/" + ($elm$core$String$fromInt(dataStoreId) + ".json"))
                                      )
                                    );
                                  }
                                },
                                dataStores
                              )
                            );
                          }
                        }();
                        var customVariables = $author$project$Scenario$CustomVariable$fromBlueprint(scenarioBlueprint);
                        var verifyOrganisationVariablesInstruction = $elm$core$Dict$isEmpty(
                          A2(
                            $elm$core$Dict$filter,
                            F2(
                              function(_v4, type_) {
                                return !type_;
                              }
                            ),
                            customVariables
                          )
                        ) ? $author$project$Instruction$log("Skip Custom Organization Variables") : A2(
                          $author$project$Instruction$andThen,
                          A2($author$project$Custom$Command$Scenarios$Push$verifyCustomVariables, options, customVariables),
                          $author$project$Gen$Command$Organizations$Variables$Get$request(
                            { dg: options.dg, a3: options.a3, aF: $elm$core$Maybe$Nothing, I: options.I }
                          )
                        );
                        var verifyTeamVariablesInstruction = $elm$core$Dict$isEmpty(
                          A2(
                            $elm$core$Dict$filter,
                            F2(
                              function(_v3, type_) {
                                return type_ === 1;
                              }
                            ),
                            customVariables
                          )
                        ) ? $author$project$Instruction$log("Skip Custom Team Variables") : A2(
                          $author$project$Instruction$andThen,
                          A2($author$project$Custom$Command$Scenarios$Push$verifyCustomVariables, options, customVariables),
                          $author$project$Gen$Command$Teams$Variables$Get$request(
                            { dg: options.dg, aF: $elm$core$Maybe$Nothing, ba: options.ba, I: options.I }
                          )
                        );
                        var connections = $author$project$Scenario$Connection$fromBlueprint(scenarioBlueprint);
                        var verifyConnectionsInstruction = function() {
                          if ($elm$core$List$isEmpty(connections)) {
                            return $author$project$Instruction$log("Scenario does not require Connections");
                          } else {
                            var conf = A2(
                              $elm$core$Result$withDefault,
                              $elm$core$Dict$empty,
                              A2(
                                $elm$core$Result$andThen,
                                $elm$json$Json$Decode$decodeValue(
                                  $elm$json$Json$Decode$dict($elm$json$Json$Decode$int)
                                ),
                                A2(
                                  $elm$core$Result$fromMaybe,
                                  A2($elm$json$Json$Decode$Failure, "No Connection mapping in configuration", $elm$json$Json$Encode$null),
                                  A2($elm$core$Dict$get, "account", config)
                                )
                              )
                            );
                            return $author$project$Instruction$sequence(
                              A2(
                                $elm$core$List$map,
                                function(_v2) {
                                  var connectionId = _v2.a;
                                  var accountName = _v2.b;
                                  var targetConnectionId = A2(
                                    $elm$core$Maybe$withDefault,
                                    connectionId,
                                    A2(
                                      $elm$core$Dict$get,
                                      $elm$core$String$fromInt(connectionId),
                                      conf
                                    )
                                  );
                                  return $author$project$Instruction$sequence(
                                    _List_fromArray(
                                      [
                                        $author$project$Instruction$log(
                                          "Get Target Connection for Id = " + $elm$core$String$fromInt(connectionId)
                                        ),
                                        A2(
                                          $author$project$Instruction$andThen,
                                          A2(
                                            $elm$core$Basics$composeR,
                                            $author$project$Instruction$decodeInput($author$project$Scenario$Connection$decoder),
                                            A2(
                                              $elm_community$result_extra$Result$Extra$unpack,
                                              $author$project$Instruction$fail,
                                              function(targetConnection) {
                                                return A3(
                                                  $author$project$Custom$Command$Scenarios$Push$verifyConnection,
                                                  options,
                                                  _Utils_Tuple2(connectionId, accountName),
                                                  targetConnection
                                                );
                                              }
                                            )
                                          ),
                                          $author$project$Gen$Command$Connection$Get$request(
                                            {
                                              aO: $elm$core$Maybe$Just(
                                                _List_fromArray(
                                                  ["id", "accountName", "name", "accountType", "scopes"]
                                                )
                                              ),
                                              da: targetConnectionId,
                                              dg: options.dg,
                                              aF: $elm$core$Maybe$Nothing,
                                              I: options.I
                                            }
                                          )
                                        )
                                      ]
                                    )
                                  );
                                },
                                connections
                              )
                            );
                          }
                        }();
                        return A6(
                          $author$project$Instruction$map5,
                          F5(
                            function(outsA, outsB, outsC, outsD, outsE) {
                              var _v0 = A2(
                                $elm$core$Result$withDefault,
                                _Utils_Tuple2(0, 0),
                                A2(
                                  $author$project$Instruction$decodeInput,
                                  A3(
                                    $elm$json$Json$Decode$map2,
                                    $elm$core$Tuple$pair,
                                    A2($elm$json$Json$Decode$field, "webhookId", $elm$json$Json$Decode$int),
                                    A2($elm$json$Json$Decode$field, "newWebhookId", $elm$json$Json$Decode$int)
                                  ),
                                  outsB
                                )
                              );
                              var webhookId = _v0.a;
                              var newWebhookId = _v0.b;
                              var webhooksConfig = A2(
                                $elm$core$Result$withDefault,
                                $elm$json$Json$Encode$null,
                                A2(
                                  $elm$core$Result$map,
                                  A2($elm$json$Json$Encode$dict, $elm$core$Basics$identity, $elm$core$Basics$identity),
                                  A2(
                                    $elm$core$Result$map,
                                    A2(
                                      $elm$core$Dict$insert,
                                      $elm$core$String$fromInt(webhookId),
                                      $elm$json$Json$Encode$int(newWebhookId)
                                    ),
                                    A2(
                                      $elm$core$Result$andThen,
                                      $elm$json$Json$Decode$decodeValue(
                                        $elm$json$Json$Decode$dict($elm$json$Json$Decode$value)
                                      ),
                                      A2(
                                        $elm$core$Result$fromMaybe,
                                        A2($elm$json$Json$Decode$Failure, "No Webhook mapping in configuration", $elm$json$Json$Encode$null),
                                        A2($elm$core$Dict$get, "hook", config)
                                      )
                                    )
                                  )
                                )
                              );
                              var configWithCreatedComponents = A3($elm$core$Dict$insert, "hook", webhooksConfig, config);
                              var mappedScenario = _Utils_update(
                                scenarioBlueprint,
                                {
                                  bE: A2(
                                    $elm$core$List$map,
                                    $author$project$Custom$Command$Scenarios$Push$remapFlowItemParameters(configWithCreatedComponents),
                                    scenarioBlueprint.bE
                                  )
                                }
                              );
                              return $author$project$Instruction$sequence(
                                _List_fromArray(
                                  [
                                    $author$project$Instruction$succeed(
                                      $author$project$Instruction$Input(outsA)
                                    ),
                                    $author$project$Instruction$succeed(
                                      $author$project$Instruction$Input(outsB)
                                    ),
                                    $author$project$Instruction$succeed(
                                      $author$project$Instruction$Input(outsC)
                                    ),
                                    $author$project$Instruction$succeed(
                                      $author$project$Instruction$Input(outsD)
                                    ),
                                    $author$project$Instruction$succeed(
                                      $author$project$Instruction$Input(outsE)
                                    ),
                                    A2(
                                      $author$project$Instruction$andThen,
                                      A2(
                                        $elm$core$Basics$composeR,
                                        $author$project$Instruction$decodeInput($author$project$Scenario$Scheduling$decoder),
                                        A2(
                                          $elm_community$result_extra$Result$Extra$unpack,
                                          $author$project$Instruction$fail,
                                          function(scheduling) {
                                            var _v1 = options.cO;
                                            if (!_v1.$) {
                                              var updateScenarioId = _v1.a;
                                              return $author$project$Gen$Command$Scenarios$Update$request(
                                                {
                                                  bk: $elm$core$Maybe$Just(
                                                    A2(
                                                      $elm$json$Json$Encode$encode,
                                                      0,
                                                      A2($author$project$Scenario$Blueprint$encode, !options.aZ, mappedScenario)
                                                    )
                                                  ),
                                                  aO: $elm$core$Maybe$Nothing,
                                                  bo: false,
                                                  dg: options.dg,
                                                  bF: $elm$core$Maybe$Nothing,
                                                  b3: $elm$core$Maybe$Just("Test"),
                                                  aF: options.aF,
                                                  ai: updateScenarioId,
                                                  cx: $elm$core$Maybe$Just(
                                                    A2(
                                                      $elm$json$Json$Encode$encode,
                                                      0,
                                                      $author$project$Scenario$Scheduling$encode(scheduling)
                                                    )
                                                  ),
                                                  I: options.I
                                                }
                                              );
                                            } else {
                                              return $author$project$Gen$Command$Scenarios$Create$request(
                                                {
                                                  c5: $elm$core$Maybe$Nothing,
                                                  bk: A2(
                                                    $elm$json$Json$Encode$encode,
                                                    0,
                                                    A2($author$project$Scenario$Blueprint$encode, !options.aZ, mappedScenario)
                                                  ),
                                                  aO: $elm$core$Maybe$Nothing,
                                                  bo: false,
                                                  dg: options.dg,
                                                  bF: $elm$core$Maybe$Nothing,
                                                  aF: options.aF,
                                                  cx: A2(
                                                    $elm$json$Json$Encode$encode,
                                                    0,
                                                    $author$project$Scenario$Scheduling$encode(scheduling)
                                                  ),
                                                  ba: options.ba,
                                                  I: options.I
                                                }
                                              );
                                            }
                                          }
                                        )
                                      ),
                                      $author$project$FileSystem$readJsonFile(options.u + "scheduling.json")
                                    )
                                  ]
                                )
                              );
                            }
                          ),
                          verifyConnectionsInstruction,
                          verifyWebhooksInstruction,
                          verifyDataStoreInstruction,
                          verifyOrganisationVariablesInstruction,
                          verifyTeamVariablesInstruction
                        );
                      }
                    )
                  ),
                  $author$project$FileSystem$readJsonFile(options.u + "blueprint.json")
                )
              ]
            )
          );
        }
      );
      var $author$project$GlobalOptions$maybeOr = F2(
        function(ma, mb) {
          if (ma.$ === 1) {
            return mb;
          } else {
            return ma;
          }
        }
      );
      var $author$project$GlobalOptions$setIfNotPresent = F2(
        function(primaryOptions, secondaryOptions) {
          return _Utils_update(
            primaryOptions,
            {
              dg: A2($author$project$GlobalOptions$maybeOr, primaryOptions.dg, secondaryOptions.dg),
              aF: A2($author$project$GlobalOptions$maybeOr, primaryOptions.aF, secondaryOptions.aF),
              I: A2($author$project$GlobalOptions$maybeOr, primaryOptions.I, secondaryOptions.I)
            }
          );
        }
      );
      var $author$project$Custom$Command$run = F3(
        function(globalOptions, config, command) {
          switch (command.$) {
            case 0:
              var options = command.a;
              return A2(
                $author$project$Custom$Command$Apps$Pull$run,
                A2($author$project$GlobalOptions$setIfNotPresent, options, globalOptions),
                config
              );
            case 1:
              var options = command.a;
              return A2(
                $author$project$Custom$Command$Apps$Push$run,
                A2($author$project$GlobalOptions$setIfNotPresent, options, globalOptions),
                config
              );
            case 2:
              var options = command.a;
              return A2(
                $author$project$Custom$Command$Scenarios$Pull$run,
                A2($author$project$GlobalOptions$setIfNotPresent, options, globalOptions),
                config
              );
            default:
              var options = command.a;
              return A2(
                $author$project$Custom$Command$Scenarios$Push$run,
                A2($author$project$GlobalOptions$setIfNotPresent, options, globalOptions),
                config
              );
          }
        }
      );
      var $author$project$Gen$Command$Apps$Connections$List$run = F2(
        function(options, config) {
          return $author$project$Instruction$sequence(
            _List_fromArray(
              [
                $author$project$Instruction$log(
                  A2($elm$core$Basics$always, "RUN", config)
                ),
                $author$project$Instruction$log(
                  "LIST" + (" " + $author$project$Api$Url$toString(
                    $author$project$Gen$Command$Apps$Connections$List$url(options)
                  ))
                ),
                $author$project$Gen$Command$Apps$Connections$List$request(options)
              ]
            )
          );
        }
      );
      var $author$project$Gen$Command$Apps$Connections$Metadata$Update$run = F2(
        function(options, config) {
          return $author$project$Instruction$sequence(
            _List_fromArray(
              [
                $author$project$Instruction$log(
                  A2($elm$core$Basics$always, "RUN", config)
                ),
                $author$project$Instruction$log(
                  "UPDATE" + (" " + $author$project$Api$Url$toString(
                    $author$project$Gen$Command$Apps$Connections$Metadata$Update$url(options)
                  ))
                ),
                $author$project$Gen$Command$Apps$Connections$Metadata$Update$request(options)
              ]
            )
          );
        }
      );
      var $author$project$Gen$Command$Apps$Connections$Sections$Get$run = F2(
        function(options, config) {
          return $author$project$Instruction$sequence(
            _List_fromArray(
              [
                $author$project$Instruction$log(
                  A2($elm$core$Basics$always, "RUN", config)
                ),
                $author$project$Instruction$log(
                  "GET" + (" " + $author$project$Api$Url$toString(
                    $author$project$Gen$Command$Apps$Connections$Sections$Get$url(options)
                  ))
                ),
                $author$project$Gen$Command$Apps$Connections$Sections$Get$request(options)
              ]
            )
          );
        }
      );
      var $author$project$Gen$Command$Apps$Connections$Sections$Set$run = F2(
        function(options, config) {
          return $author$project$Instruction$sequence(
            _List_fromArray(
              [
                $author$project$Instruction$log(
                  A2($elm$core$Basics$always, "RUN", config)
                ),
                $author$project$Instruction$log(
                  "SET" + (" " + $author$project$Api$Url$toString(
                    $author$project$Gen$Command$Apps$Connections$Sections$Set$url(options)
                  ))
                ),
                $author$project$Gen$Command$Apps$Connections$Sections$Set$request(options)
              ]
            )
          );
        }
      );
      var $author$project$Gen$Command$Apps$Functions$Code$Get$run = F2(
        function(options, config) {
          return $author$project$Instruction$sequence(
            _List_fromArray(
              [
                $author$project$Instruction$log(
                  A2($elm$core$Basics$always, "RUN", config)
                ),
                $author$project$Instruction$log(
                  "GET" + (" " + $author$project$Api$Url$toString(
                    $author$project$Gen$Command$Apps$Functions$Code$Get$url(options)
                  ))
                ),
                $author$project$Gen$Command$Apps$Functions$Code$Get$request(options)
              ]
            )
          );
        }
      );
      var $author$project$Gen$Command$Apps$Functions$Code$Set$run = F2(
        function(options, config) {
          return $author$project$Instruction$sequence(
            _List_fromArray(
              [
                $author$project$Instruction$log(
                  A2($elm$core$Basics$always, "RUN", config)
                ),
                $author$project$Instruction$log(
                  "SET" + (" " + $author$project$Api$Url$toString(
                    $author$project$Gen$Command$Apps$Functions$Code$Set$url(options)
                  ))
                ),
                $author$project$Gen$Command$Apps$Functions$Code$Set$request(options)
              ]
            )
          );
        }
      );
      var $author$project$Gen$Command$Apps$Functions$Get$run = F2(
        function(options, config) {
          return $author$project$Instruction$sequence(
            _List_fromArray(
              [
                $author$project$Instruction$log(
                  A2($elm$core$Basics$always, "RUN", config)
                ),
                $author$project$Instruction$log(
                  "GET" + (" " + $author$project$Api$Url$toString(
                    $author$project$Gen$Command$Apps$Functions$Get$url(options)
                  ))
                ),
                $author$project$Gen$Command$Apps$Functions$Get$request(options)
              ]
            )
          );
        }
      );
      var $author$project$Gen$Command$Apps$Functions$Test$Get$run = F2(
        function(options, config) {
          return $author$project$Instruction$sequence(
            _List_fromArray(
              [
                $author$project$Instruction$log(
                  A2($elm$core$Basics$always, "RUN", config)
                ),
                $author$project$Instruction$log(
                  "GET" + (" " + $author$project$Api$Url$toString(
                    $author$project$Gen$Command$Apps$Functions$Test$Get$url(options)
                  ))
                ),
                $author$project$Gen$Command$Apps$Functions$Test$Get$request(options)
              ]
            )
          );
        }
      );
      var $author$project$Gen$Command$Apps$Functions$Test$Set$run = F2(
        function(options, config) {
          return $author$project$Instruction$sequence(
            _List_fromArray(
              [
                $author$project$Instruction$log(
                  A2($elm$core$Basics$always, "RUN", config)
                ),
                $author$project$Instruction$log(
                  "SET" + (" " + $author$project$Api$Url$toString(
                    $author$project$Gen$Command$Apps$Functions$Test$Set$url(options)
                  ))
                ),
                $author$project$Gen$Command$Apps$Functions$Test$Set$request(options)
              ]
            )
          );
        }
      );
      var $author$project$Gen$Command$Apps$Icon$Get$run = F2(
        function(options, config) {
          return $author$project$Instruction$sequence(
            _List_fromArray(
              [
                $author$project$Instruction$log(
                  A2($elm$core$Basics$always, "RUN", config)
                ),
                $author$project$Instruction$log(
                  "GET" + (" " + $author$project$Api$Url$toString(
                    $author$project$Gen$Command$Apps$Icon$Get$url(options)
                  ))
                ),
                $author$project$Gen$Command$Apps$Icon$Get$request(options)
              ]
            )
          );
        }
      );
      var $author$project$Gen$Command$Apps$Icon$Set$run = F2(
        function(options, config) {
          return $author$project$Instruction$sequence(
            _List_fromArray(
              [
                $author$project$Instruction$log(
                  A2($elm$core$Basics$always, "RUN", config)
                ),
                $author$project$Instruction$log(
                  "SET" + (" " + $author$project$Api$Url$toString(
                    $author$project$Gen$Command$Apps$Icon$Set$url(options)
                  ))
                ),
                $author$project$Gen$Command$Apps$Icon$Set$request(options)
              ]
            )
          );
        }
      );
      var $author$project$Gen$Command$Apps$List$responseDecoder = A2(
        $elm$json$Json$Decode$at,
        _List_fromArray(
          ["apps"]
        ),
        $elm$json$Json$Decode$value
      );
      var $author$project$Gen$Command$Apps$List$url = function(options) {
        return $author$project$Api$Url$url(
          {
            dg: options.dg,
            dC: "/sdk/apps",
            dH: $elm$core$List$concat(
              _List_fromArray(
                [
                  A2($author$project$Api$Url$boolQueryParameter, "all", options.f),
                  A2($author$project$Api$Url$listStringQueryParameter, "cols[]", options.aO)
                ]
              )
            )
          }
        );
      };
      var $author$project$Gen$Command$Apps$List$request = function(options) {
        var body = $elm$core$Maybe$Nothing;
        return A2(
          $author$project$Instruction$request,
          options.aF,
          $author$project$Api$Request$get(
            {
              H: $author$project$Api$Response$resolveToJson($author$project$Gen$Command$Apps$List$responseDecoder),
              I: options.I,
              E: $author$project$Gen$Command$Apps$List$url(options)
            }
          )
        );
      };
      var $author$project$Gen$Command$Apps$List$run = F2(
        function(options, config) {
          return $author$project$Instruction$sequence(
            _List_fromArray(
              [
                $author$project$Instruction$log(
                  A2($elm$core$Basics$always, "RUN", config)
                ),
                $author$project$Instruction$log(
                  "LIST" + (" " + $author$project$Api$Url$toString(
                    $author$project$Gen$Command$Apps$List$url(options)
                  ))
                ),
                $author$project$Gen$Command$Apps$List$request(options)
              ]
            )
          );
        }
      );
      var $author$project$Gen$Command$Apps$Metadata$Get$run = F2(
        function(options, config) {
          return $author$project$Instruction$sequence(
            _List_fromArray(
              [
                $author$project$Instruction$log(
                  A2($elm$core$Basics$always, "RUN", config)
                ),
                $author$project$Instruction$log(
                  "GET" + (" " + $author$project$Api$Url$toString(
                    $author$project$Gen$Command$Apps$Metadata$Get$url(options)
                  ))
                ),
                $author$project$Gen$Command$Apps$Metadata$Get$request(options)
              ]
            )
          );
        }
      );
      var $author$project$Gen$Command$Apps$Metadata$Update$run = F2(
        function(options, config) {
          return $author$project$Instruction$sequence(
            _List_fromArray(
              [
                $author$project$Instruction$log(
                  A2($elm$core$Basics$always, "RUN", config)
                ),
                $author$project$Instruction$log(
                  "UPDATE" + (" " + $author$project$Api$Url$toString(
                    $author$project$Gen$Command$Apps$Metadata$Update$url(options)
                  ))
                ),
                $author$project$Gen$Command$Apps$Metadata$Update$request(options)
              ]
            )
          );
        }
      );
      var $author$project$Gen$Command$Apps$Module$Get$run = F2(
        function(options, config) {
          return $author$project$Instruction$sequence(
            _List_fromArray(
              [
                $author$project$Instruction$log(
                  A2($elm$core$Basics$always, "RUN", config)
                ),
                $author$project$Instruction$log(
                  "GET" + (" " + $author$project$Api$Url$toString(
                    $author$project$Gen$Command$Apps$Module$Get$url(options)
                  ))
                ),
                $author$project$Gen$Command$Apps$Module$Get$request(options)
              ]
            )
          );
        }
      );
      var $author$project$Gen$Command$Apps$Module$Update$run = F2(
        function(options, config) {
          return $author$project$Instruction$sequence(
            _List_fromArray(
              [
                $author$project$Instruction$log(
                  A2($elm$core$Basics$always, "RUN", config)
                ),
                $author$project$Instruction$log(
                  "UPDATE" + (" " + $author$project$Api$Url$toString(
                    $author$project$Gen$Command$Apps$Module$Update$url(options)
                  ))
                ),
                $author$project$Gen$Command$Apps$Module$Update$request(options)
              ]
            )
          );
        }
      );
      var $author$project$Gen$Command$Apps$Modules$Get$run = F2(
        function(options, config) {
          return $author$project$Instruction$sequence(
            _List_fromArray(
              [
                $author$project$Instruction$log(
                  A2($elm$core$Basics$always, "RUN", config)
                ),
                $author$project$Instruction$log(
                  "GET" + (" " + $author$project$Api$Url$toString(
                    $author$project$Gen$Command$Apps$Modules$Get$url(options)
                  ))
                ),
                $author$project$Gen$Command$Apps$Modules$Get$request(options)
              ]
            )
          );
        }
      );
      var $author$project$Gen$Command$Apps$Modules$Sections$Get$run = F2(
        function(options, config) {
          return $author$project$Instruction$sequence(
            _List_fromArray(
              [
                $author$project$Instruction$log(
                  A2($elm$core$Basics$always, "RUN", config)
                ),
                $author$project$Instruction$log(
                  "GET" + (" " + $author$project$Api$Url$toString(
                    $author$project$Gen$Command$Apps$Modules$Sections$Get$url(options)
                  ))
                ),
                $author$project$Gen$Command$Apps$Modules$Sections$Get$request(options)
              ]
            )
          );
        }
      );
      var $author$project$Gen$Command$Apps$Modules$Sections$Set$run = F2(
        function(options, config) {
          return $author$project$Instruction$sequence(
            _List_fromArray(
              [
                $author$project$Instruction$log(
                  A2($elm$core$Basics$always, "RUN", config)
                ),
                $author$project$Instruction$log(
                  "SET" + (" " + $author$project$Api$Url$toString(
                    $author$project$Gen$Command$Apps$Modules$Sections$Set$url(options)
                  ))
                ),
                $author$project$Gen$Command$Apps$Modules$Sections$Set$request(options)
              ]
            )
          );
        }
      );
      var $author$project$Gen$Command$Apps$Readme$Get$run = F2(
        function(options, config) {
          return $author$project$Instruction$sequence(
            _List_fromArray(
              [
                $author$project$Instruction$log(
                  A2($elm$core$Basics$always, "RUN", config)
                ),
                $author$project$Instruction$log(
                  "GET" + (" " + $author$project$Api$Url$toString(
                    $author$project$Gen$Command$Apps$Readme$Get$url(options)
                  ))
                ),
                $author$project$Gen$Command$Apps$Readme$Get$request(options)
              ]
            )
          );
        }
      );
      var $author$project$Gen$Command$Apps$Readme$Set$run = F2(
        function(options, config) {
          return $author$project$Instruction$sequence(
            _List_fromArray(
              [
                $author$project$Instruction$log(
                  A2($elm$core$Basics$always, "RUN", config)
                ),
                $author$project$Instruction$log(
                  "SET" + (" " + $author$project$Api$Url$toString(
                    $author$project$Gen$Command$Apps$Readme$Set$url(options)
                  ))
                ),
                $author$project$Gen$Command$Apps$Readme$Set$request(options)
              ]
            )
          );
        }
      );
      var $author$project$Gen$Command$Apps$Rpc$Get$run = F2(
        function(options, config) {
          return $author$project$Instruction$sequence(
            _List_fromArray(
              [
                $author$project$Instruction$log(
                  A2($elm$core$Basics$always, "RUN", config)
                ),
                $author$project$Instruction$log(
                  "GET" + (" " + $author$project$Api$Url$toString(
                    $author$project$Gen$Command$Apps$Rpc$Get$url(options)
                  ))
                ),
                $author$project$Gen$Command$Apps$Rpc$Get$request(options)
              ]
            )
          );
        }
      );
      var $author$project$Gen$Command$Apps$Rpc$Update$run = F2(
        function(options, config) {
          return $author$project$Instruction$sequence(
            _List_fromArray(
              [
                $author$project$Instruction$log(
                  A2($elm$core$Basics$always, "RUN", config)
                ),
                $author$project$Instruction$log(
                  "UPDATE" + (" " + $author$project$Api$Url$toString(
                    $author$project$Gen$Command$Apps$Rpc$Update$url(options)
                  ))
                ),
                $author$project$Gen$Command$Apps$Rpc$Update$request(options)
              ]
            )
          );
        }
      );
      var $author$project$Gen$Command$Apps$Rpcs$Get$run = F2(
        function(options, config) {
          return $author$project$Instruction$sequence(
            _List_fromArray(
              [
                $author$project$Instruction$log(
                  A2($elm$core$Basics$always, "RUN", config)
                ),
                $author$project$Instruction$log(
                  "GET" + (" " + $author$project$Api$Url$toString(
                    $author$project$Gen$Command$Apps$Rpcs$Get$url(options)
                  ))
                ),
                $author$project$Gen$Command$Apps$Rpcs$Get$request(options)
              ]
            )
          );
        }
      );
      var $author$project$Gen$Command$Apps$Rpcs$Sections$Get$run = F2(
        function(options, config) {
          return $author$project$Instruction$sequence(
            _List_fromArray(
              [
                $author$project$Instruction$log(
                  A2($elm$core$Basics$always, "RUN", config)
                ),
                $author$project$Instruction$log(
                  "GET" + (" " + $author$project$Api$Url$toString(
                    $author$project$Gen$Command$Apps$Rpcs$Sections$Get$url(options)
                  ))
                ),
                $author$project$Gen$Command$Apps$Rpcs$Sections$Get$request(options)
              ]
            )
          );
        }
      );
      var $author$project$Gen$Command$Apps$Rpcs$Sections$Set$run = F2(
        function(options, config) {
          return $author$project$Instruction$sequence(
            _List_fromArray(
              [
                $author$project$Instruction$log(
                  A2($elm$core$Basics$always, "RUN", config)
                ),
                $author$project$Instruction$log(
                  "SET" + (" " + $author$project$Api$Url$toString(
                    $author$project$Gen$Command$Apps$Rpcs$Sections$Set$url(options)
                  ))
                ),
                $author$project$Gen$Command$Apps$Rpcs$Sections$Set$request(options)
              ]
            )
          );
        }
      );
      var $author$project$Gen$Command$Apps$Sections$Get$run = F2(
        function(options, config) {
          return $author$project$Instruction$sequence(
            _List_fromArray(
              [
                $author$project$Instruction$log(
                  A2($elm$core$Basics$always, "RUN", config)
                ),
                $author$project$Instruction$log(
                  "GET" + (" " + $author$project$Api$Url$toString(
                    $author$project$Gen$Command$Apps$Sections$Get$url(options)
                  ))
                ),
                $author$project$Gen$Command$Apps$Sections$Get$request(options)
              ]
            )
          );
        }
      );
      var $author$project$Gen$Command$Apps$Sections$Set$run = F2(
        function(options, config) {
          return $author$project$Instruction$sequence(
            _List_fromArray(
              [
                $author$project$Instruction$log(
                  A2($elm$core$Basics$always, "RUN", config)
                ),
                $author$project$Instruction$log(
                  "SET" + (" " + $author$project$Api$Url$toString(
                    $author$project$Gen$Command$Apps$Sections$Set$url(options)
                  ))
                ),
                $author$project$Gen$Command$Apps$Sections$Set$request(options)
              ]
            )
          );
        }
      );
      var $author$project$Gen$Command$Apps$Webhook$List$run = F2(
        function(options, config) {
          return $author$project$Instruction$sequence(
            _List_fromArray(
              [
                $author$project$Instruction$log(
                  A2($elm$core$Basics$always, "RUN", config)
                ),
                $author$project$Instruction$log(
                  "LIST" + (" " + $author$project$Api$Url$toString(
                    $author$project$Gen$Command$Apps$Webhook$List$url(options)
                  ))
                ),
                $author$project$Gen$Command$Apps$Webhook$List$request(options)
              ]
            )
          );
        }
      );
      var $author$project$Gen$Command$Apps$Webhook$Update$run = F2(
        function(options, config) {
          return $author$project$Instruction$sequence(
            _List_fromArray(
              [
                $author$project$Instruction$log(
                  A2($elm$core$Basics$always, "RUN", config)
                ),
                $author$project$Instruction$log(
                  "UPDATE" + (" " + $author$project$Api$Url$toString(
                    $author$project$Gen$Command$Apps$Webhook$Update$url(options)
                  ))
                ),
                $author$project$Gen$Command$Apps$Webhook$Update$request(options)
              ]
            )
          );
        }
      );
      var $author$project$Gen$Command$Apps$Webhooks$List$run = F2(
        function(options, config) {
          return $author$project$Instruction$sequence(
            _List_fromArray(
              [
                $author$project$Instruction$log(
                  A2($elm$core$Basics$always, "RUN", config)
                ),
                $author$project$Instruction$log(
                  "LIST" + (" " + $author$project$Api$Url$toString(
                    $author$project$Gen$Command$Apps$Webhooks$List$url(options)
                  ))
                ),
                $author$project$Gen$Command$Apps$Webhooks$List$request(options)
              ]
            )
          );
        }
      );
      var $author$project$Gen$Command$Apps$Webhooks$Sections$Get$run = F2(
        function(options, config) {
          return $author$project$Instruction$sequence(
            _List_fromArray(
              [
                $author$project$Instruction$log(
                  A2($elm$core$Basics$always, "RUN", config)
                ),
                $author$project$Instruction$log(
                  "GET" + (" " + $author$project$Api$Url$toString(
                    $author$project$Gen$Command$Apps$Webhooks$Sections$Get$url(options)
                  ))
                ),
                $author$project$Gen$Command$Apps$Webhooks$Sections$Get$request(options)
              ]
            )
          );
        }
      );
      var $author$project$Gen$Command$Apps$Webhooks$Sections$Set$run = F2(
        function(options, config) {
          return $author$project$Instruction$sequence(
            _List_fromArray(
              [
                $author$project$Instruction$log(
                  A2($elm$core$Basics$always, "RUN", config)
                ),
                $author$project$Instruction$log(
                  "SET" + (" " + $author$project$Api$Url$toString(
                    $author$project$Gen$Command$Apps$Webhooks$Sections$Set$url(options)
                  ))
                ),
                $author$project$Gen$Command$Apps$Webhooks$Sections$Set$request(options)
              ]
            )
          );
        }
      );
      var $author$project$Gen$Command$Connection$Get$run = F2(
        function(options, config) {
          return $author$project$Instruction$sequence(
            _List_fromArray(
              [
                $author$project$Instruction$log(
                  A2($elm$core$Basics$always, "RUN", config)
                ),
                $author$project$Instruction$log(
                  "GET" + (" " + $author$project$Api$Url$toString(
                    $author$project$Gen$Command$Connection$Get$url(options)
                  ))
                ),
                $author$project$Gen$Command$Connection$Get$request(options)
              ]
            )
          );
        }
      );
      var $author$project$Gen$Command$Connections$List$responseDecoder = A2(
        $elm$json$Json$Decode$at,
        _List_fromArray(
          ["connections"]
        ),
        $elm$json$Json$Decode$value
      );
      var $author$project$Api$Url$intQueryParameter = F2(
        function(key, value) {
          return _List_fromArray(
            [
              A2($elm$url$Url$Builder$int, key, value)
            ]
          );
        }
      );
      var $author$project$Gen$Command$Connections$List$url = function(options) {
        return $author$project$Api$Url$url(
          {
            dg: options.dg,
            dC: "/connections",
            dH: $elm$core$List$concat(
              _List_fromArray(
                [
                  A2($author$project$Api$Url$intQueryParameter, "teamId", options.ba),
                  A2($author$project$Api$Url$listStringQueryParameter, "type[]", options.d0),
                  A2($author$project$Api$Url$listStringQueryParameter, "cols[]", options.aO)
                ]
              )
            )
          }
        );
      };
      var $author$project$Gen$Command$Connections$List$request = function(options) {
        var body = $elm$core$Maybe$Nothing;
        return A2(
          $author$project$Instruction$request,
          options.aF,
          $author$project$Api$Request$get(
            {
              H: $author$project$Api$Response$resolveToJson($author$project$Gen$Command$Connections$List$responseDecoder),
              I: options.I,
              E: $author$project$Gen$Command$Connections$List$url(options)
            }
          )
        );
      };
      var $author$project$Gen$Command$Connections$List$run = F2(
        function(options, config) {
          return $author$project$Instruction$sequence(
            _List_fromArray(
              [
                $author$project$Instruction$log(
                  A2($elm$core$Basics$always, "RUN", config)
                ),
                $author$project$Instruction$log(
                  "LIST" + (" " + $author$project$Api$Url$toString(
                    $author$project$Gen$Command$Connections$List$url(options)
                  ))
                ),
                $author$project$Gen$Command$Connections$List$request(options)
              ]
            )
          );
        }
      );
      var $author$project$Gen$Command$DataStores$Create$run = F2(
        function(options, config) {
          return $author$project$Instruction$sequence(
            _List_fromArray(
              [
                $author$project$Instruction$log(
                  A2($elm$core$Basics$always, "RUN", config)
                ),
                $author$project$Instruction$log(
                  "CREATE" + (" " + $author$project$Api$Url$toString(
                    $author$project$Gen$Command$DataStores$Create$url(options)
                  ))
                ),
                $author$project$Gen$Command$DataStores$Create$request(options)
              ]
            )
          );
        }
      );
      var $author$project$Gen$Command$DataStores$Get$run = F2(
        function(options, config) {
          return $author$project$Instruction$sequence(
            _List_fromArray(
              [
                $author$project$Instruction$log(
                  A2($elm$core$Basics$always, "RUN", config)
                ),
                $author$project$Instruction$log(
                  "GET" + (" " + $author$project$Api$Url$toString(
                    $author$project$Gen$Command$DataStores$Get$url(options)
                  ))
                ),
                $author$project$Gen$Command$DataStores$Get$request(options)
              ]
            )
          );
        }
      );
      var $author$project$Gen$Command$DataStructures$Create$run = F2(
        function(options, config) {
          return $author$project$Instruction$sequence(
            _List_fromArray(
              [
                $author$project$Instruction$log(
                  A2($elm$core$Basics$always, "RUN", config)
                ),
                $author$project$Instruction$log(
                  "CREATE" + (" " + $author$project$Api$Url$toString(
                    $author$project$Gen$Command$DataStructures$Create$url(options)
                  ))
                ),
                $author$project$Gen$Command$DataStructures$Create$request(options)
              ]
            )
          );
        }
      );
      var $author$project$Gen$Command$DataStructures$Update$run = F2(
        function(options, config) {
          return $author$project$Instruction$sequence(
            _List_fromArray(
              [
                $author$project$Instruction$log(
                  A2($elm$core$Basics$always, "RUN", config)
                ),
                $author$project$Instruction$log(
                  "UPDATE" + (" " + $author$project$Api$Url$toString(
                    $author$project$Gen$Command$DataStructures$Update$url(options)
                  ))
                ),
                $author$project$Gen$Command$DataStructures$Update$request(options)
              ]
            )
          );
        }
      );
      var $author$project$Gen$Command$Enums$Countries$List$responseDecoder = A2(
        $elm$json$Json$Decode$at,
        _List_fromArray(
          ["countries"]
        ),
        $elm$json$Json$Decode$value
      );
      var $author$project$Gen$Command$Enums$Countries$List$url = function(options) {
        return $author$project$Api$Url$url(
          {
            dg: options.dg,
            dC: "/enums/countries",
            dH: $elm$core$List$concat(_List_Nil)
          }
        );
      };
      var $author$project$Gen$Command$Enums$Countries$List$request = function(options) {
        var body = $elm$core$Maybe$Nothing;
        return A2(
          $author$project$Instruction$request,
          options.aF,
          $author$project$Api$Request$get(
            {
              H: $author$project$Api$Response$resolveToJson($author$project$Gen$Command$Enums$Countries$List$responseDecoder),
              I: options.I,
              E: $author$project$Gen$Command$Enums$Countries$List$url(options)
            }
          )
        );
      };
      var $author$project$Gen$Command$Enums$Countries$List$run = F2(
        function(options, config) {
          return $author$project$Instruction$sequence(
            _List_fromArray(
              [
                $author$project$Instruction$log(
                  A2($elm$core$Basics$always, "RUN", config)
                ),
                $author$project$Instruction$log(
                  "LIST" + (" " + $author$project$Api$Url$toString(
                    $author$project$Gen$Command$Enums$Countries$List$url(options)
                  ))
                ),
                $author$project$Gen$Command$Enums$Countries$List$request(options)
              ]
            )
          );
        }
      );
      var $author$project$Gen$Command$Hooks$Create$run = F2(
        function(options, config) {
          return $author$project$Instruction$sequence(
            _List_fromArray(
              [
                $author$project$Instruction$log(
                  A2($elm$core$Basics$always, "RUN", config)
                ),
                $author$project$Instruction$log(
                  "CREATE" + (" " + $author$project$Api$Url$toString(
                    $author$project$Gen$Command$Hooks$Create$url(options)
                  ))
                ),
                $author$project$Gen$Command$Hooks$Create$request(options)
              ]
            )
          );
        }
      );
      var $author$project$Gen$Command$Hooks$Get$run = F2(
        function(options, config) {
          return $author$project$Instruction$sequence(
            _List_fromArray(
              [
                $author$project$Instruction$log(
                  A2($elm$core$Basics$always, "RUN", config)
                ),
                $author$project$Instruction$log(
                  "GET" + (" " + $author$project$Api$Url$toString(
                    $author$project$Gen$Command$Hooks$Get$url(options)
                  ))
                ),
                $author$project$Gen$Command$Hooks$Get$request(options)
              ]
            )
          );
        }
      );
      var $author$project$Gen$Command$Hooks$List$responseDecoder = A2(
        $elm$json$Json$Decode$at,
        _List_fromArray(
          ["hooks"]
        ),
        $elm$json$Json$Decode$value
      );
      var $author$project$Gen$Command$Hooks$List$url = function(options) {
        return $author$project$Api$Url$url(
          {
            dg: options.dg,
            dC: "/hooks",
            dH: $elm$core$List$concat(
              _List_fromArray(
                [
                  A2($author$project$Api$Url$intQueryParameter, "teamId", options.ba),
                  A2($author$project$Api$Url$stringQueryParameter, "typeName", options.d$),
                  A2($author$project$Api$Url$boolQueryParameter, "assigned", options.bg),
                  A2($author$project$Api$Url$optionalIntQueryParameter, "viewForScenarioId", options.cR)
                ]
              )
            )
          }
        );
      };
      var $author$project$Gen$Command$Hooks$List$request = function(options) {
        var body = $elm$core$Maybe$Nothing;
        return A2(
          $author$project$Instruction$request,
          options.aF,
          $author$project$Api$Request$get(
            {
              H: $author$project$Api$Response$resolveToJson($author$project$Gen$Command$Hooks$List$responseDecoder),
              I: options.I,
              E: $author$project$Gen$Command$Hooks$List$url(options)
            }
          )
        );
      };
      var $author$project$Gen$Command$Hooks$List$run = F2(
        function(options, config) {
          return $author$project$Instruction$sequence(
            _List_fromArray(
              [
                $author$project$Instruction$log(
                  A2($elm$core$Basics$always, "RUN", config)
                ),
                $author$project$Instruction$log(
                  "LIST" + (" " + $author$project$Api$Url$toString(
                    $author$project$Gen$Command$Hooks$List$url(options)
                  ))
                ),
                $author$project$Gen$Command$Hooks$List$request(options)
              ]
            )
          );
        }
      );
      var $author$project$Gen$Command$Organizations$List$responseDecoder = A2(
        $elm$json$Json$Decode$at,
        _List_fromArray(
          ["organizations"]
        ),
        $elm$json$Json$Decode$value
      );
      var $author$project$Gen$Command$Organizations$List$url = function(options) {
        return $author$project$Api$Url$url(
          {
            dg: options.dg,
            dC: "/organizations",
            dH: $elm$core$List$concat(
              _List_fromArray(
                [
                  A2($author$project$Api$Url$stringQueryParameter, "zone", options.c_),
                  A2($author$project$Api$Url$stringQueryParameter, "externalId", options.bC),
                  A2($author$project$Api$Url$listStringQueryParameter, "cols[]", options.aO),
                  A2($author$project$Api$Url$stringQueryParameter, "pg[sortBy]", options.cc),
                  A2($author$project$Api$Url$optionalIntQueryParameter, "pg[offset]", options.ca),
                  A2($author$project$Api$Url$stringQueryParameter, "pg[sortDir]", options.cd),
                  A2($author$project$Api$Url$optionalIntQueryParameter, "pg[limit]", options.b9)
                ]
              )
            )
          }
        );
      };
      var $author$project$Gen$Command$Organizations$List$request = function(options) {
        var body = $elm$core$Maybe$Nothing;
        return A2(
          $author$project$Instruction$request,
          options.aF,
          $author$project$Api$Request$get(
            {
              H: $author$project$Api$Response$resolveToJson($author$project$Gen$Command$Organizations$List$responseDecoder),
              I: options.I,
              E: $author$project$Gen$Command$Organizations$List$url(options)
            }
          )
        );
      };
      var $author$project$Gen$Command$Organizations$List$run = F2(
        function(options, config) {
          return $author$project$Instruction$sequence(
            _List_fromArray(
              [
                $author$project$Instruction$log(
                  A2($elm$core$Basics$always, "RUN", config)
                ),
                $author$project$Instruction$log(
                  "LIST" + (" " + $author$project$Api$Url$toString(
                    $author$project$Gen$Command$Organizations$List$url(options)
                  ))
                ),
                $author$project$Gen$Command$Organizations$List$request(options)
              ]
            )
          );
        }
      );
      var $author$project$Gen$Command$Organizations$Variables$Get$run = F2(
        function(options, config) {
          return $author$project$Instruction$sequence(
            _List_fromArray(
              [
                $author$project$Instruction$log(
                  A2($elm$core$Basics$always, "RUN", config)
                ),
                $author$project$Instruction$log(
                  "GET" + (" " + $author$project$Api$Url$toString(
                    $author$project$Gen$Command$Organizations$Variables$Get$url(options)
                  ))
                ),
                $author$project$Gen$Command$Organizations$Variables$Get$request(options)
              ]
            )
          );
        }
      );
      var $author$project$Gen$Command$Scenarios$Blueprints$Get$run = F2(
        function(options, config) {
          return $author$project$Instruction$sequence(
            _List_fromArray(
              [
                $author$project$Instruction$log(
                  A2($elm$core$Basics$always, "RUN", config)
                ),
                $author$project$Instruction$log(
                  "GET" + (" " + $author$project$Api$Url$toString(
                    $author$project$Gen$Command$Scenarios$Blueprints$Get$url(options)
                  ))
                ),
                $author$project$Gen$Command$Scenarios$Blueprints$Get$request(options)
              ]
            )
          );
        }
      );
      var $author$project$Gen$Command$Scenarios$Clone$Create$responseDecoder = A2(
        $elm$json$Json$Decode$at,
        _List_fromArray(
          ["scenario"]
        ),
        $elm$json$Json$Decode$value
      );
      var $author$project$Gen$Command$Scenarios$Clone$Create$url = function(options) {
        return $author$project$Api$Url$url(
          {
            dg: options.dg,
            dC: A3(
              $elm$core$String$replace,
              "{scenarioId}",
              $elm$core$String$fromInt(options.ai),
              "/scenarios/{scenarioId}/clone"
            ),
            dH: $elm$core$List$concat(
              _List_fromArray(
                [
                  A2($author$project$Api$Url$intQueryParameter, "organizationId", options.a3),
                  A2($author$project$Api$Url$listStringQueryParameter, "cols[]", options.aO),
                  A2($author$project$Api$Url$boolQueryParameter, "confirmed", options.bo),
                  A2($author$project$Api$Url$boolQueryParameter, "notAnalyze", options.b4)
                ]
              )
            )
          }
        );
      };
      var $author$project$Gen$Command$Scenarios$Clone$Create$request = function(options) {
        var body = $author$project$Api$Body$applicationJson(
          $elm$json$Json$Encode$object(
            _List_fromArray(
              [
                _Utils_Tuple2(
                  "name",
                  $elm$json$Json$Encode$string(options.b3)
                ),
                _Utils_Tuple2(
                  "teamId",
                  $elm$json$Json$Encode$int(options.ba)
                ),
                _Utils_Tuple2(
                  "account",
                  A2($elm_community$json_extra$Json$Encode$Extra$maybe, $author$project$Config$encode, options.be)
                ),
                _Utils_Tuple2(
                  "key",
                  A2($elm_community$json_extra$Json$Encode$Extra$maybe, $author$project$Config$encode, options.bT)
                ),
                _Utils_Tuple2(
                  "hook",
                  A2($elm_community$json_extra$Json$Encode$Extra$maybe, $author$project$Config$encode, options.aX)
                ),
                _Utils_Tuple2(
                  "device",
                  A2($elm_community$json_extra$Json$Encode$Extra$maybe, $author$project$Config$encode, options.bw)
                ),
                _Utils_Tuple2(
                  "udt",
                  A2($elm_community$json_extra$Json$Encode$Extra$maybe, $author$project$Config$encode, options.d1)
                ),
                _Utils_Tuple2(
                  "datastore",
                  A2($elm_community$json_extra$Json$Encode$Extra$maybe, $author$project$Config$encode, options.aQ)
                ),
                _Utils_Tuple2(
                  "states",
                  $elm$json$Json$Encode$bool(options.cD)
                )
              ]
            )
          )
        );
        return A2(
          $author$project$Instruction$request,
          options.aF,
          $author$project$Api$Request$post(
            {
              F: body,
              H: $author$project$Api$Response$resolveToJson($author$project$Gen$Command$Scenarios$Clone$Create$responseDecoder),
              I: options.I,
              E: $author$project$Gen$Command$Scenarios$Clone$Create$url(options)
            }
          )
        );
      };
      var $author$project$Gen$Command$Scenarios$Clone$Create$run = F2(
        function(options, config) {
          return $author$project$Instruction$sequence(
            _List_fromArray(
              [
                $author$project$Instruction$log(
                  A2($elm$core$Basics$always, "RUN", config)
                ),
                $author$project$Instruction$log(
                  "CREATE" + (" " + $author$project$Api$Url$toString(
                    $author$project$Gen$Command$Scenarios$Clone$Create$url(options)
                  ))
                ),
                $author$project$Gen$Command$Scenarios$Clone$Create$request(options)
              ]
            )
          );
        }
      );
      var $author$project$Gen$Command$Scenarios$Create$run = F2(
        function(options, config) {
          return $author$project$Instruction$sequence(
            _List_fromArray(
              [
                $author$project$Instruction$log(
                  A2($elm$core$Basics$always, "RUN", config)
                ),
                $author$project$Instruction$log(
                  "CREATE" + (" " + $author$project$Api$Url$toString(
                    $author$project$Gen$Command$Scenarios$Create$url(options)
                  ))
                ),
                $author$project$Gen$Command$Scenarios$Create$request(options)
              ]
            )
          );
        }
      );
      var $author$project$Gen$Command$Scenarios$Get$run = F2(
        function(options, config) {
          return $author$project$Instruction$sequence(
            _List_fromArray(
              [
                $author$project$Instruction$log(
                  A2($elm$core$Basics$always, "RUN", config)
                ),
                $author$project$Instruction$log(
                  "GET" + (" " + $author$project$Api$Url$toString(
                    $author$project$Gen$Command$Scenarios$Get$url(options)
                  ))
                ),
                $author$project$Gen$Command$Scenarios$Get$request(options)
              ]
            )
          );
        }
      );
      var $author$project$Gen$Command$Scenarios$List$responseDecoder = A2(
        $elm$json$Json$Decode$at,
        _List_fromArray(
          ["scenarios"]
        ),
        $elm$json$Json$Decode$value
      );
      var $author$project$Gen$Command$Scenarios$List$url = function(options) {
        return $author$project$Api$Url$url(
          {
            dg: options.dg,
            dC: "/scenarios",
            dH: $elm$core$List$concat(
              _List_fromArray(
                [
                  A2($author$project$Api$Url$optionalIntQueryParameter, "teamId", options.ba),
                  A2($author$project$Api$Url$optionalIntQueryParameter, "organizationId", options.a3),
                  A2($author$project$Api$Url$listStringQueryParameter, "id[]", options.ad),
                  A2($author$project$Api$Url$optionalIntQueryParameter, "folderId", options.bF),
                  A2($author$project$Api$Url$boolQueryParameter, "islinked", options.bR),
                  A2($author$project$Api$Url$listStringQueryParameter, "cols[]", options.aO),
                  A2($author$project$Api$Url$optionalIntQueryParameter, "pg[offset]", options.ca),
                  A2($author$project$Api$Url$optionalIntQueryParameter, "pg[limit]", options.b9),
                  A2($author$project$Api$Url$stringQueryParameter, "pg[sortBy]", options.cc),
                  A2($author$project$Api$Url$stringQueryParameter, "pg[sortDir]", options.cd),
                  A2($author$project$Api$Url$boolQueryParameter, "pg[returnTotalCount]", options.cb)
                ]
              )
            )
          }
        );
      };
      var $author$project$Gen$Command$Scenarios$List$request = function(options) {
        var body = $elm$core$Maybe$Nothing;
        return A2(
          $author$project$Instruction$request,
          options.aF,
          $author$project$Api$Request$get(
            {
              H: $author$project$Api$Response$resolveToJson($author$project$Gen$Command$Scenarios$List$responseDecoder),
              I: options.I,
              E: $author$project$Gen$Command$Scenarios$List$url(options)
            }
          )
        );
      };
      var $author$project$Gen$Command$Scenarios$List$run = F2(
        function(options, config) {
          return $author$project$Instruction$sequence(
            _List_fromArray(
              [
                $author$project$Instruction$log(
                  A2($elm$core$Basics$always, "RUN", config)
                ),
                $author$project$Instruction$log(
                  "LIST" + (" " + $author$project$Api$Url$toString(
                    $author$project$Gen$Command$Scenarios$List$url(options)
                  ))
                ),
                $author$project$Gen$Command$Scenarios$List$request(options)
              ]
            )
          );
        }
      );
      var $author$project$Gen$Command$Scenarios$Update$run = F2(
        function(options, config) {
          return $author$project$Instruction$sequence(
            _List_fromArray(
              [
                $author$project$Instruction$log(
                  A2($elm$core$Basics$always, "RUN", config)
                ),
                $author$project$Instruction$log(
                  "UPDATE" + (" " + $author$project$Api$Url$toString(
                    $author$project$Gen$Command$Scenarios$Update$url(options)
                  ))
                ),
                $author$project$Gen$Command$Scenarios$Update$request(options)
              ]
            )
          );
        }
      );
      var $author$project$Gen$Command$Teams$Variables$Get$run = F2(
        function(options, config) {
          return $author$project$Instruction$sequence(
            _List_fromArray(
              [
                $author$project$Instruction$log(
                  A2($elm$core$Basics$always, "RUN", config)
                ),
                $author$project$Instruction$log(
                  "GET" + (" " + $author$project$Api$Url$toString(
                    $author$project$Gen$Command$Teams$Variables$Get$url(options)
                  ))
                ),
                $author$project$Gen$Command$Teams$Variables$Get$request(options)
              ]
            )
          );
        }
      );
      var $author$project$Gen$Command$run = F3(
        function(globalOptions, config, command) {
          switch (command.$) {
            case 0:
              var options = command.a;
              return A2(
                $author$project$Gen$Command$Apps$List$run,
                A2($author$project$GlobalOptions$setIfNotPresent, options, globalOptions),
                config
              );
            case 1:
              var options = command.a;
              return A2(
                $author$project$Gen$Command$Apps$Metadata$Get$run,
                A2($author$project$GlobalOptions$setIfNotPresent, options, globalOptions),
                config
              );
            case 2:
              var options = command.a;
              return A2(
                $author$project$Gen$Command$Apps$Metadata$Update$run,
                A2($author$project$GlobalOptions$setIfNotPresent, options, globalOptions),
                config
              );
            case 3:
              var options = command.a;
              return A2(
                $author$project$Gen$Command$Apps$Icon$Get$run,
                A2($author$project$GlobalOptions$setIfNotPresent, options, globalOptions),
                config
              );
            case 4:
              var options = command.a;
              return A2(
                $author$project$Gen$Command$Apps$Icon$Set$run,
                A2($author$project$GlobalOptions$setIfNotPresent, options, globalOptions),
                config
              );
            case 5:
              var options = command.a;
              return A2(
                $author$project$Gen$Command$Apps$Sections$Get$run,
                A2($author$project$GlobalOptions$setIfNotPresent, options, globalOptions),
                config
              );
            case 6:
              var options = command.a;
              return A2(
                $author$project$Gen$Command$Apps$Sections$Set$run,
                A2($author$project$GlobalOptions$setIfNotPresent, options, globalOptions),
                config
              );
            case 7:
              var options = command.a;
              return A2(
                $author$project$Gen$Command$Apps$Readme$Get$run,
                A2($author$project$GlobalOptions$setIfNotPresent, options, globalOptions),
                config
              );
            case 8:
              var options = command.a;
              return A2(
                $author$project$Gen$Command$Apps$Readme$Set$run,
                A2($author$project$GlobalOptions$setIfNotPresent, options, globalOptions),
                config
              );
            case 9:
              var options = command.a;
              return A2(
                $author$project$Gen$Command$Apps$Connections$List$run,
                A2($author$project$GlobalOptions$setIfNotPresent, options, globalOptions),
                config
              );
            case 10:
              var options = command.a;
              return A2(
                $author$project$Gen$Command$Apps$Connections$Metadata$Update$run,
                A2($author$project$GlobalOptions$setIfNotPresent, options, globalOptions),
                config
              );
            case 11:
              var options = command.a;
              return A2(
                $author$project$Gen$Command$Apps$Connections$Sections$Get$run,
                A2($author$project$GlobalOptions$setIfNotPresent, options, globalOptions),
                config
              );
            case 12:
              var options = command.a;
              return A2(
                $author$project$Gen$Command$Apps$Connections$Sections$Set$run,
                A2($author$project$GlobalOptions$setIfNotPresent, options, globalOptions),
                config
              );
            case 13:
              var options = command.a;
              return A2(
                $author$project$Gen$Command$Apps$Modules$Get$run,
                A2($author$project$GlobalOptions$setIfNotPresent, options, globalOptions),
                config
              );
            case 14:
              var options = command.a;
              return A2(
                $author$project$Gen$Command$Apps$Module$Get$run,
                A2($author$project$GlobalOptions$setIfNotPresent, options, globalOptions),
                config
              );
            case 15:
              var options = command.a;
              return A2(
                $author$project$Gen$Command$Apps$Module$Update$run,
                A2($author$project$GlobalOptions$setIfNotPresent, options, globalOptions),
                config
              );
            case 16:
              var options = command.a;
              return A2(
                $author$project$Gen$Command$Apps$Modules$Sections$Get$run,
                A2($author$project$GlobalOptions$setIfNotPresent, options, globalOptions),
                config
              );
            case 17:
              var options = command.a;
              return A2(
                $author$project$Gen$Command$Apps$Modules$Sections$Set$run,
                A2($author$project$GlobalOptions$setIfNotPresent, options, globalOptions),
                config
              );
            case 18:
              var options = command.a;
              return A2(
                $author$project$Gen$Command$Apps$Rpcs$Get$run,
                A2($author$project$GlobalOptions$setIfNotPresent, options, globalOptions),
                config
              );
            case 19:
              var options = command.a;
              return A2(
                $author$project$Gen$Command$Apps$Rpc$Get$run,
                A2($author$project$GlobalOptions$setIfNotPresent, options, globalOptions),
                config
              );
            case 20:
              var options = command.a;
              return A2(
                $author$project$Gen$Command$Apps$Rpc$Update$run,
                A2($author$project$GlobalOptions$setIfNotPresent, options, globalOptions),
                config
              );
            case 21:
              var options = command.a;
              return A2(
                $author$project$Gen$Command$Apps$Rpcs$Sections$Get$run,
                A2($author$project$GlobalOptions$setIfNotPresent, options, globalOptions),
                config
              );
            case 22:
              var options = command.a;
              return A2(
                $author$project$Gen$Command$Apps$Rpcs$Sections$Set$run,
                A2($author$project$GlobalOptions$setIfNotPresent, options, globalOptions),
                config
              );
            case 23:
              var options = command.a;
              return A2(
                $author$project$Gen$Command$Apps$Webhooks$List$run,
                A2($author$project$GlobalOptions$setIfNotPresent, options, globalOptions),
                config
              );
            case 24:
              var options = command.a;
              return A2(
                $author$project$Gen$Command$Apps$Webhook$List$run,
                A2($author$project$GlobalOptions$setIfNotPresent, options, globalOptions),
                config
              );
            case 25:
              var options = command.a;
              return A2(
                $author$project$Gen$Command$Apps$Webhook$Update$run,
                A2($author$project$GlobalOptions$setIfNotPresent, options, globalOptions),
                config
              );
            case 26:
              var options = command.a;
              return A2(
                $author$project$Gen$Command$Apps$Webhooks$Sections$Get$run,
                A2($author$project$GlobalOptions$setIfNotPresent, options, globalOptions),
                config
              );
            case 27:
              var options = command.a;
              return A2(
                $author$project$Gen$Command$Apps$Webhooks$Sections$Set$run,
                A2($author$project$GlobalOptions$setIfNotPresent, options, globalOptions),
                config
              );
            case 28:
              var options = command.a;
              return A2(
                $author$project$Gen$Command$Apps$Functions$Get$run,
                A2($author$project$GlobalOptions$setIfNotPresent, options, globalOptions),
                config
              );
            case 29:
              var options = command.a;
              return A2(
                $author$project$Gen$Command$Apps$Functions$Code$Get$run,
                A2($author$project$GlobalOptions$setIfNotPresent, options, globalOptions),
                config
              );
            case 30:
              var options = command.a;
              return A2(
                $author$project$Gen$Command$Apps$Functions$Code$Set$run,
                A2($author$project$GlobalOptions$setIfNotPresent, options, globalOptions),
                config
              );
            case 31:
              var options = command.a;
              return A2(
                $author$project$Gen$Command$Apps$Functions$Test$Get$run,
                A2($author$project$GlobalOptions$setIfNotPresent, options, globalOptions),
                config
              );
            case 32:
              var options = command.a;
              return A2(
                $author$project$Gen$Command$Apps$Functions$Test$Set$run,
                A2($author$project$GlobalOptions$setIfNotPresent, options, globalOptions),
                config
              );
            case 33:
              var options = command.a;
              return A2(
                $author$project$Gen$Command$Connection$Get$run,
                A2($author$project$GlobalOptions$setIfNotPresent, options, globalOptions),
                config
              );
            case 34:
              var options = command.a;
              return A2(
                $author$project$Gen$Command$Connections$List$run,
                A2($author$project$GlobalOptions$setIfNotPresent, options, globalOptions),
                config
              );
            case 35:
              var options = command.a;
              return A2(
                $author$project$Gen$Command$DataStores$Get$run,
                A2($author$project$GlobalOptions$setIfNotPresent, options, globalOptions),
                config
              );
            case 36:
              var options = command.a;
              return A2(
                $author$project$Gen$Command$DataStores$Create$run,
                A2($author$project$GlobalOptions$setIfNotPresent, options, globalOptions),
                config
              );
            case 37:
              var options = command.a;
              return A2(
                $author$project$Gen$Command$DataStructures$Create$run,
                A2($author$project$GlobalOptions$setIfNotPresent, options, globalOptions),
                config
              );
            case 38:
              var options = command.a;
              return A2(
                $author$project$Gen$Command$DataStructures$Update$run,
                A2($author$project$GlobalOptions$setIfNotPresent, options, globalOptions),
                config
              );
            case 39:
              var options = command.a;
              return A2(
                $author$project$Gen$Command$Enums$Countries$List$run,
                A2($author$project$GlobalOptions$setIfNotPresent, options, globalOptions),
                config
              );
            case 40:
              var options = command.a;
              return A2(
                $author$project$Gen$Command$Hooks$List$run,
                A2($author$project$GlobalOptions$setIfNotPresent, options, globalOptions),
                config
              );
            case 41:
              var options = command.a;
              return A2(
                $author$project$Gen$Command$Hooks$Get$run,
                A2($author$project$GlobalOptions$setIfNotPresent, options, globalOptions),
                config
              );
            case 42:
              var options = command.a;
              return A2(
                $author$project$Gen$Command$Hooks$Create$run,
                A2($author$project$GlobalOptions$setIfNotPresent, options, globalOptions),
                config
              );
            case 43:
              var options = command.a;
              return A2(
                $author$project$Gen$Command$Organizations$List$run,
                A2($author$project$GlobalOptions$setIfNotPresent, options, globalOptions),
                config
              );
            case 44:
              var options = command.a;
              return A2(
                $author$project$Gen$Command$Organizations$Variables$Get$run,
                A2($author$project$GlobalOptions$setIfNotPresent, options, globalOptions),
                config
              );
            case 45:
              var options = command.a;
              return A2(
                $author$project$Gen$Command$Scenarios$List$run,
                A2($author$project$GlobalOptions$setIfNotPresent, options, globalOptions),
                config
              );
            case 46:
              var options = command.a;
              return A2(
                $author$project$Gen$Command$Scenarios$Get$run,
                A2($author$project$GlobalOptions$setIfNotPresent, options, globalOptions),
                config
              );
            case 47:
              var options = command.a;
              return A2(
                $author$project$Gen$Command$Scenarios$Create$run,
                A2($author$project$GlobalOptions$setIfNotPresent, options, globalOptions),
                config
              );
            case 48:
              var options = command.a;
              return A2(
                $author$project$Gen$Command$Scenarios$Update$run,
                A2($author$project$GlobalOptions$setIfNotPresent, options, globalOptions),
                config
              );
            case 49:
              var options = command.a;
              return A2(
                $author$project$Gen$Command$Scenarios$Clone$Create$run,
                A2($author$project$GlobalOptions$setIfNotPresent, options, globalOptions),
                config
              );
            case 50:
              var options = command.a;
              return A2(
                $author$project$Gen$Command$Scenarios$Blueprints$Get$run,
                A2($author$project$GlobalOptions$setIfNotPresent, options, globalOptions),
                config
              );
            default:
              var options = command.a;
              return A2(
                $author$project$Gen$Command$Teams$Variables$Get$run,
                A2($author$project$GlobalOptions$setIfNotPresent, options, globalOptions),
                config
              );
          }
        }
      );
      var $author$project$Main$run = F2(
        function(flags, command) {
          var globalOptions = function() {
            var _v5 = flags.aP;
            if (_v5.$ === 1) {
              return $elm$core$Result$Ok(
                A3($author$project$GlobalOptions$GlobalOptions, $elm$core$Maybe$Nothing, $elm$core$Maybe$Nothing, $elm$core$Maybe$Nothing)
              );
            } else {
              var configFile2 = _v5.a;
              return A2($MaybeJustJames$yaml$Yaml$Decode$fromString, $author$project$GlobalOptions$decoder, configFile2);
            }
          }();
          var config = function() {
            var _v4 = flags.aP;
            if (_v4.$ === 1) {
              return $elm$core$Result$Ok($elm$core$Dict$empty);
            } else {
              var configFile2 = _v4.a;
              return A2($MaybeJustJames$yaml$Yaml$Decode$fromString, $author$project$Config$decoder, configFile2);
            }
          }();
          var instruction = function() {
            if (globalOptions.$ === 1) {
              return $author$project$Instruction$fail("Global options could not be parsed!");
            } else {
              var opts2 = globalOptions.a;
              if (config.$ === 1) {
                return $author$project$Instruction$fail("Configuration could not be parsed!");
              } else {
                var conf = config.a;
                if (!command.$) {
                  var c = command.a;
                  return A3($author$project$Gen$Command$run, opts2, conf, c);
                } else {
                  var c = command.a;
                  return A3($author$project$Custom$Command$run, opts2, conf, c);
                }
              }
            }
          }();
          var cmd = function() {
            if (globalOptions.$ === 1) {
              var error = globalOptions.a;
              return $author$project$Ports$printAndExitFailure(
                $MaybeJustJames$yaml$Yaml$Decode$errorToString(error)
              );
            } else {
              return A2(
                $elm$core$Task$perform,
                $author$project$Main$Continue,
                $elm$core$Task$succeed(_List_Nil)
              );
            }
          }();
          return _Utils_Tuple2(
            _List_fromArray(
              [instruction]
            ),
            cmd
          );
        }
      );
      var $dillonkearns$elm_cli_options_parser$Cli$Program$ShowSystemMessage = { $: 0 };
      var $dillonkearns$elm_cli_options_parser$Cli$Program$UserModel = F2(
        function(a, b) {
          return { $: 1, a, b };
        }
      );
      var $elm$core$Platform$Cmd$batch = _Platform_batch;
      var $elm$core$Platform$Cmd$none = $elm$core$Platform$Cmd$batch(_List_Nil);
      var $elm$core$Platform$Sub$batch = _Platform_batch;
      var $elm$core$Platform$Sub$none = $elm$core$Platform$Sub$batch(_List_Nil);
      var $dillonkearns$elm_cli_options_parser$Cli$Program$CustomMatch = function(a) {
        return { $: 1, a };
      };
      var $dillonkearns$elm_cli_options_parser$Cli$ExitStatus$Failure = 1;
      var $dillonkearns$elm_cli_options_parser$Cli$ExitStatus$Success = 0;
      var $dillonkearns$elm_cli_options_parser$Cli$Program$SystemMessage = F2(
        function(a, b) {
          return { $: 0, a, b };
        }
      );
      var $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$getSubCommand = function(_v0) {
        var subCommand = _v0.S;
        return subCommand;
      };
      var $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$getUsageSpecs = function(_v0) {
        var usageSpecs = _v0.bb;
        return usageSpecs;
      };
      var $dillonkearns$elm_cli_options_parser$Cli$UsageSpec$mutuallyExclusiveSynopsis = function(_v0) {
        var values = _v0;
        return A2($elm$core$String$join, "|", values);
      };
      var $dillonkearns$elm_cli_options_parser$Occurences$qualifySynopsis = F2(
        function(occurences, rawSynopsis) {
          switch (occurences) {
            case 0:
              return "[" + (rawSynopsis + "]");
            case 1:
              return rawSynopsis;
            default:
              return "[" + (rawSynopsis + "]...");
          }
        }
      );
      var $dillonkearns$elm_cli_options_parser$Cli$UsageSpec$optionSynopsis = F3(
        function(occurences, option, maybeMutuallyExclusiveValues) {
          return A2(
            $dillonkearns$elm_cli_options_parser$Occurences$qualifySynopsis,
            occurences,
            function() {
              if (!option.$) {
                var flagName = option.a;
                return "--" + flagName;
              } else {
                var keywordArgName = option.a;
                if (!maybeMutuallyExclusiveValues.$) {
                  var mutuallyExclusiveValues = maybeMutuallyExclusiveValues.a;
                  return "--" + (keywordArgName + (" <" + ($dillonkearns$elm_cli_options_parser$Cli$UsageSpec$mutuallyExclusiveSynopsis(mutuallyExclusiveValues) + ">")));
                } else {
                  return "--" + (keywordArgName + (" <" + (keywordArgName + ">")));
                }
              }
            }()
          );
        }
      );
      var $dillonkearns$elm_cli_options_parser$Cli$UsageSpec$synopsis = F2(
        function(programName, _v0) {
          var usageSpecs = _v0.bb;
          var description = _v0.bv;
          var subCommand = _v0.S;
          return programName + (" " + (A2(
            $elm$core$String$join,
            " ",
            A2(
              $elm$core$List$filterMap,
              $elm$core$Basics$identity,
              A2(
                $elm$core$List$cons,
                subCommand,
                A2(
                  $elm$core$List$map,
                  function(spec) {
                    return $elm$core$Maybe$Just(
                      function() {
                        switch (spec.$) {
                          case 0:
                            var option = spec.a;
                            var mutuallyExclusiveValues = spec.b;
                            var occurences = spec.c;
                            return A3($dillonkearns$elm_cli_options_parser$Cli$UsageSpec$optionSynopsis, occurences, option, mutuallyExclusiveValues);
                          case 1:
                            var operandName = spec.a;
                            var mutuallyExclusiveValues = spec.b;
                            var occurences = spec.c;
                            var positionalArgSummary = A2(
                              $elm$core$Maybe$withDefault,
                              operandName,
                              A2($elm$core$Maybe$map, $dillonkearns$elm_cli_options_parser$Cli$UsageSpec$mutuallyExclusiveSynopsis, mutuallyExclusiveValues)
                            );
                            switch (occurences) {
                              case 1:
                                return "<" + (positionalArgSummary + ">");
                              case 0:
                                return "[<" + (positionalArgSummary + ">]");
                              default:
                                return "TODO shouldn't reach this case";
                            }
                          default:
                            var restArgsDescription = spec.a;
                            return "<" + (restArgsDescription + ">...");
                        }
                      }()
                    );
                  },
                  usageSpecs
                )
              )
            )
          ) + A2(
            $elm$core$Maybe$withDefault,
            "",
            A2(
              $elm$core$Maybe$map,
              function(doc) {
                return " # " + doc;
              },
              description
            )
          )));
        }
      );
      var $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$synopsis = F2(
        function(programName, optionsParser) {
          return A2(
            $dillonkearns$elm_cli_options_parser$Cli$UsageSpec$synopsis,
            programName,
            function(_v0) {
              var record = _v0;
              return record;
            }(optionsParser)
          );
        }
      );
      var $dillonkearns$elm_cli_options_parser$Cli$LowLevel$helpText = F2(
        function(programName, optionsParsers) {
          return A2(
            $elm$core$String$join,
            "\n",
            A2(
              $elm$core$List$map,
              $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$synopsis(programName),
              optionsParsers
            )
          );
        }
      );
      var $elm_community$list_extra$List$Extra$last = function(items) {
        last:
          while (true) {
            if (!items.b) {
              return $elm$core$Maybe$Nothing;
            } else {
              if (!items.b.b) {
                var x = items.a;
                return $elm$core$Maybe$Just(x);
              } else {
                var rest = items.b;
                var $temp$items = rest;
                items = $temp$items;
                continue last;
              }
            }
          }
      };
      var $dillonkearns$elm_cli_options_parser$TypoSuggestion$SubCommand = function(a) {
        return { $: 1, a };
      };
      var $dillonkearns$elm_cli_options_parser$TypoSuggestion$buildSubCommandSuggestions = function(optionsParsers) {
        return A2(
          $elm$core$List$map,
          $dillonkearns$elm_cli_options_parser$TypoSuggestion$SubCommand,
          A2(
            $elm$core$List$filterMap,
            $elm$core$Basics$identity,
            A2(
              $elm$core$List$map,
              function($) {
                return $.S;
              },
              optionsParsers
            )
          )
        );
      };
      var $dillonkearns$elm_cli_options_parser$Fuzzy$Match = F4(
        function(score, offset, length, keys) {
          return { dt: keys, du: length, b6: offset, R: score };
        }
      );
      var $dillonkearns$elm_cli_options_parser$Fuzzy$Result = F2(
        function(score, matches) {
          return { a_: matches, R: score };
        }
      );
      var $dillonkearns$elm_cli_options_parser$Fuzzy$ConfigModel = F4(
        function(addPenalty, movePenalty, removePenalty, insertPenalty) {
          return { ao: addPenalty, ax: insertPenalty, aC: movePenalty, aH: removePenalty };
        }
      );
      var $dillonkearns$elm_cli_options_parser$Fuzzy$defaultConfig = A4($dillonkearns$elm_cli_options_parser$Fuzzy$ConfigModel, 10, 1e3, 1e4, 1);
      var $elm$core$String$indexes = _String_indexes;
      var $dillonkearns$elm_cli_options_parser$Fuzzy$dissect = F2(
        function(separators, strings) {
          dissect:
            while (true) {
              if (!separators.b) {
                return strings;
              } else {
                var head = separators.a;
                var tail = separators.b;
                var dissectEntry = function(entry) {
                  var separatorLength = $elm$core$String$length(head);
                  var slice = F2(
                    function(index, _v1) {
                      var prevIndex = _v1.a;
                      var sum = _v1.b;
                      var separatorSlice = _List_fromArray(
                        [
                          A3($elm$core$String$slice, index, index + separatorLength, entry)
                        ]
                      );
                      var precedingSlice = _Utils_eq(prevIndex, index) ? _List_Nil : _List_fromArray(
                        [
                          A3($elm$core$String$slice, prevIndex, index, entry)
                        ]
                      );
                      return _Utils_Tuple2(
                        index + separatorLength,
                        _Utils_ap(
                          sum,
                          _Utils_ap(precedingSlice, separatorSlice)
                        )
                      );
                    }
                  );
                  var indexes = A2($elm$core$String$indexes, head, entry);
                  var result = A3(
                    $elm$core$List$foldl,
                    slice,
                    _Utils_Tuple2(0, _List_Nil),
                    indexes
                  );
                  var lastIndex = result.a;
                  var first = result.b;
                  var entryLength = $elm$core$String$length(entry);
                  var last = _Utils_eq(lastIndex, entryLength) ? _List_Nil : _List_fromArray(
                    [
                      A3($elm$core$String$slice, lastIndex, entryLength, entry)
                    ]
                  );
                  return _Utils_ap(first, last);
                };
                var dissected = A3(
                  $elm$core$List$foldl,
                  F2(
                    function(e, s) {
                      return _Utils_ap(
                        s,
                        dissectEntry(e)
                      );
                    }
                  ),
                  _List_Nil,
                  strings
                );
                var $temp$separators = tail, $temp$strings = dissected;
                separators = $temp$separators;
                strings = $temp$strings;
                continue dissect;
              }
            }
        }
      );
      var $elm$core$String$foldl = _String_foldl;
      var $dillonkearns$elm_cli_options_parser$Fuzzy$initialModel = _List_Nil;
      var $elm$core$List$partition = F2(
        function(pred, list) {
          var step = F2(
            function(x, _v0) {
              var trues = _v0.a;
              var falses = _v0.b;
              return pred(x) ? _Utils_Tuple2(
                A2($elm$core$List$cons, x, trues),
                falses
              ) : _Utils_Tuple2(
                trues,
                A2($elm$core$List$cons, x, falses)
              );
            }
          );
          return A3(
            $elm$core$List$foldr,
            step,
            _Utils_Tuple2(_List_Nil, _List_Nil),
            list
          );
        }
      );
      var $dillonkearns$elm_cli_options_parser$Fuzzy$quickSort = function(entries) {
        if (!entries.b) {
          return _Utils_Tuple2(0, _List_Nil);
        } else {
          var head = entries.a;
          var tail = entries.b;
          var partition = A2(
            $elm$core$List$partition,
            function(e) {
              return _Utils_cmp(e, head) < 0;
            },
            tail
          );
          var smaller = $dillonkearns$elm_cli_options_parser$Fuzzy$quickSort(partition.a);
          var penalty = $elm$core$List$isEmpty(smaller.b) ? 0 : 1;
          var larger = $dillonkearns$elm_cli_options_parser$Fuzzy$quickSort(partition.b);
          return _Utils_Tuple2(
            smaller.a + penalty + larger.a,
            _Utils_ap(
              smaller.b,
              _Utils_ap(
                _List_fromArray(
                  [head]
                ),
                larger.b
              )
            )
          );
        }
      };
      var $dillonkearns$elm_cli_options_parser$Fuzzy$distance = F3(
        function(config, needle, hay) {
          var accumulateInsertPenalty = F2(
            function(elem, result) {
              if (!result.a.$) {
                var prev = result.a.a;
                var score = result.b;
                return _Utils_Tuple2(
                  $elm$core$Maybe$Just(elem),
                  elem - 1 - prev + score
                );
              } else {
                var _v2 = result.a;
                var score = result.b;
                return _Utils_Tuple2(
                  $elm$core$Maybe$Just(elem),
                  score
                );
              }
            }
          );
          var accumulate = F2(
            function(c, indexList) {
              var indexes = A2(
                $elm$core$String$indexes,
                $elm$core$String$fromChar(c),
                hay
              );
              var hayIndex = $elm$core$List$head(
                A2(
                  $elm$core$List$filter,
                  function(e) {
                    return !A2($elm$core$List$member, e, indexList);
                  },
                  indexes
                )
              );
              if (!hayIndex.$) {
                var v = hayIndex.a;
                return _Utils_ap(
                  indexList,
                  _List_fromArray(
                    [v]
                  )
                );
              } else {
                return indexList;
              }
            }
          );
          var accumulated = A3($elm$core$String$foldl, accumulate, $dillonkearns$elm_cli_options_parser$Fuzzy$initialModel, needle);
          var hPenalty = ($elm$core$String$length(hay) - $elm$core$List$length(accumulated)) * config.ao;
          var nPenalty = ($elm$core$String$length(needle) - $elm$core$List$length(accumulated)) * config.aH;
          var sorted = $dillonkearns$elm_cli_options_parser$Fuzzy$quickSort(accumulated);
          var iPenalty = A3(
            $elm$core$List$foldl,
            accumulateInsertPenalty,
            _Utils_Tuple2($elm$core$Maybe$Nothing, 0),
            sorted.b
          ).b * config.ax;
          var mPenalty = sorted.a * config.aC;
          return A4(
            $dillonkearns$elm_cli_options_parser$Fuzzy$Match,
            mPenalty + hPenalty + nPenalty + iPenalty,
            0,
            $elm$core$String$length(hay),
            sorted.b
          );
        }
      );
      var $elm$core$List$repeatHelp = F3(
        function(result, n, value) {
          repeatHelp:
            while (true) {
              if (n <= 0) {
                return result;
              } else {
                var $temp$result = A2($elm$core$List$cons, value, result), $temp$n = n - 1, $temp$value = value;
                result = $temp$result;
                n = $temp$n;
                value = $temp$value;
                continue repeatHelp;
              }
            }
        }
      );
      var $elm$core$List$repeat = F2(
        function(n, value) {
          return A3($elm$core$List$repeatHelp, _List_Nil, n, value);
        }
      );
      var $dillonkearns$elm_cli_options_parser$Fuzzy$padHays = F2(
        function(ns, hs) {
          return _Utils_ap(
            hs,
            A2(
              $elm$core$List$repeat,
              ns - $elm$core$List$length(hs),
              ""
            )
          );
        }
      );
      var $elm$core$List$drop = F2(
        function(n, list) {
          drop:
            while (true) {
              if (n <= 0) {
                return list;
              } else {
                if (!list.b) {
                  return list;
                } else {
                  var x = list.a;
                  var xs = list.b;
                  var $temp$n = n - 1, $temp$list = xs;
                  n = $temp$n;
                  list = $temp$list;
                  continue drop;
                }
              }
            }
        }
      );
      var $elm$core$List$takeReverse = F3(
        function(n, list, kept) {
          takeReverse:
            while (true) {
              if (n <= 0) {
                return kept;
              } else {
                if (!list.b) {
                  return kept;
                } else {
                  var x = list.a;
                  var xs = list.b;
                  var $temp$n = n - 1, $temp$list = xs, $temp$kept = A2($elm$core$List$cons, x, kept);
                  n = $temp$n;
                  list = $temp$list;
                  kept = $temp$kept;
                  continue takeReverse;
                }
              }
            }
        }
      );
      var $elm$core$List$takeTailRec = F2(
        function(n, list) {
          return $elm$core$List$reverse(
            A3($elm$core$List$takeReverse, n, list, _List_Nil)
          );
        }
      );
      var $elm$core$List$takeFast = F3(
        function(ctr, n, list) {
          if (n <= 0) {
            return _List_Nil;
          } else {
            var _v0 = _Utils_Tuple2(n, list);
            _v0$1:
              while (true) {
                _v0$5:
                  while (true) {
                    if (!_v0.b.b) {
                      return list;
                    } else {
                      if (_v0.b.b.b) {
                        switch (_v0.a) {
                          case 1:
                            break _v0$1;
                          case 2:
                            var _v2 = _v0.b;
                            var x = _v2.a;
                            var _v3 = _v2.b;
                            var y = _v3.a;
                            return _List_fromArray(
                              [x, y]
                            );
                          case 3:
                            if (_v0.b.b.b.b) {
                              var _v4 = _v0.b;
                              var x = _v4.a;
                              var _v5 = _v4.b;
                              var y = _v5.a;
                              var _v6 = _v5.b;
                              var z = _v6.a;
                              return _List_fromArray(
                                [x, y, z]
                              );
                            } else {
                              break _v0$5;
                            }
                          default:
                            if (_v0.b.b.b.b && _v0.b.b.b.b.b) {
                              var _v7 = _v0.b;
                              var x = _v7.a;
                              var _v8 = _v7.b;
                              var y = _v8.a;
                              var _v9 = _v8.b;
                              var z = _v9.a;
                              var _v10 = _v9.b;
                              var w = _v10.a;
                              var tl = _v10.b;
                              return ctr > 1e3 ? A2(
                                $elm$core$List$cons,
                                x,
                                A2(
                                  $elm$core$List$cons,
                                  y,
                                  A2(
                                    $elm$core$List$cons,
                                    z,
                                    A2(
                                      $elm$core$List$cons,
                                      w,
                                      A2($elm$core$List$takeTailRec, n - 4, tl)
                                    )
                                  )
                                )
                              ) : A2(
                                $elm$core$List$cons,
                                x,
                                A2(
                                  $elm$core$List$cons,
                                  y,
                                  A2(
                                    $elm$core$List$cons,
                                    z,
                                    A2(
                                      $elm$core$List$cons,
                                      w,
                                      A3($elm$core$List$takeFast, ctr + 1, n - 4, tl)
                                    )
                                  )
                                )
                              );
                            } else {
                              break _v0$5;
                            }
                        }
                      } else {
                        if (_v0.a === 1) {
                          break _v0$1;
                        } else {
                          break _v0$5;
                        }
                      }
                    }
                  }
                return list;
              }
            var _v1 = _v0.b;
            var x = _v1.a;
            return _List_fromArray(
              [x]
            );
          }
        }
      );
      var $elm$core$List$take = F2(
        function(n, list) {
          return A3($elm$core$List$takeFast, 0, n, list);
        }
      );
      var $dillonkearns$elm_cli_options_parser$Fuzzy$reduceLeft = F3(
        function(ns, c, hs) {
          return _Utils_Tuple2(
            A3(
              $elm$core$List$foldl,
              F2(
                function(e, sum) {
                  return $elm$core$String$length(e) + sum;
                }
              ),
              0,
              A2($elm$core$List$take, c, hs)
            ),
            A2($elm$core$List$drop, c, hs)
          );
        }
      );
      var $dillonkearns$elm_cli_options_parser$Fuzzy$reduceRight = F3(
        function(ns, c, hs) {
          return A2(
            $elm$core$List$take,
            $elm$core$List$length(hs) - (ns - c - 1),
            hs
          );
        }
      );
      var $dillonkearns$elm_cli_options_parser$Fuzzy$match = F4(
        function(configs, separators, needle, hay) {
          var reduceHays = F3(
            function(ns, c, hs) {
              return A3(
                $dillonkearns$elm_cli_options_parser$Fuzzy$reduceLeft,
                ns,
                c,
                A3(
                  $dillonkearns$elm_cli_options_parser$Fuzzy$reduceRight,
                  ns,
                  c,
                  A2($dillonkearns$elm_cli_options_parser$Fuzzy$padHays, ns, hs)
                )
              );
            }
          );
          var needles = A2(
            $dillonkearns$elm_cli_options_parser$Fuzzy$dissect,
            separators,
            _List_fromArray(
              [needle]
            )
          );
          var initialResult = A2($dillonkearns$elm_cli_options_parser$Fuzzy$Result, 0, _List_Nil);
          var hays = A2(
            $dillonkearns$elm_cli_options_parser$Fuzzy$dissect,
            separators,
            _List_fromArray(
              [hay]
            )
          );
          var accumulateConfig = F2(
            function(c, sum) {
              switch (c.$) {
                case 0:
                  var val = c.a;
                  return _Utils_update(
                    sum,
                    { ao: val }
                  );
                case 1:
                  var val = c.a;
                  return _Utils_update(
                    sum,
                    { aH: val }
                  );
                case 2:
                  var val = c.a;
                  return _Utils_update(
                    sum,
                    { aC: val }
                  );
                default:
                  var val = c.a;
                  return _Utils_update(
                    sum,
                    { ax: val }
                  );
              }
            }
          );
          var config = A3($elm$core$List$foldl, accumulateConfig, $dillonkearns$elm_cli_options_parser$Fuzzy$defaultConfig, configs);
          var minScore = F2(
            function(n, _v2) {
              var offset = _v2.a;
              var hs = _v2.b;
              var initialPenalty = $elm$core$String$length(n) * config.aH + $elm$core$String$length(n) * config.aC + $elm$core$String$length(hay) * config.ao + $elm$core$String$length(hay) * $elm$core$String$length(n) * config.ax;
              var initialMatch = A4($dillonkearns$elm_cli_options_parser$Fuzzy$Match, initialPenalty, offset, 0, _List_Nil);
              var accumulateMatch = F2(
                function(e, _v1) {
                  var prev = _v1.a;
                  var prevOffset = _v1.b;
                  var newOffset = prevOffset + $elm$core$String$length(e);
                  var eDistance = A3($dillonkearns$elm_cli_options_parser$Fuzzy$distance, config, n, e);
                  var newMatch = _Utils_cmp(eDistance.R, prev.R) < 0 ? _Utils_update(
                    eDistance,
                    { b6: prevOffset }
                  ) : prev;
                  return _Utils_Tuple2(newMatch, newOffset);
                }
              );
              return A3(
                $elm$core$List$foldl,
                accumulateMatch,
                _Utils_Tuple2(initialMatch, offset),
                hs
              ).a;
            }
          );
          var accumulateResult = F2(
            function(n, _v0) {
              var prev = _v0.a;
              var num = _v0.b;
              var matchResult = A2(
                minScore,
                n,
                A3(
                  reduceHays,
                  $elm$core$List$length(needles),
                  num,
                  hays
                )
              );
              var newResult = _Utils_update(
                prev,
                {
                  a_: _Utils_ap(
                    prev.a_,
                    _List_fromArray(
                      [matchResult]
                    )
                  ),
                  R: matchResult.R + prev.R
                }
              );
              return _Utils_Tuple2(newResult, num + 1);
            }
          );
          return A3(
            $elm$core$List$foldl,
            accumulateResult,
            _Utils_Tuple2(initialResult, 0),
            needles
          ).a;
        }
      );
      var $dillonkearns$elm_cli_options_parser$TypoSuggestion$name = function(typoSuggestion) {
        if (!typoSuggestion.$) {
          var suggestionName = typoSuggestion.a;
          return suggestionName;
        } else {
          var suggestionName = typoSuggestion.a;
          return suggestionName;
        }
      };
      var $dillonkearns$elm_cli_options_parser$TypoSuggestion$Flag = function(a) {
        return { $: 0, a };
      };
      var $elm_community$list_extra$List$Extra$uniqueHelp = F4(
        function(f, existing, remaining, accumulator) {
          uniqueHelp:
            while (true) {
              if (!remaining.b) {
                return $elm$core$List$reverse(accumulator);
              } else {
                var first = remaining.a;
                var rest = remaining.b;
                var computedFirst = f(first);
                if (A2($elm$core$List$member, computedFirst, existing)) {
                  var $temp$f = f, $temp$existing = existing, $temp$remaining = rest, $temp$accumulator = accumulator;
                  f = $temp$f;
                  existing = $temp$existing;
                  remaining = $temp$remaining;
                  accumulator = $temp$accumulator;
                  continue uniqueHelp;
                } else {
                  var $temp$f = f, $temp$existing = A2($elm$core$List$cons, computedFirst, existing), $temp$remaining = rest, $temp$accumulator = A2($elm$core$List$cons, first, accumulator);
                  f = $temp$f;
                  existing = $temp$existing;
                  remaining = $temp$remaining;
                  accumulator = $temp$accumulator;
                  continue uniqueHelp;
                }
              }
            }
        }
      );
      var $elm_community$list_extra$List$Extra$uniqueBy = F2(
        function(f, list) {
          return A4($elm_community$list_extra$List$Extra$uniqueHelp, f, _List_Nil, list, _List_Nil);
        }
      );
      var $dillonkearns$elm_cli_options_parser$TypoSuggestion$optionSuggestions = function(optionsParsers) {
        return A2(
          $elm$core$List$map,
          $dillonkearns$elm_cli_options_parser$TypoSuggestion$Flag,
          A2(
            $elm$core$List$map,
            $dillonkearns$elm_cli_options_parser$Cli$UsageSpec$name,
            A2(
              $elm_community$list_extra$List$Extra$uniqueBy,
              $dillonkearns$elm_cli_options_parser$Cli$UsageSpec$name,
              $elm$core$List$concat(
                A2(
                  $elm$core$List$map,
                  function($) {
                    return $.bb;
                  },
                  optionsParsers
                )
              )
            )
          )
        );
      };
      var $dillonkearns$elm_cli_options_parser$TypoSuggestion$getSuggestions = F2(
        function(optionsParsers, unexpectedOption) {
          var something = F2(
            function(needle, hay) {
              return A4($dillonkearns$elm_cli_options_parser$Fuzzy$match, _List_Nil, _List_Nil, needle, hay).R;
            }
          );
          return A2(
            $elm$core$List$sortBy,
            A2(
              $elm$core$Basics$composeR,
              $dillonkearns$elm_cli_options_parser$TypoSuggestion$name,
              something(unexpectedOption)
            ),
            _Utils_ap(
              $dillonkearns$elm_cli_options_parser$TypoSuggestion$buildSubCommandSuggestions(optionsParsers),
              $dillonkearns$elm_cli_options_parser$TypoSuggestion$optionSuggestions(optionsParsers)
            )
          );
        }
      );
      var $dillonkearns$elm_cli_options_parser$TypoSuggestion$suggestionToString = function(typoSuggestion) {
        return "`" + (function() {
          if (!typoSuggestion.$) {
            var flagName = typoSuggestion.a;
            return "--" + flagName;
          } else {
            var buildSubCommandName = typoSuggestion.a;
            return buildSubCommandName;
          }
        }() + "`");
      };
      var $dillonkearns$elm_cli_options_parser$TypoSuggestion$toMessage = F2(
        function(optionsParsers, unexpectedOption) {
          var _v0 = $elm$core$List$head(
            A2($dillonkearns$elm_cli_options_parser$TypoSuggestion$getSuggestions, optionsParsers, unexpectedOption)
          );
          if (!_v0.$) {
            var bestSuggestion = _v0.a;
            return "The `--" + (unexpectedOption + ("` flag was not found. Maybe it was one of these typos?\n\n`--" + (unexpectedOption + ("` <> " + $dillonkearns$elm_cli_options_parser$TypoSuggestion$suggestionToString(bestSuggestion)))));
          } else {
            return "TODO";
          }
        }
      );
      var $dillonkearns$elm_cli_options_parser$Cli$LowLevel$Match = function(a) {
        return { $: 2, a };
      };
      var $dillonkearns$elm_cli_options_parser$Cli$LowLevel$NoMatch = function(a) {
        return { $: 1, a };
      };
      var $dillonkearns$elm_cli_options_parser$Cli$LowLevel$SystemParser = function(a) {
        return { $: 0, a };
      };
      var $dillonkearns$elm_cli_options_parser$Cli$LowLevel$UserParser = function(a) {
        return { $: 1, a };
      };
      var $dillonkearns$elm_cli_options_parser$Cli$LowLevel$ValidationErrors = function(a) {
        return { $: 0, a };
      };
      var $elm$core$Set$fromList = function(list) {
        return A3($elm$core$List$foldl, $elm$core$Set$insert, $elm$core$Set$empty, list);
      };
      var $dillonkearns$elm_cli_options_parser$Cli$LowLevel$ShowHelp = { $: 3 };
      var $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$build = function(cliOptionsConstructor) {
        return {
          N: function(_v0) {
            return $elm$core$Result$Ok(
              _Utils_Tuple2(_List_Nil, cliOptionsConstructor)
            );
          },
          bv: $elm$core$Maybe$Nothing,
          S: $elm$core$Maybe$Nothing,
          bb: _List_Nil
        };
      };
      var $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$expectFlag = F2(
        function(flagName, _v0) {
          var optionsParser = _v0;
          var usageSpecs = optionsParser.bb;
          var decoder = optionsParser.N;
          return _Utils_update(
            optionsParser,
            {
              N: function(stuff) {
                var options = stuff.aE;
                return A2(
                  $elm$core$List$member,
                  A2($dillonkearns$elm_cli_options_parser$Tokenizer$ParsedOption, flagName, $dillonkearns$elm_cli_options_parser$Tokenizer$Flag),
                  options
                ) ? decoder(stuff) : $elm$core$Result$Err(
                  $dillonkearns$elm_cli_options_parser$Cli$Decode$MatchError("Expect flag " + ("--" + flagName))
                );
              },
              bb: _Utils_ap(
                usageSpecs,
                _List_fromArray(
                  [
                    A2($dillonkearns$elm_cli_options_parser$Cli$UsageSpec$flag, flagName, 1)
                  ]
                )
              )
            }
          );
        }
      );
      var $dillonkearns$elm_cli_options_parser$Cli$LowLevel$helpParser = A2(
        $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$expectFlag,
        "help",
        $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$build($dillonkearns$elm_cli_options_parser$Cli$LowLevel$ShowHelp)
      );
      var $elm$core$Dict$intersect = F2(
        function(t1, t2) {
          return A2(
            $elm$core$Dict$filter,
            F2(
              function(k, _v0) {
                return A2($elm$core$Dict$member, k, t2);
              }
            ),
            t1
          );
        }
      );
      var $elm$core$Set$intersect = F2(
        function(_v0, _v1) {
          var dict1 = _v0;
          var dict2 = _v1;
          return A2($elm$core$Dict$intersect, dict1, dict2);
        }
      );
      var $dillonkearns$elm_cli_options_parser$Cli$LowLevel$intersection = function(sets) {
        if (!sets.b) {
          return $elm$core$Set$empty;
        } else {
          if (!sets.b.b) {
            var set = sets.a;
            return set;
          } else {
            var first = sets.a;
            var rest = sets.b;
            return A2(
              $elm$core$Set$intersect,
              first,
              $dillonkearns$elm_cli_options_parser$Cli$LowLevel$intersection(rest)
            );
          }
        }
      };
      var $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$MatchResult$matchResultToMaybe = function(matchResult) {
        if (!matchResult.$) {
          var thing = matchResult.a;
          return $elm$core$Maybe$Just(thing);
        } else {
          var unknownFlags = matchResult.a;
          return $elm$core$Maybe$Nothing;
        }
      };
      var $dillonkearns$elm_cli_options_parser$Cli$LowLevel$oneOf = A2(
        $elm$core$List$foldl,
        F2(
          function(x, acc) {
            return !_Utils_eq(acc, $elm$core$Maybe$Nothing) ? acc : x;
          }
        ),
        $elm$core$Maybe$Nothing
      );
      var $dillonkearns$elm_cli_options_parser$Cli$LowLevel$ShowVersion = { $: 4 };
      var $dillonkearns$elm_cli_options_parser$Cli$LowLevel$showVersionParser = A2(
        $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$expectFlag,
        "version",
        $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$build($dillonkearns$elm_cli_options_parser$Cli$LowLevel$ShowVersion)
      );
      var $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$MatchResult$Match = function(a) {
        return { $: 0, a };
      };
      var $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$MatchResult$NoMatch = function(a) {
        return { $: 1, a };
      };
      var $dillonkearns$elm_cli_options_parser$Cli$UsageSpec$hasRestArgs = function(usageSpecs) {
        return A2(
          $elm$core$List$any,
          function(usageSpec) {
            if (usageSpec.$ === 2) {
              return true;
            } else {
              return false;
            }
          },
          usageSpecs
        );
      };
      var $dillonkearns$elm_cli_options_parser$Cli$UsageSpec$isOperand = function(option) {
        switch (option.$) {
          case 1:
            var operandName = option.a;
            var mutuallyExclusiveValues = option.b;
            var occurences = option.c;
            return true;
          case 0:
            return false;
          default:
            return false;
        }
      };
      var $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$expectedPositionalArgCountOrFail = function(_v0) {
        var optionsParser = _v0;
        var decoder = optionsParser.N;
        var usageSpecs = optionsParser.bb;
        return _Utils_update(
          optionsParser,
          {
            N: function(stuff) {
              var operands = stuff.af;
              return !$dillonkearns$elm_cli_options_parser$Cli$UsageSpec$hasRestArgs(usageSpecs) && _Utils_cmp(
                $elm$core$List$length(operands),
                $elm$core$List$length(
                  A2($elm$core$List$filter, $dillonkearns$elm_cli_options_parser$Cli$UsageSpec$isOperand, usageSpecs)
                )
              ) > 0 ? $elm$core$Result$Err(
                $dillonkearns$elm_cli_options_parser$Cli$Decode$MatchError("Wrong number of operands")
              ) : decoder(stuff);
            }
          }
        );
      };
      var $dillonkearns$elm_cli_options_parser$Cli$Decode$UnexpectedOptions = function(a) {
        return { $: 1, a };
      };
      var $dillonkearns$elm_cli_options_parser$Cli$UsageSpec$optionName = function(option) {
        if (!option.$) {
          var flagName = option.a;
          return flagName;
        } else {
          var keywordArgName = option.a;
          return keywordArgName;
        }
      };
      var $dillonkearns$elm_cli_options_parser$Cli$UsageSpec$optionExists = F2(
        function(usageSpecs, thisOptionName) {
          return A2(
            $elm_community$list_extra$List$Extra$find,
            function(option) {
              return _Utils_eq(
                $dillonkearns$elm_cli_options_parser$Cli$UsageSpec$optionName(option),
                thisOptionName
              );
            },
            A2(
              $elm$core$List$filterMap,
              function(usageSpec) {
                switch (usageSpec.$) {
                  case 0:
                    var option = usageSpec.a;
                    var mutuallyExclusiveValues = usageSpec.b;
                    var occurences = usageSpec.c;
                    return $elm$core$Maybe$Just(option);
                  case 1:
                    return $elm$core$Maybe$Nothing;
                  default:
                    return $elm$core$Maybe$Nothing;
                }
              },
              usageSpecs
            )
          );
        }
      );
      var $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$unexpectedOptions_ = F2(
        function(_v0, options) {
          var usageSpecs = _v0.bb;
          return A2(
            $elm$core$List$filterMap,
            function(_v1) {
              var optionName = _v1.a;
              var optionKind = _v1.b;
              return _Utils_eq(
                A2($dillonkearns$elm_cli_options_parser$Cli$UsageSpec$optionExists, usageSpecs, optionName),
                $elm$core$Maybe$Nothing
              ) ? $elm$core$Maybe$Just(optionName) : $elm$core$Maybe$Nothing;
            },
            options
          );
        }
      );
      var $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$failIfUnexpectedOptions = function(fullOptionsParser) {
        var optionsParser = fullOptionsParser;
        var decoder = optionsParser.N;
        var usageSpecs = optionsParser.bb;
        return _Utils_update(
          optionsParser,
          {
            N: function(flagsAndOperands) {
              var unexpectedOptions = A2($dillonkearns$elm_cli_options_parser$Cli$OptionsParser$unexpectedOptions_, fullOptionsParser, flagsAndOperands.aE);
              return $elm$core$List$isEmpty(unexpectedOptions) ? decoder(flagsAndOperands) : $elm$core$Result$Err(
                $dillonkearns$elm_cli_options_parser$Cli$Decode$UnexpectedOptions(unexpectedOptions)
              );
            }
          }
        );
      };
      var $dillonkearns$elm_cli_options_parser$Tokenizer$KeywordArg = function(a) {
        return { $: 1, a };
      };
      var $dillonkearns$elm_cli_options_parser$Cli$UsageSpec$optionHasArg = F2(
        function(options, optionNameToCheck) {
          var _v0 = A2(
            $elm_community$list_extra$List$Extra$find,
            function(spec) {
              return _Utils_eq(
                $dillonkearns$elm_cli_options_parser$Cli$UsageSpec$optionName(spec),
                optionNameToCheck
              );
            },
            A2(
              $elm$core$List$filterMap,
              function(spec) {
                switch (spec.$) {
                  case 0:
                    var option2 = spec.a;
                    var mutuallyExclusiveValues = spec.b;
                    var occurences = spec.c;
                    return $elm$core$Maybe$Just(option2);
                  case 1:
                    return $elm$core$Maybe$Nothing;
                  default:
                    return $elm$core$Maybe$Nothing;
                }
              },
              options
            )
          );
          if (!_v0.$) {
            var option = _v0.a;
            if (!option.$) {
              var flagName = option.a;
              return false;
            } else {
              var optionName_ = option.a;
              return true;
            }
          } else {
            return false;
          }
        }
      );
      var $dillonkearns$elm_cli_options_parser$Tokenizer$EqualsSplitter$KeywordArg = function(a) {
        return { $: 1, a };
      };
      var $dillonkearns$elm_cli_options_parser$Tokenizer$EqualsSplitter$NotOption = { $: 2 };
      var $dillonkearns$elm_cli_options_parser$Tokenizer$EqualsSplitter$Option = function(a) {
        return { $: 0, a };
      };
      var $elm$core$String$fromList = _String_fromList;
      var $dillonkearns$elm_cli_options_parser$Tokenizer$EqualsSplitter$split = function(string) {
        var _v0 = $elm$core$String$toList(string);
        if (_v0.b && "-" === _v0.a && _v0.b.b && "-" === _v0.b.a) {
          var _v1 = _v0.b;
          var optionName = _v1.b;
          var _v2 = A2(
            $elm$core$String$split,
            "=",
            $elm$core$String$fromList(optionName)
          );
          if (_v2.b) {
            if (!_v2.b.b) {
              var singleOptionName = _v2.a;
              return $dillonkearns$elm_cli_options_parser$Tokenizer$EqualsSplitter$Option(singleOptionName);
            } else {
              var firstOptionName = _v2.a;
              var splitAfterOptionName = _v2.b;
              return $dillonkearns$elm_cli_options_parser$Tokenizer$EqualsSplitter$KeywordArg(
                {
                  b3: firstOptionName,
                  d3: $elm$core$String$concat(splitAfterOptionName)
                }
              );
            }
          } else {
            return $dillonkearns$elm_cli_options_parser$Tokenizer$EqualsSplitter$Option(
              $elm$core$String$fromList(optionName)
            );
          }
        } else {
          return $dillonkearns$elm_cli_options_parser$Tokenizer$EqualsSplitter$NotOption;
        }
      };
      var $dillonkearns$elm_cli_options_parser$Tokenizer$flagsAndOperands_ = F3(
        function(usageSpecs, argv, soFar) {
          flagsAndOperands_:
            while (true) {
              if (!argv.b) {
                return soFar;
              } else {
                var firstArg = argv.a;
                var restArgs = argv.b;
                var _v1 = $dillonkearns$elm_cli_options_parser$Tokenizer$EqualsSplitter$split(firstArg);
                switch (_v1.$) {
                  case 0:
                    var optionName = _v1.a;
                    if (A2($dillonkearns$elm_cli_options_parser$Cli$UsageSpec$optionHasArg, usageSpecs, optionName)) {
                      if (restArgs.b) {
                        var secondArg = restArgs.a;
                        var afterSecondArg = restArgs.b;
                        var $temp$usageSpecs = usageSpecs, $temp$argv = afterSecondArg, $temp$soFar = {
                          af: soFar.af,
                          aE: _Utils_ap(
                            soFar.aE,
                            _List_fromArray(
                              [
                                A2(
                                  $dillonkearns$elm_cli_options_parser$Tokenizer$ParsedOption,
                                  optionName,
                                  $dillonkearns$elm_cli_options_parser$Tokenizer$KeywordArg(secondArg)
                                )
                              ]
                            )
                          )
                        };
                        usageSpecs = $temp$usageSpecs;
                        argv = $temp$argv;
                        soFar = $temp$soFar;
                        continue flagsAndOperands_;
                      } else {
                        var $temp$usageSpecs = usageSpecs, $temp$argv = restArgs, $temp$soFar = {
                          af: soFar.af,
                          aE: _Utils_ap(
                            soFar.aE,
                            _List_fromArray(
                              [
                                A2($dillonkearns$elm_cli_options_parser$Tokenizer$ParsedOption, optionName, $dillonkearns$elm_cli_options_parser$Tokenizer$Flag)
                              ]
                            )
                          )
                        };
                        usageSpecs = $temp$usageSpecs;
                        argv = $temp$argv;
                        soFar = $temp$soFar;
                        continue flagsAndOperands_;
                      }
                    } else {
                      var $temp$usageSpecs = usageSpecs, $temp$argv = restArgs, $temp$soFar = {
                        af: soFar.af,
                        aE: _Utils_ap(
                          soFar.aE,
                          _List_fromArray(
                            [
                              A2($dillonkearns$elm_cli_options_parser$Tokenizer$ParsedOption, optionName, $dillonkearns$elm_cli_options_parser$Tokenizer$Flag)
                            ]
                          )
                        )
                      };
                      usageSpecs = $temp$usageSpecs;
                      argv = $temp$argv;
                      soFar = $temp$soFar;
                      continue flagsAndOperands_;
                    }
                  case 1:
                    var name = _v1.a.b3;
                    var value = _v1.a.d3;
                    var $temp$usageSpecs = usageSpecs, $temp$argv = restArgs, $temp$soFar = {
                      af: soFar.af,
                      aE: _Utils_ap(
                        soFar.aE,
                        _List_fromArray(
                          [
                            A2(
                              $dillonkearns$elm_cli_options_parser$Tokenizer$ParsedOption,
                              name,
                              $dillonkearns$elm_cli_options_parser$Tokenizer$KeywordArg(value)
                            )
                          ]
                        )
                      )
                    };
                    usageSpecs = $temp$usageSpecs;
                    argv = $temp$argv;
                    soFar = $temp$soFar;
                    continue flagsAndOperands_;
                  default:
                    var $temp$usageSpecs = usageSpecs, $temp$argv = restArgs, $temp$soFar = {
                      af: _Utils_ap(
                        soFar.af,
                        _List_fromArray(
                          [firstArg]
                        )
                      ),
                      aE: soFar.aE
                    };
                    usageSpecs = $temp$usageSpecs;
                    argv = $temp$argv;
                    soFar = $temp$soFar;
                    continue flagsAndOperands_;
                }
              }
            }
        }
      );
      var $dillonkearns$elm_cli_options_parser$Tokenizer$flagsAndOperands = F2(
        function(usageSpecs, argv) {
          return A3(
            $dillonkearns$elm_cli_options_parser$Tokenizer$flagsAndOperands_,
            usageSpecs,
            argv,
            { af: _List_Nil, aE: _List_Nil }
          );
        }
      );
      var $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$getDecoder = function(_v0) {
        var decoder = _v0.N;
        return decoder;
      };
      var $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$tryMatch = F2(
        function(argv, optionsParser) {
          var usageSpecs = optionsParser.bb;
          var subCommand = optionsParser.S;
          var flagsAndOperands = function(record) {
            var _v5 = _Utils_Tuple2(subCommand, record.af);
            if (_v5.a.$ === 1) {
              var _v6 = _v5.a;
              return $elm$core$Result$Ok(
                { af: record.af, aE: record.aE, bb: usageSpecs }
              );
            } else {
              if (_v5.b.b) {
                var buildSubCommandName = _v5.a.a;
                var _v7 = _v5.b;
                var actualSubCommand = _v7.a;
                var remainingOperands = _v7.b;
                return _Utils_eq(actualSubCommand, buildSubCommandName) ? $elm$core$Result$Ok(
                  { af: remainingOperands, aE: record.aE, bb: usageSpecs }
                ) : $elm$core$Result$Err(
                  { aU: "Sub optionsParser does not match", aE: record.aE }
                );
              } else {
                var buildSubCommandName = _v5.a.a;
                return $elm$core$Result$Err(
                  { aU: "No sub optionsParser provided", aE: record.aE }
                );
              }
            }
          }(
            A2($dillonkearns$elm_cli_options_parser$Tokenizer$flagsAndOperands, usageSpecs, argv)
          );
          var decoder = $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$getDecoder(
            $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$failIfUnexpectedOptions(
              $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$expectedPositionalArgCountOrFail(optionsParser)
            )
          );
          if (!flagsAndOperands.$) {
            var actualFlagsAndOperands = flagsAndOperands.a;
            return function(result) {
              if (result.$ === 1) {
                var error = result.a;
                switch (error.$) {
                  case 0:
                    var matchError = error.a;
                    return $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$MatchResult$NoMatch(_List_Nil);
                  case 2:
                    var validationError = error.a;
                    return $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$MatchResult$Match(
                      $elm$core$Result$Err(
                        _List_fromArray(
                          [validationError]
                        )
                      )
                    );
                  default:
                    var unexpectedOptions = error.a;
                    return $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$MatchResult$NoMatch(unexpectedOptions);
                }
              } else {
                if (!result.a.a.b) {
                  var _v3 = result.a;
                  var value = _v3.b;
                  return $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$MatchResult$Match(
                    $elm$core$Result$Ok(value)
                  );
                } else {
                  var _v4 = result.a;
                  var validationErrors = _v4.a;
                  var value = _v4.b;
                  return $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$MatchResult$Match(
                    $elm$core$Result$Err(validationErrors)
                  );
                }
              }
            }(
              decoder(actualFlagsAndOperands)
            );
          } else {
            var errorMessage = flagsAndOperands.a.aU;
            var options = flagsAndOperands.a.aE;
            return $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$MatchResult$NoMatch(
              A2($dillonkearns$elm_cli_options_parser$Cli$OptionsParser$unexpectedOptions_, optionsParser, options)
            );
          }
        }
      );
      var $dillonkearns$elm_cli_options_parser$Cli$LowLevel$try = F2(
        function(optionsParsers, argv) {
          var matchResults = A2(
            $elm$core$List$map,
            $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$tryMatch(
              A2($elm$core$List$drop, 2, argv)
            ),
            _Utils_ap(
              A2(
                $elm$core$List$map,
                $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$end,
                A2(
                  $elm$core$List$map,
                  $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$map($dillonkearns$elm_cli_options_parser$Cli$LowLevel$UserParser),
                  optionsParsers
                )
              ),
              _List_fromArray(
                [
                  A2(
                    $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$map,
                    $dillonkearns$elm_cli_options_parser$Cli$LowLevel$SystemParser,
                    $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$end($dillonkearns$elm_cli_options_parser$Cli$LowLevel$helpParser)
                  ),
                  A2(
                    $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$map,
                    $dillonkearns$elm_cli_options_parser$Cli$LowLevel$SystemParser,
                    $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$end($dillonkearns$elm_cli_options_parser$Cli$LowLevel$showVersionParser)
                  )
                ]
              )
            )
          );
          var commonUnmatchedFlags = $elm$core$Set$toList(
            $dillonkearns$elm_cli_options_parser$Cli$LowLevel$intersection(
              A2(
                $elm$core$List$map,
                function(matchResult) {
                  if (matchResult.$ === 1) {
                    var unknownFlags = matchResult.a;
                    return $elm$core$Set$fromList(unknownFlags);
                  } else {
                    return $elm$core$Set$empty;
                  }
                },
                matchResults
              )
            )
          );
          return function(maybeResult) {
            if (!maybeResult.$) {
              var result = maybeResult.a;
              if (!result.$) {
                var msg = result.a;
                if (!msg.$) {
                  var systemMsg = msg.a;
                  return systemMsg;
                } else {
                  var userMsg = msg.a;
                  return $dillonkearns$elm_cli_options_parser$Cli$LowLevel$Match(userMsg);
                }
              } else {
                var validationErrors = result.a;
                return $dillonkearns$elm_cli_options_parser$Cli$LowLevel$ValidationErrors(validationErrors);
              }
            } else {
              return $dillonkearns$elm_cli_options_parser$Cli$LowLevel$NoMatch(commonUnmatchedFlags);
            }
          }(
            $dillonkearns$elm_cli_options_parser$Cli$LowLevel$oneOf(
              A2($elm$core$List$map, $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$MatchResult$matchResultToMaybe, matchResults)
            )
          );
        }
      );
      var $dillonkearns$elm_cli_options_parser$Cli$Program$run = F3(
        function(_v0, argv, versionMessage) {
          var optionsParsers = _v0.Z;
          var matchResult = A2($dillonkearns$elm_cli_options_parser$Cli$LowLevel$try, optionsParsers, argv);
          var errorMessage = "TODO - show error message explaining that user needs to pass unmodified `process.argv` from node here.";
          var programName = function() {
            if (argv.b && argv.b.b) {
              var first = argv.a;
              var _v4 = argv.b;
              var programPath = _v4.a;
              return A2(
                $elm$core$Maybe$withDefault,
                errorMessage,
                $elm_community$list_extra$List$Extra$last(
                  A2($elm$core$String$split, "/", programPath)
                )
              );
            } else {
              return errorMessage;
            }
          }();
          switch (matchResult.$) {
            case 1:
              var unexpectedOptions = matchResult.a;
              return _Utils_eq(unexpectedOptions, _List_Nil) ? A2(
                $dillonkearns$elm_cli_options_parser$Cli$Program$SystemMessage,
                1,
                "\nNo matching optionsParser...\n\nUsage:\n\n" + A2($dillonkearns$elm_cli_options_parser$Cli$LowLevel$helpText, programName, optionsParsers)
              ) : A2(
                $dillonkearns$elm_cli_options_parser$Cli$Program$SystemMessage,
                1,
                A2(
                  $elm$core$String$join,
                  "\n",
                  A2(
                    $elm$core$List$map,
                    $dillonkearns$elm_cli_options_parser$TypoSuggestion$toMessage(
                      A2(
                        $elm$core$List$map,
                        function(optionsParser) {
                          return {
                            S: $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$getSubCommand(optionsParser),
                            bb: $dillonkearns$elm_cli_options_parser$Cli$OptionsParser$getUsageSpecs(optionsParser)
                          };
                        },
                        optionsParsers
                      )
                    ),
                    unexpectedOptions
                  )
                )
              );
            case 0:
              var validationErrors = matchResult.a;
              return A2(
                $dillonkearns$elm_cli_options_parser$Cli$Program$SystemMessage,
                1,
                "Validation errors:\n\n" + A2(
                  $elm$core$String$join,
                  "\n",
                  A2(
                    $elm$core$List$map,
                    function(_v2) {
                      var name = _v2.b3;
                      var invalidReason = _v2.ds;
                      return "Invalid " + ("`--" + (name + ("` option." + ("\n" + invalidReason))));
                    },
                    validationErrors
                  )
                )
              );
            case 2:
              var msg = matchResult.a;
              return $dillonkearns$elm_cli_options_parser$Cli$Program$CustomMatch(msg);
            case 3:
              return A2(
                $dillonkearns$elm_cli_options_parser$Cli$Program$SystemMessage,
                0,
                A2($dillonkearns$elm_cli_options_parser$Cli$LowLevel$helpText, programName, optionsParsers)
              );
            default:
              return A2($dillonkearns$elm_cli_options_parser$Cli$Program$SystemMessage, 0, versionMessage);
          }
        }
      );
      var $dillonkearns$elm_cli_options_parser$Cli$Program$statefulInit = F2(
        function(options, flags) {
          var matchResult = A3($dillonkearns$elm_cli_options_parser$Cli$Program$run, options.c9, flags.c4, flags.d4);
          var cmd = function() {
            if (!matchResult.$) {
              var exitStatus = matchResult.a;
              var message = matchResult.b;
              if (exitStatus === 1) {
                return _Utils_Tuple2(
                  $dillonkearns$elm_cli_options_parser$Cli$Program$ShowSystemMessage,
                  options.dE(message)
                );
              } else {
                return _Utils_Tuple2(
                  $dillonkearns$elm_cli_options_parser$Cli$Program$ShowSystemMessage,
                  options.dF(message)
                );
              }
            } else {
              var cliOptions = matchResult.a;
              var _v2 = A2(options.dq, flags, cliOptions);
              var userModel = _v2.a;
              var userCmd = _v2.b;
              return _Utils_Tuple2(
                A2($dillonkearns$elm_cli_options_parser$Cli$Program$UserModel, userModel, cliOptions),
                userCmd
              );
            }
          }();
          return cmd;
        }
      );
      var $elm$core$Platform$worker = _Platform_worker;
      var $dillonkearns$elm_cli_options_parser$Cli$Program$stateful = function(options) {
        return $elm$core$Platform$worker(
          {
            dq: $dillonkearns$elm_cli_options_parser$Cli$Program$statefulInit(options),
            dX: function(model) {
              if (model.$ === 1) {
                var actualModel = model.a;
                var cliOptions = model.b;
                return options.dX(actualModel);
              } else {
                return $elm$core$Platform$Sub$none;
              }
            },
            d2: F2(
              function(msg, model) {
                if (model.$ === 1) {
                  var actualModel = model.a;
                  var cliOptions = model.b;
                  var _v2 = A3(options.d2, cliOptions, msg, actualModel);
                  var userModel = _v2.a;
                  var userCmd = _v2.b;
                  return _Utils_Tuple2(
                    A2($dillonkearns$elm_cli_options_parser$Cli$Program$UserModel, userModel, cliOptions),
                    userCmd
                  );
                } else {
                  return _Utils_Tuple2($dillonkearns$elm_cli_options_parser$Cli$Program$ShowSystemMessage, $elm$core$Platform$Cmd$none);
                }
              }
            )
          }
        );
      };
      var $author$project$Main$Input = function(a) {
        return { $: 1, a };
      };
      var $author$project$Main$Output = function(a) {
        return { $: 2, a };
      };
      var $author$project$Output$Stdout = function(a) {
        return { $: 0, a };
      };
      var $elm$core$Task$attempt = F2(
        function(resultToMessage, task) {
          return $elm$core$Task$command(
            A2(
              $elm$core$Task$onError,
              A2(
                $elm$core$Basics$composeL,
                A2($elm$core$Basics$composeL, $elm$core$Task$succeed, resultToMessage),
                $elm$core$Result$Err
              ),
              A2(
                $elm$core$Task$andThen,
                A2(
                  $elm$core$Basics$composeL,
                  A2($elm$core$Basics$composeL, $elm$core$Task$succeed, resultToMessage),
                  $elm$core$Result$Ok
                ),
                task
              )
            )
          );
        }
      );
      var $author$project$Custom$Command$Apps$Pull$responses = $elm$core$Dict$empty;
      var $author$project$Custom$Command$Apps$Push$responses = $elm$core$Dict$empty;
      var $author$project$Custom$Command$Scenarios$Pull$responses = $elm$core$Dict$empty;
      var $author$project$Custom$Command$Scenarios$Push$responses = $elm$core$Dict$empty;
      var $author$project$Custom$Command$responses = function(command) {
        switch (command.$) {
          case 0:
            return $author$project$Custom$Command$Apps$Pull$responses;
          case 1:
            return $author$project$Custom$Command$Apps$Push$responses;
          case 2:
            return $author$project$Custom$Command$Scenarios$Pull$responses;
          default:
            return $author$project$Custom$Command$Scenarios$Push$responses;
        }
      };
      var $author$project$Gen$Command$Apps$Connections$List$responses = $elm$core$Dict$fromList(
        _List_fromArray(
          [
            A2($elm$core$Tuple$pair, "200", "Successful response")
          ]
        )
      );
      var $author$project$Gen$Command$Apps$Connections$Metadata$Update$responses = $elm$core$Dict$fromList(
        _List_fromArray(
          [
            A2($elm$core$Tuple$pair, "200", "Successful response")
          ]
        )
      );
      var $author$project$Gen$Command$Apps$Connections$Sections$Get$responses = $elm$core$Dict$fromList(
        _List_fromArray(
          [
            A2($elm$core$Tuple$pair, "200", "Successful response")
          ]
        )
      );
      var $author$project$Gen$Command$Apps$Connections$Sections$Set$responses = $elm$core$Dict$fromList(
        _List_fromArray(
          [
            A2($elm$core$Tuple$pair, "200", "Successful response")
          ]
        )
      );
      var $author$project$Gen$Command$Apps$Functions$Code$Get$responses = $elm$core$Dict$fromList(
        _List_fromArray(
          [
            A2($elm$core$Tuple$pair, "200", "Successful response")
          ]
        )
      );
      var $author$project$Gen$Command$Apps$Functions$Code$Set$responses = $elm$core$Dict$fromList(
        _List_fromArray(
          [
            A2($elm$core$Tuple$pair, "200", "Successful response")
          ]
        )
      );
      var $author$project$Gen$Command$Apps$Functions$Get$responses = $elm$core$Dict$fromList(
        _List_fromArray(
          [
            A2($elm$core$Tuple$pair, "200", "Successful response")
          ]
        )
      );
      var $author$project$Gen$Command$Apps$Functions$Test$Get$responses = $elm$core$Dict$fromList(_List_Nil);
      var $author$project$Gen$Command$Apps$Functions$Test$Set$responses = $elm$core$Dict$fromList(
        _List_fromArray(
          [
            A2($elm$core$Tuple$pair, "200", "Successful response")
          ]
        )
      );
      var $author$project$Gen$Command$Apps$Icon$Get$responses = $elm$core$Dict$fromList(
        _List_fromArray(
          [
            A2($elm$core$Tuple$pair, "200", "Successful response")
          ]
        )
      );
      var $author$project$Gen$Command$Apps$Icon$Set$responses = $elm$core$Dict$fromList(
        _List_fromArray(
          [
            A2($elm$core$Tuple$pair, "200", "Successful response")
          ]
        )
      );
      var $author$project$Gen$Command$Apps$List$responses = $elm$core$Dict$fromList(
        _List_fromArray(
          [
            A2($elm$core$Tuple$pair, "200", "Successful response")
          ]
        )
      );
      var $author$project$Gen$Command$Apps$Metadata$Get$responses = $elm$core$Dict$fromList(
        _List_fromArray(
          [
            A2($elm$core$Tuple$pair, "200", "Successful response")
          ]
        )
      );
      var $author$project$Gen$Command$Apps$Metadata$Update$responses = $elm$core$Dict$fromList(
        _List_fromArray(
          [
            A2($elm$core$Tuple$pair, "200", "Successful response")
          ]
        )
      );
      var $author$project$Gen$Command$Apps$Module$Get$responses = $elm$core$Dict$fromList(
        _List_fromArray(
          [
            A2($elm$core$Tuple$pair, "200", "Successful response")
          ]
        )
      );
      var $author$project$Gen$Command$Apps$Module$Update$responses = $elm$core$Dict$fromList(
        _List_fromArray(
          [
            A2($elm$core$Tuple$pair, "200", "Successful response")
          ]
        )
      );
      var $author$project$Gen$Command$Apps$Modules$Get$responses = $elm$core$Dict$fromList(
        _List_fromArray(
          [
            A2($elm$core$Tuple$pair, "200", "Successful response")
          ]
        )
      );
      var $author$project$Gen$Command$Apps$Modules$Sections$Get$responses = $elm$core$Dict$fromList(
        _List_fromArray(
          [
            A2($elm$core$Tuple$pair, "200", "Successful response")
          ]
        )
      );
      var $author$project$Gen$Command$Apps$Modules$Sections$Set$responses = $elm$core$Dict$fromList(
        _List_fromArray(
          [
            A2($elm$core$Tuple$pair, "200", "Successful response")
          ]
        )
      );
      var $author$project$Gen$Command$Apps$Readme$Get$responses = $elm$core$Dict$fromList(
        _List_fromArray(
          [
            A2($elm$core$Tuple$pair, "200", "Successful response")
          ]
        )
      );
      var $author$project$Gen$Command$Apps$Readme$Set$responses = $elm$core$Dict$fromList(
        _List_fromArray(
          [
            A2($elm$core$Tuple$pair, "200", "Successful response")
          ]
        )
      );
      var $author$project$Gen$Command$Apps$Rpc$Get$responses = $elm$core$Dict$fromList(
        _List_fromArray(
          [
            A2($elm$core$Tuple$pair, "200", "Successful response")
          ]
        )
      );
      var $author$project$Gen$Command$Apps$Rpc$Update$responses = $elm$core$Dict$fromList(
        _List_fromArray(
          [
            A2($elm$core$Tuple$pair, "200", "Successful response")
          ]
        )
      );
      var $author$project$Gen$Command$Apps$Rpcs$Get$responses = $elm$core$Dict$fromList(
        _List_fromArray(
          [
            A2($elm$core$Tuple$pair, "200", "Successful response")
          ]
        )
      );
      var $author$project$Gen$Command$Apps$Rpcs$Sections$Get$responses = $elm$core$Dict$fromList(
        _List_fromArray(
          [
            A2($elm$core$Tuple$pair, "200", "Successful response")
          ]
        )
      );
      var $author$project$Gen$Command$Apps$Rpcs$Sections$Set$responses = $elm$core$Dict$fromList(
        _List_fromArray(
          [
            A2($elm$core$Tuple$pair, "200", "Successful response")
          ]
        )
      );
      var $author$project$Gen$Command$Apps$Sections$Get$responses = $elm$core$Dict$fromList(
        _List_fromArray(
          [
            A2($elm$core$Tuple$pair, "200", "Successful response")
          ]
        )
      );
      var $author$project$Gen$Command$Apps$Sections$Set$responses = $elm$core$Dict$fromList(
        _List_fromArray(
          [
            A2($elm$core$Tuple$pair, "200", "Successful response")
          ]
        )
      );
      var $author$project$Gen$Command$Apps$Webhook$List$responses = $elm$core$Dict$fromList(
        _List_fromArray(
          [
            A2($elm$core$Tuple$pair, "200", "Successful response")
          ]
        )
      );
      var $author$project$Gen$Command$Apps$Webhook$Update$responses = $elm$core$Dict$fromList(
        _List_fromArray(
          [
            A2($elm$core$Tuple$pair, "200", "Successful response")
          ]
        )
      );
      var $author$project$Gen$Command$Apps$Webhooks$List$responses = $elm$core$Dict$fromList(
        _List_fromArray(
          [
            A2($elm$core$Tuple$pair, "200", "Successful response")
          ]
        )
      );
      var $author$project$Gen$Command$Apps$Webhooks$Sections$Get$responses = $elm$core$Dict$fromList(
        _List_fromArray(
          [
            A2($elm$core$Tuple$pair, "200", "Successful response")
          ]
        )
      );
      var $author$project$Gen$Command$Apps$Webhooks$Sections$Set$responses = $elm$core$Dict$fromList(
        _List_fromArray(
          [
            A2($elm$core$Tuple$pair, "200", "Successful response")
          ]
        )
      );
      var $author$project$Gen$Command$Connection$Get$responses = $elm$core$Dict$fromList(
        _List_fromArray(
          [
            A2($elm$core$Tuple$pair, "200", "Successful response")
          ]
        )
      );
      var $author$project$Gen$Command$Connections$List$responses = $elm$core$Dict$fromList(
        _List_fromArray(
          [
            A2($elm$core$Tuple$pair, "200", "Successful response")
          ]
        )
      );
      var $author$project$Gen$Command$DataStores$Create$responses = $elm$core$Dict$fromList(
        _List_fromArray(
          [
            A2($elm$core$Tuple$pair, "200", "Successful response")
          ]
        )
      );
      var $author$project$Gen$Command$DataStores$Get$responses = $elm$core$Dict$fromList(
        _List_fromArray(
          [
            A2($elm$core$Tuple$pair, "200", "Successful response")
          ]
        )
      );
      var $author$project$Gen$Command$DataStructures$Create$responses = $elm$core$Dict$fromList(
        _List_fromArray(
          [
            A2($elm$core$Tuple$pair, "200", "Successful response")
          ]
        )
      );
      var $author$project$Gen$Command$DataStructures$Update$responses = $elm$core$Dict$fromList(
        _List_fromArray(
          [
            A2($elm$core$Tuple$pair, "200", "Successful response")
          ]
        )
      );
      var $author$project$Gen$Command$Enums$Countries$List$responses = $elm$core$Dict$fromList(
        _List_fromArray(
          [
            A2($elm$core$Tuple$pair, "200", "Successful response")
          ]
        )
      );
      var $author$project$Gen$Command$Hooks$Create$responses = $elm$core$Dict$fromList(
        _List_fromArray(
          [
            A2($elm$core$Tuple$pair, "200", "Successful response")
          ]
        )
      );
      var $author$project$Gen$Command$Hooks$Get$responses = $elm$core$Dict$fromList(
        _List_fromArray(
          [
            A2($elm$core$Tuple$pair, "200", "Successful response")
          ]
        )
      );
      var $author$project$Gen$Command$Hooks$List$responses = $elm$core$Dict$fromList(
        _List_fromArray(
          [
            A2($elm$core$Tuple$pair, "200", "Successful response")
          ]
        )
      );
      var $author$project$Gen$Command$Organizations$List$responses = $elm$core$Dict$fromList(
        _List_fromArray(
          [
            A2($elm$core$Tuple$pair, "200", "Successful response")
          ]
        )
      );
      var $author$project$Gen$Command$Organizations$Variables$Get$responses = $elm$core$Dict$fromList(
        _List_fromArray(
          [
            A2($elm$core$Tuple$pair, "200", "Successful response")
          ]
        )
      );
      var $author$project$Gen$Command$Scenarios$Blueprints$Get$responses = $elm$core$Dict$fromList(
        _List_fromArray(
          [
            A2($elm$core$Tuple$pair, "200", "Blueprint retrieved")
          ]
        )
      );
      var $author$project$Gen$Command$Scenarios$Clone$Create$responses = $elm$core$Dict$fromList(
        _List_fromArray(
          [
            A2($elm$core$Tuple$pair, "200", "Scenario successfully cloned")
          ]
        )
      );
      var $author$project$Gen$Command$Scenarios$Create$responses = $elm$core$Dict$fromList(
        _List_fromArray(
          [
            A2($elm$core$Tuple$pair, "200", "Scenario created successfully")
          ]
        )
      );
      var $author$project$Gen$Command$Scenarios$Get$responses = $elm$core$Dict$fromList(
        _List_fromArray(
          [
            A2($elm$core$Tuple$pair, "200", "Ok")
          ]
        )
      );
      var $author$project$Gen$Command$Scenarios$List$responses = $elm$core$Dict$fromList(
        _List_fromArray(
          [
            A2($elm$core$Tuple$pair, "200", "Retrieved scenarios")
          ]
        )
      );
      var $author$project$Gen$Command$Scenarios$Update$responses = $elm$core$Dict$fromList(
        _List_fromArray(
          [
            A2($elm$core$Tuple$pair, "200", "Scenario was updated successfully")
          ]
        )
      );
      var $author$project$Gen$Command$Teams$Variables$Get$responses = $elm$core$Dict$fromList(
        _List_fromArray(
          [
            A2($elm$core$Tuple$pair, "200", "Successful response")
          ]
        )
      );
      var $author$project$Gen$Command$responses = function(command) {
        switch (command.$) {
          case 0:
            return $author$project$Gen$Command$Apps$List$responses;
          case 1:
            return $author$project$Gen$Command$Apps$Metadata$Get$responses;
          case 2:
            return $author$project$Gen$Command$Apps$Metadata$Update$responses;
          case 3:
            return $author$project$Gen$Command$Apps$Icon$Get$responses;
          case 4:
            return $author$project$Gen$Command$Apps$Icon$Set$responses;
          case 5:
            return $author$project$Gen$Command$Apps$Sections$Get$responses;
          case 6:
            return $author$project$Gen$Command$Apps$Sections$Set$responses;
          case 7:
            return $author$project$Gen$Command$Apps$Readme$Get$responses;
          case 8:
            return $author$project$Gen$Command$Apps$Readme$Set$responses;
          case 9:
            return $author$project$Gen$Command$Apps$Connections$List$responses;
          case 10:
            return $author$project$Gen$Command$Apps$Connections$Metadata$Update$responses;
          case 11:
            return $author$project$Gen$Command$Apps$Connections$Sections$Get$responses;
          case 12:
            return $author$project$Gen$Command$Apps$Connections$Sections$Set$responses;
          case 13:
            return $author$project$Gen$Command$Apps$Modules$Get$responses;
          case 14:
            return $author$project$Gen$Command$Apps$Module$Get$responses;
          case 15:
            return $author$project$Gen$Command$Apps$Module$Update$responses;
          case 16:
            return $author$project$Gen$Command$Apps$Modules$Sections$Get$responses;
          case 17:
            return $author$project$Gen$Command$Apps$Modules$Sections$Set$responses;
          case 18:
            return $author$project$Gen$Command$Apps$Rpcs$Get$responses;
          case 19:
            return $author$project$Gen$Command$Apps$Rpc$Get$responses;
          case 20:
            return $author$project$Gen$Command$Apps$Rpc$Update$responses;
          case 21:
            return $author$project$Gen$Command$Apps$Rpcs$Sections$Get$responses;
          case 22:
            return $author$project$Gen$Command$Apps$Rpcs$Sections$Set$responses;
          case 23:
            return $author$project$Gen$Command$Apps$Webhooks$List$responses;
          case 24:
            return $author$project$Gen$Command$Apps$Webhook$List$responses;
          case 25:
            return $author$project$Gen$Command$Apps$Webhook$Update$responses;
          case 26:
            return $author$project$Gen$Command$Apps$Webhooks$Sections$Get$responses;
          case 27:
            return $author$project$Gen$Command$Apps$Webhooks$Sections$Set$responses;
          case 28:
            return $author$project$Gen$Command$Apps$Functions$Get$responses;
          case 29:
            return $author$project$Gen$Command$Apps$Functions$Code$Get$responses;
          case 30:
            return $author$project$Gen$Command$Apps$Functions$Code$Set$responses;
          case 31:
            return $author$project$Gen$Command$Apps$Functions$Test$Get$responses;
          case 32:
            return $author$project$Gen$Command$Apps$Functions$Test$Set$responses;
          case 33:
            return $author$project$Gen$Command$Connection$Get$responses;
          case 34:
            return $author$project$Gen$Command$Connections$List$responses;
          case 35:
            return $author$project$Gen$Command$DataStores$Get$responses;
          case 36:
            return $author$project$Gen$Command$DataStores$Create$responses;
          case 37:
            return $author$project$Gen$Command$DataStructures$Create$responses;
          case 38:
            return $author$project$Gen$Command$DataStructures$Update$responses;
          case 39:
            return $author$project$Gen$Command$Enums$Countries$List$responses;
          case 40:
            return $author$project$Gen$Command$Hooks$List$responses;
          case 41:
            return $author$project$Gen$Command$Hooks$Get$responses;
          case 42:
            return $author$project$Gen$Command$Hooks$Create$responses;
          case 43:
            return $author$project$Gen$Command$Organizations$List$responses;
          case 44:
            return $author$project$Gen$Command$Organizations$Variables$Get$responses;
          case 45:
            return $author$project$Gen$Command$Scenarios$List$responses;
          case 46:
            return $author$project$Gen$Command$Scenarios$Get$responses;
          case 47:
            return $author$project$Gen$Command$Scenarios$Create$responses;
          case 48:
            return $author$project$Gen$Command$Scenarios$Update$responses;
          case 49:
            return $author$project$Gen$Command$Scenarios$Clone$Create$responses;
          case 50:
            return $author$project$Gen$Command$Scenarios$Blueprints$Get$responses;
          default:
            return $author$project$Gen$Command$Teams$Variables$Get$responses;
        }
      };
      var $author$project$Api$Response$statusCode = function(_v0) {
        var metadata = _v0.a;
        return metadata.cE;
      };
      var $author$project$Api$Response$statusText = function(_v0) {
        var metadata = _v0.a;
        return metadata.dV;
      };
      var $author$project$Api$Body$contentType = function(body) {
        if (body.$ === 5) {
          return "bytes";
        } else {
          return "text";
        }
      };
      var $author$project$Content$contentType = function(content) {
        if (!content.$) {
          var response = content.a;
          return $author$project$Api$Body$contentType(
            $author$project$Api$Response$body(response)
          );
        } else {
          return "text";
        }
      };
      var $author$project$Ports$print = _Platform_outgoingPort("print", $elm$json$Json$Encode$string);
      var $author$project$Ports$printLog = _Platform_outgoingPort("printLog", $elm$json$Json$Encode$string);
      var $elm$bytes$Bytes$Decode$decode = F2(
        function(_v0, bs) {
          var decoder = _v0;
          return A2(_Bytes_decode, decoder, bs);
        }
      );
      var $elm$bytes$Bytes$Decode$Decoder = $elm$core$Basics$identity;
      var $elm$bytes$Bytes$Decode$loopHelp = F4(
        function(state, callback, bites, offset) {
          loopHelp:
            while (true) {
              var _v0 = callback(state);
              var decoder = _v0;
              var _v1 = A2(decoder, bites, offset);
              var newOffset = _v1.a;
              var step = _v1.b;
              if (!step.$) {
                var newState = step.a;
                var $temp$state = newState, $temp$callback = callback, $temp$bites = bites, $temp$offset = newOffset;
                state = $temp$state;
                callback = $temp$callback;
                bites = $temp$bites;
                offset = $temp$offset;
                continue loopHelp;
              } else {
                var result = step.a;
                return _Utils_Tuple2(newOffset, result);
              }
            }
        }
      );
      var $elm$bytes$Bytes$Decode$loop = F2(
        function(state, callback) {
          return A2($elm$bytes$Bytes$Decode$loopHelp, state, callback);
        }
      );
      var $elm$bytes$Bytes$Decode$Done = function(a) {
        return { $: 1, a };
      };
      var $elm$bytes$Bytes$Decode$Loop = function(a) {
        return { $: 0, a };
      };
      var $danfishgold$base64_bytes$Decode$lowest6BitsMask = 63;
      var $elm$core$Bitwise$shiftRightZfBy = _Bitwise_shiftRightZfBy;
      var $elm$core$Char$fromCode = _Char_fromCode;
      var $danfishgold$base64_bytes$Decode$unsafeToChar = function(n) {
        if (n <= 25) {
          return $elm$core$Char$fromCode(65 + n);
        } else {
          if (n <= 51) {
            return $elm$core$Char$fromCode(97 + (n - 26));
          } else {
            if (n <= 61) {
              return $elm$core$Char$fromCode(48 + (n - 52));
            } else {
              switch (n) {
                case 62:
                  return "+";
                case 63:
                  return "/";
                default:
                  return "\0";
              }
            }
          }
        }
      };
      var $danfishgold$base64_bytes$Decode$bitsToChars = F2(
        function(bits, missing) {
          var s = $danfishgold$base64_bytes$Decode$unsafeToChar(bits & $danfishgold$base64_bytes$Decode$lowest6BitsMask);
          var r = $danfishgold$base64_bytes$Decode$unsafeToChar(bits >>> 6 & $danfishgold$base64_bytes$Decode$lowest6BitsMask);
          var q = $danfishgold$base64_bytes$Decode$unsafeToChar(bits >>> 12 & $danfishgold$base64_bytes$Decode$lowest6BitsMask);
          var p = $danfishgold$base64_bytes$Decode$unsafeToChar(bits >>> 18);
          switch (missing) {
            case 0:
              return A2(
                $elm$core$String$cons,
                p,
                A2(
                  $elm$core$String$cons,
                  q,
                  A2(
                    $elm$core$String$cons,
                    r,
                    $elm$core$String$fromChar(s)
                  )
                )
              );
            case 1:
              return A2(
                $elm$core$String$cons,
                p,
                A2(
                  $elm$core$String$cons,
                  q,
                  A2($elm$core$String$cons, r, "=")
                )
              );
            case 2:
              return A2(
                $elm$core$String$cons,
                p,
                A2($elm$core$String$cons, q, "==")
              );
            default:
              return "";
          }
        }
      );
      var $danfishgold$base64_bytes$Decode$bitsToCharSpecialized = F4(
        function(bits1, bits2, bits3, accum) {
          var z = $danfishgold$base64_bytes$Decode$unsafeToChar(bits3 >>> 6 & $danfishgold$base64_bytes$Decode$lowest6BitsMask);
          var y = $danfishgold$base64_bytes$Decode$unsafeToChar(bits3 >>> 12 & $danfishgold$base64_bytes$Decode$lowest6BitsMask);
          var x = $danfishgold$base64_bytes$Decode$unsafeToChar(bits3 >>> 18);
          var w = $danfishgold$base64_bytes$Decode$unsafeToChar(bits3 & $danfishgold$base64_bytes$Decode$lowest6BitsMask);
          var s = $danfishgold$base64_bytes$Decode$unsafeToChar(bits1 & $danfishgold$base64_bytes$Decode$lowest6BitsMask);
          var r = $danfishgold$base64_bytes$Decode$unsafeToChar(bits1 >>> 6 & $danfishgold$base64_bytes$Decode$lowest6BitsMask);
          var q = $danfishgold$base64_bytes$Decode$unsafeToChar(bits1 >>> 12 & $danfishgold$base64_bytes$Decode$lowest6BitsMask);
          var p = $danfishgold$base64_bytes$Decode$unsafeToChar(bits1 >>> 18);
          var d = $danfishgold$base64_bytes$Decode$unsafeToChar(bits2 & $danfishgold$base64_bytes$Decode$lowest6BitsMask);
          var c = $danfishgold$base64_bytes$Decode$unsafeToChar(bits2 >>> 6 & $danfishgold$base64_bytes$Decode$lowest6BitsMask);
          var b = $danfishgold$base64_bytes$Decode$unsafeToChar(bits2 >>> 12 & $danfishgold$base64_bytes$Decode$lowest6BitsMask);
          var a = $danfishgold$base64_bytes$Decode$unsafeToChar(bits2 >>> 18);
          return A2(
            $elm$core$String$cons,
            x,
            A2(
              $elm$core$String$cons,
              y,
              A2(
                $elm$core$String$cons,
                z,
                A2(
                  $elm$core$String$cons,
                  w,
                  A2(
                    $elm$core$String$cons,
                    a,
                    A2(
                      $elm$core$String$cons,
                      b,
                      A2(
                        $elm$core$String$cons,
                        c,
                        A2(
                          $elm$core$String$cons,
                          d,
                          A2(
                            $elm$core$String$cons,
                            p,
                            A2(
                              $elm$core$String$cons,
                              q,
                              A2(
                                $elm$core$String$cons,
                                r,
                                A2($elm$core$String$cons, s, accum)
                              )
                            )
                          )
                        )
                      )
                    )
                  )
                )
              )
            )
          );
        }
      );
      var $danfishgold$base64_bytes$Decode$decode18Help = F5(
        function(a, b, c, d, e) {
          var combined6 = (255 & d) << 16 | e;
          var combined5 = d >>> 8;
          var combined4 = 16777215 & c;
          var combined3 = (65535 & b) << 8 | c >>> 24;
          var combined2 = (255 & a) << 16 | b >>> 16;
          var combined1 = a >>> 8;
          return A4(
            $danfishgold$base64_bytes$Decode$bitsToCharSpecialized,
            combined3,
            combined2,
            combined1,
            A4($danfishgold$base64_bytes$Decode$bitsToCharSpecialized, combined6, combined5, combined4, "")
          );
        }
      );
      var $elm$bytes$Bytes$Decode$map5 = F6(
        function(func, _v0, _v1, _v2, _v3, _v4) {
          var decodeA = _v0;
          var decodeB = _v1;
          var decodeC = _v2;
          var decodeD = _v3;
          var decodeE = _v4;
          return F2(
            function(bites, offset) {
              var _v5 = A2(decodeA, bites, offset);
              var aOffset = _v5.a;
              var a = _v5.b;
              var _v6 = A2(decodeB, bites, aOffset);
              var bOffset = _v6.a;
              var b = _v6.b;
              var _v7 = A2(decodeC, bites, bOffset);
              var cOffset = _v7.a;
              var c = _v7.b;
              var _v8 = A2(decodeD, bites, cOffset);
              var dOffset = _v8.a;
              var d = _v8.b;
              var _v9 = A2(decodeE, bites, dOffset);
              var eOffset = _v9.a;
              var e = _v9.b;
              return _Utils_Tuple2(
                eOffset,
                A5(func, a, b, c, d, e)
              );
            }
          );
        }
      );
      var $elm$bytes$Bytes$Decode$unsignedInt16 = function(endianness) {
        return _Bytes_read_u16(!endianness);
      };
      var $danfishgold$base64_bytes$Decode$u16BE = $elm$bytes$Bytes$Decode$unsignedInt16(1);
      var $elm$bytes$Bytes$Decode$unsignedInt32 = function(endianness) {
        return _Bytes_read_u32(!endianness);
      };
      var $danfishgold$base64_bytes$Decode$u32BE = $elm$bytes$Bytes$Decode$unsignedInt32(1);
      var $danfishgold$base64_bytes$Decode$decode18Bytes = A6($elm$bytes$Bytes$Decode$map5, $danfishgold$base64_bytes$Decode$decode18Help, $danfishgold$base64_bytes$Decode$u32BE, $danfishgold$base64_bytes$Decode$u32BE, $danfishgold$base64_bytes$Decode$u32BE, $danfishgold$base64_bytes$Decode$u32BE, $danfishgold$base64_bytes$Decode$u16BE);
      var $elm$bytes$Bytes$Decode$map = F2(
        function(func, _v0) {
          var decodeA = _v0;
          return F2(
            function(bites, offset) {
              var _v1 = A2(decodeA, bites, offset);
              var aOffset = _v1.a;
              var a = _v1.b;
              return _Utils_Tuple2(
                aOffset,
                func(a)
              );
            }
          );
        }
      );
      var $elm$bytes$Bytes$Decode$map2 = F3(
        function(func, _v0, _v1) {
          var decodeA = _v0;
          var decodeB = _v1;
          return F2(
            function(bites, offset) {
              var _v2 = A2(decodeA, bites, offset);
              var aOffset = _v2.a;
              var a = _v2.b;
              var _v3 = A2(decodeB, bites, aOffset);
              var bOffset = _v3.a;
              var b = _v3.b;
              return _Utils_Tuple2(
                bOffset,
                A2(func, a, b)
              );
            }
          );
        }
      );
      var $elm$bytes$Bytes$Decode$map3 = F4(
        function(func, _v0, _v1, _v2) {
          var decodeA = _v0;
          var decodeB = _v1;
          var decodeC = _v2;
          return F2(
            function(bites, offset) {
              var _v3 = A2(decodeA, bites, offset);
              var aOffset = _v3.a;
              var a = _v3.b;
              var _v4 = A2(decodeB, bites, aOffset);
              var bOffset = _v4.a;
              var b = _v4.b;
              var _v5 = A2(decodeC, bites, bOffset);
              var cOffset = _v5.a;
              var c = _v5.b;
              return _Utils_Tuple2(
                cOffset,
                A3(func, a, b, c)
              );
            }
          );
        }
      );
      var $elm$bytes$Bytes$Decode$succeed = function(a) {
        return F2(
          function(_v0, offset) {
            return _Utils_Tuple2(offset, a);
          }
        );
      };
      var $elm$bytes$Bytes$Decode$unsignedInt8 = _Bytes_read_u8;
      var $danfishgold$base64_bytes$Decode$loopHelp = function(_v0) {
        var remaining = _v0.aG;
        var string = _v0.aL;
        if (remaining >= 18) {
          return A2(
            $elm$bytes$Bytes$Decode$map,
            function(result) {
              return $elm$bytes$Bytes$Decode$Loop(
                {
                  aG: remaining - 18,
                  aL: _Utils_ap(string, result)
                }
              );
            },
            $danfishgold$base64_bytes$Decode$decode18Bytes
          );
        } else {
          if (remaining >= 3) {
            var helper = F3(
              function(a, b, c) {
                var combined = a << 16 | b << 8 | c;
                return $elm$bytes$Bytes$Decode$Loop(
                  {
                    aG: remaining - 3,
                    aL: _Utils_ap(
                      string,
                      A2($danfishgold$base64_bytes$Decode$bitsToChars, combined, 0)
                    )
                  }
                );
              }
            );
            return A4($elm$bytes$Bytes$Decode$map3, helper, $elm$bytes$Bytes$Decode$unsignedInt8, $elm$bytes$Bytes$Decode$unsignedInt8, $elm$bytes$Bytes$Decode$unsignedInt8);
          } else {
            if (!remaining) {
              return $elm$bytes$Bytes$Decode$succeed(
                $elm$bytes$Bytes$Decode$Done(string)
              );
            } else {
              if (remaining === 2) {
                var helper = F2(
                  function(a, b) {
                    var combined = a << 16 | b << 8;
                    return $elm$bytes$Bytes$Decode$Done(
                      _Utils_ap(
                        string,
                        A2($danfishgold$base64_bytes$Decode$bitsToChars, combined, 1)
                      )
                    );
                  }
                );
                return A3($elm$bytes$Bytes$Decode$map2, helper, $elm$bytes$Bytes$Decode$unsignedInt8, $elm$bytes$Bytes$Decode$unsignedInt8);
              } else {
                return A2(
                  $elm$bytes$Bytes$Decode$map,
                  function(a) {
                    return $elm$bytes$Bytes$Decode$Done(
                      _Utils_ap(
                        string,
                        A2($danfishgold$base64_bytes$Decode$bitsToChars, a << 16, 2)
                      )
                    );
                  },
                  $elm$bytes$Bytes$Decode$unsignedInt8
                );
              }
            }
          }
        }
      };
      var $danfishgold$base64_bytes$Decode$decoder = function(width) {
        return A2(
          $elm$bytes$Bytes$Decode$loop,
          { aG: width, aL: "" },
          $danfishgold$base64_bytes$Decode$loopHelp
        );
      };
      var $elm$bytes$Bytes$width = _Bytes_width;
      var $danfishgold$base64_bytes$Decode$fromBytes = function(bytes) {
        return A2(
          $elm$bytes$Bytes$Decode$decode,
          $danfishgold$base64_bytes$Decode$decoder(
            $elm$bytes$Bytes$width(bytes)
          ),
          bytes
        );
      };
      var $danfishgold$base64_bytes$Base64$fromBytes = $danfishgold$base64_bytes$Decode$fromBytes;
      var $author$project$Api$Body$toString = function(payload) {
        switch (payload.$) {
          case 0:
            var body = payload.a;
            return body;
          case 1:
            var body = payload.a;
            return body;
          case 2:
            var body = payload.a;
            return body;
          case 3:
            var body = payload.a;
            return A2($elm$json$Json$Encode$encode, 4, body);
          case 5:
            var body = payload.a;
            return A2(
              $elm$core$Maybe$withDefault,
              "Binary Data",
              $danfishgold$base64_bytes$Base64$fromBytes(body)
            );
          default:
            return "";
        }
      };
      var $author$project$Content$toString = function(content) {
        switch (content.$) {
          case 0:
            var response = content.a;
            return $author$project$Api$Body$toString(
              $author$project$Api$Response$body(response)
            );
          case 1:
            var body = content.a;
            return $author$project$Api$Body$toString(body);
          case 2:
            var message = content.a;
            return message;
          default:
            var value = content.a;
            return A2($elm$json$Json$Encode$encode, 4, value);
        }
      };
      var $author$project$Ports$writeFile = _Platform_outgoingPort("writeFile", $elm$core$Basics$identity);
      var $author$project$Output$write = function(output) {
        switch (output.$) {
          case 0:
            var content = output.a;
            return $author$project$Ports$print(
              $author$project$Content$toString(content)
            );
          case 1:
            var content = output.a;
            return $author$project$Ports$printLog(
              $author$project$Content$toString(content)
            );
          default:
            var filePath = output.a;
            var content = output.b;
            return $author$project$Ports$writeFile(
              $elm$json$Json$Encode$object(
                _List_fromArray(
                  [
                    _Utils_Tuple2(
                      "path",
                      $elm$json$Json$Encode$string(filePath)
                    ),
                    _Utils_Tuple2(
                      "type",
                      $elm$json$Json$Encode$string(
                        $author$project$Content$contentType(content)
                      )
                    ),
                    _Utils_Tuple2(
                      "content",
                      $elm$json$Json$Encode$string(
                        $author$project$Content$toString(content)
                      )
                    )
                  ]
                )
              )
            );
        }
      };
      var $author$project$Main$update = F3(
        function(command, message, model) {
          switch (message.$) {
            case 0:
              var sequence = message.a;
              var instructions = function() {
                if (!sequence.b) {
                  return model;
                } else {
                  var seq = sequence;
                  return _Utils_ap(seq, model);
                }
              }();
              if (instructions.b) {
                var instruction = instructions.a;
                var insts = instructions.b;
                return A2(
                  $elm$core$Tuple$pair,
                  insts,
                  function() {
                    var task = instruction;
                    return A2(
                      $elm$core$Task$attempt,
                      function(res) {
                        if (!res.$) {
                          switch (res.a.$) {
                            case 0:
                              var input = res.a.a;
                              return $author$project$Main$Input(input);
                            case 1:
                              var seq = res.a.a;
                              return $author$project$Main$Continue(seq);
                            default:
                              var output2 = res.a.a;
                              return $author$project$Main$Output(output2);
                          }
                        } else {
                          var errorMessage = res.a;
                          return $author$project$Main$Output(
                            $author$project$Output$Stderr(
                              $author$project$Output$string(errorMessage)
                            )
                          );
                        }
                      },
                      task
                    );
                  }()
                );
              } else {
                return _Utils_Tuple2(_List_Nil, $elm$core$Platform$Cmd$none);
              }
            case 2:
              var output = message.a;
              return _Utils_Tuple2(
                model,
                $elm$core$Platform$Cmd$batch(
                  _List_fromArray(
                    [
                      $author$project$Output$write(output),
                      A2(
                        $elm$core$Task$perform,
                        $author$project$Main$Continue,
                        $elm$core$Task$succeed(_List_Nil)
                      )
                    ]
                  )
                )
              );
            default:
              var content = message.a;
              var logInstruction = function() {
                if (!content.$) {
                  var response = content.a;
                  return $elm$core$List$singleton(
                    $author$project$Instruction$log(
                      A2(
                        $elm$core$Maybe$withDefault,
                        $author$project$Api$Response$statusText(response),
                        A2(
                          $elm$core$Dict$get,
                          $elm$core$String$fromInt(
                            $author$project$Api$Response$statusCode(response)
                          ),
                          function() {
                            if (!command.$) {
                              var c = command.a;
                              return $author$project$Gen$Command$responses(c);
                            } else {
                              var c = command.a;
                              return $author$project$Custom$Command$responses(c);
                            }
                          }()
                        )
                      )
                    )
                  );
                } else {
                  return _List_Nil;
                }
              }();
              return _Utils_Tuple2(
                model,
                $elm$core$Platform$Cmd$batch(
                  _List_fromArray(
                    [
                      $author$project$Output$write(
                        $author$project$Output$Stdout(content)
                      ),
                      A2(
                        $elm$core$Task$perform,
                        $author$project$Main$Continue,
                        $elm$core$Task$succeed(logInstruction)
                      )
                    ]
                  )
                )
              );
          }
        }
      );
      var $author$project$Main$main = $dillonkearns$elm_cli_options_parser$Cli$Program$stateful(
        {
          c9: $author$project$Main$program,
          dq: $author$project$Main$run,
          dE: $author$project$Ports$printAndExitFailure,
          dF: $author$project$Ports$printAndExitSuccess,
          dX: function(_v0) {
            return $author$project$Ports$continue(
              function(_v1) {
                return $author$project$Main$Continue(_List_Nil);
              }
            );
          },
          d2: $author$project$Main$update
        }
      );
      _Platform_export({ "Main": { "init": $author$project$Main$main(
        A2(
          $elm$json$Json$Decode$andThen,
          function(versionMessage) {
            return A2(
              $elm$json$Json$Decode$andThen,
              function(configFile2) {
                return A2(
                  $elm$json$Json$Decode$andThen,
                  function(argv) {
                    return $elm$json$Json$Decode$succeed(
                      { c4: argv, aP: configFile2, d4: versionMessage }
                    );
                  },
                  A2(
                    $elm$json$Json$Decode$field,
                    "argv",
                    $elm$json$Json$Decode$list($elm$json$Json$Decode$string)
                  )
                );
              },
              A2(
                $elm$json$Json$Decode$field,
                "configFile",
                $elm$json$Json$Decode$oneOf(
                  _List_fromArray(
                    [
                      $elm$json$Json$Decode$null($elm$core$Maybe$Nothing),
                      A2($elm$json$Json$Decode$map, $elm$core$Maybe$Just, $elm$json$Json$Decode$string)
                    ]
                  )
                )
              )
            );
          },
          A2($elm$json$Json$Decode$field, "versionMessage", $elm$json$Json$Decode$string)
        )
      )(0) } });
    })(exports);
  }
});

// node_modules/xhr2/lib/xhr2.js
var require_xhr2 = __commonJS({
  "node_modules/xhr2/lib/xhr2.js"(exports, module2) {
    (function() {
      var InvalidStateError, NetworkError, ProgressEvent, SecurityError, SyntaxError, XMLHttpRequest2, XMLHttpRequestEventTarget, XMLHttpRequestUpload, http, https, os, url;
      XMLHttpRequestEventTarget = function() {
        class XMLHttpRequestEventTarget2 {
          // @private
          // This is an abstract class and should not be instantiated directly.
          constructor() {
            this.onloadstart = null;
            this.onprogress = null;
            this.onabort = null;
            this.onerror = null;
            this.onload = null;
            this.ontimeout = null;
            this.onloadend = null;
            this._listeners = {};
          }
          // Adds a new-style listener for one of the XHR events.
          // @see http://www.w3.org/TR/XMLHttpRequest/#events
          // @param {String} eventType an XHR event type, such as 'readystatechange'
          // @param {function(ProgressEvent)} listener function that will be called when
          //   the event fires
          // @return {undefined} undefined
          addEventListener(eventType, listener) {
            var base;
            eventType = eventType.toLowerCase();
            (base = this._listeners)[eventType] || (base[eventType] = []);
            this._listeners[eventType].push(listener);
            return void 0;
          }
          // Removes an event listener added by calling addEventListener.
          // @param {String} eventType an XHR event type, such as 'readystatechange'
          // @param {function(ProgressEvent)} listener the value passed in a previous
          //   call to addEventListener.
          // @return {undefined} undefined
          removeEventListener(eventType, listener) {
            var index;
            eventType = eventType.toLowerCase();
            if (this._listeners[eventType]) {
              index = this._listeners[eventType].indexOf(listener);
              if (index !== -1) {
                this._listeners[eventType].splice(index, 1);
              }
            }
            return void 0;
          }
          // Calls all the listeners for an event.
          // @param {ProgressEvent} event the event to be dispatched
          // @return {undefined} undefined
          dispatchEvent(event) {
            var eventType, j, len, listener, listeners;
            event.currentTarget = event.target = this;
            eventType = event.type;
            if (listeners = this._listeners[eventType]) {
              for (j = 0, len = listeners.length; j < len; j++) {
                listener = listeners[j];
                listener.call(this, event);
              }
            }
            if (listener = this[`on${eventType}`]) {
              listener.call(this, event);
            }
            return void 0;
          }
        }
        ;
        XMLHttpRequestEventTarget2.prototype.onloadstart = null;
        XMLHttpRequestEventTarget2.prototype.onprogress = null;
        XMLHttpRequestEventTarget2.prototype.onabort = null;
        XMLHttpRequestEventTarget2.prototype.onerror = null;
        XMLHttpRequestEventTarget2.prototype.onload = null;
        XMLHttpRequestEventTarget2.prototype.ontimeout = null;
        XMLHttpRequestEventTarget2.prototype.onloadend = null;
        return XMLHttpRequestEventTarget2;
      }.call(this);
      http = require("http");
      https = require("https");
      os = require("os");
      url = require("url");
      XMLHttpRequest2 = function() {
        class XMLHttpRequest3 extends XMLHttpRequestEventTarget {
          // Creates a new request.
          // @param {Object} options one or more of the options below
          // @option options {Boolean} anon if true, the request's anonymous flag
          //   will be set
          // @see http://www.w3.org/TR/XMLHttpRequest/#constructors
          // @see http://www.w3.org/TR/XMLHttpRequest/#anonymous-flag
          constructor(options) {
            super();
            this.onreadystatechange = null;
            this._anonymous = options && options.anon;
            this.readyState = XMLHttpRequest3.UNSENT;
            this.response = null;
            this.responseText = "";
            this.responseType = "";
            this.responseURL = "";
            this.status = 0;
            this.statusText = "";
            this.timeout = 0;
            this.upload = new XMLHttpRequestUpload(this);
            this._method = null;
            this._url = null;
            this._sync = false;
            this._headers = null;
            this._loweredHeaders = null;
            this._mimeOverride = null;
            this._request = null;
            this._response = null;
            this._responseParts = null;
            this._responseHeaders = null;
            this._aborting = null;
            this._error = null;
            this._loadedBytes = 0;
            this._totalBytes = 0;
            this._lengthComputable = false;
          }
          // Sets the XHR's method, URL, synchronous flag, and authentication params.
          // @param {String} method the HTTP method to be used
          // @param {String} url the URL that the request will be made to
          // @param {?Boolean} async if false, the XHR should be processed
          //   synchronously; true by default
          // @param {?String} user the user credential to be used in HTTP basic
          //   authentication
          // @param {?String} password the password credential to be used in HTTP basic
          //   authentication
          // @return {undefined} undefined
          // @throw {SecurityError} method is not one of the allowed methods
          // @throw {SyntaxError} urlString is not a valid URL
          // @throw {Error} the URL contains an unsupported protocol; the supported
          //   protocols are file, http and https
          // @see http://www.w3.org/TR/XMLHttpRequest/#the-open()-method
          open(method, url2, async, user, password) {
            var xhrUrl;
            method = method.toUpperCase();
            if (method in this._restrictedMethods) {
              throw new SecurityError(`HTTP method ${method} is not allowed in XHR`);
            }
            xhrUrl = this._parseUrl(url2);
            if (async === void 0) {
              async = true;
            }
            switch (this.readyState) {
              case XMLHttpRequest3.UNSENT:
              case XMLHttpRequest3.OPENED:
              case XMLHttpRequest3.DONE:
                null;
                break;
              case XMLHttpRequest3.HEADERS_RECEIVED:
              case XMLHttpRequest3.LOADING:
                null;
            }
            this._method = method;
            this._url = xhrUrl;
            this._sync = !async;
            this._headers = {};
            this._loweredHeaders = {};
            this._mimeOverride = null;
            this._setReadyState(XMLHttpRequest3.OPENED);
            this._request = null;
            this._response = null;
            this.status = 0;
            this.statusText = "";
            this._responseParts = [];
            this._responseHeaders = null;
            this._loadedBytes = 0;
            this._totalBytes = 0;
            this._lengthComputable = false;
            return void 0;
          }
          // Appends a header to the list of author request headers.
          // @param {String} name the HTTP header name
          // @param {String} value the HTTP header value
          // @return {undefined} undefined
          // @throw {InvalidStateError} readyState is not OPENED
          // @throw {SyntaxError} name is not a valid HTTP header name or value is not
          //   a valid HTTP header value
          // @see http://www.w3.org/TR/XMLHttpRequest/#the-setrequestheader()-method
          setRequestHeader(name, value) {
            var loweredName;
            if (this.readyState !== XMLHttpRequest3.OPENED) {
              throw new InvalidStateError("XHR readyState must be OPENED");
            }
            loweredName = name.toLowerCase();
            if (this._restrictedHeaders[loweredName] || /^sec\-/.test(loweredName) || /^proxy-/.test(loweredName)) {
              console.warn(`Refused to set unsafe header "${name}"`);
              return void 0;
            }
            value = value.toString();
            if (loweredName in this._loweredHeaders) {
              name = this._loweredHeaders[loweredName];
              this._headers[name] = this._headers[name] + ", " + value;
            } else {
              this._loweredHeaders[loweredName] = name;
              this._headers[name] = value;
            }
            return void 0;
          }
          // Initiates the request.
          // @param {?String, ?ArrayBufferView} data the data to be sent; ignored for
          //   GET and HEAD requests
          // @return {undefined} undefined
          // @throw {InvalidStateError} readyState is not OPENED
          // @see http://www.w3.org/TR/XMLHttpRequest/#the-send()-method
          send(data) {
            if (this.readyState !== XMLHttpRequest3.OPENED) {
              throw new InvalidStateError("XHR readyState must be OPENED");
            }
            if (this._request) {
              throw new InvalidStateError("send() already called");
            }
            switch (this._url.protocol) {
              case "file:":
                this._sendFile(data);
                break;
              case "http:":
              case "https:":
                this._sendHttp(data);
                break;
              default:
                throw new NetworkError(`Unsupported protocol ${this._url.protocol}`);
            }
            return void 0;
          }
          // Cancels the network activity performed by this request.
          // @return {undefined} undefined
          // @see http://www.w3.org/TR/XMLHttpRequest/#the-abort()-method
          abort() {
            if (!this._request) {
              return;
            }
            this._request.abort();
            this._setError();
            this._dispatchProgress("abort");
            this._dispatchProgress("loadend");
            return void 0;
          }
          // Returns a header value in the HTTP response for this XHR.
          // @param {String} name case-insensitive HTTP header name
          // @return {?String} value the value of the header whose name matches the
          //   given name, or null if there is no such header
          // @see http://www.w3.org/TR/XMLHttpRequest/#the-getresponseheader()-method
          getResponseHeader(name) {
            var loweredName;
            if (!this._responseHeaders) {
              return null;
            }
            loweredName = name.toLowerCase();
            if (loweredName in this._responseHeaders) {
              return this._responseHeaders[loweredName];
            } else {
              return null;
            }
          }
          // Returns all the HTTP headers in this XHR's response.
          // @return {String} header lines separated by CR LF, where each header line
          //   has the name and value separated by a ": " (colon, space); the empty
          //   string is returned if the headers are not available
          // @see http://www.w3.org/TR/XMLHttpRequest/#the-getallresponseheaders()-method
          getAllResponseHeaders() {
            var lines, name, value;
            if (!this._responseHeaders) {
              return "";
            }
            lines = function() {
              var ref, results;
              ref = this._responseHeaders;
              results = [];
              for (name in ref) {
                value = ref[name];
                results.push(`${name}: ${value}`);
              }
              return results;
            }.call(this);
            return lines.join("\r\n");
          }
          // Overrides the Content-Type
          // @return {undefined} undefined
          // @see http://www.w3.org/TR/XMLHttpRequest/#the-overridemimetype()-method
          overrideMimeType(newMimeType) {
            if (this.readyState === XMLHttpRequest3.LOADING || this.readyState === XMLHttpRequest3.DONE) {
              throw new InvalidStateError("overrideMimeType() not allowed in LOADING or DONE");
            }
            this._mimeOverride = newMimeType.toLowerCase();
            return void 0;
          }
          // Network configuration not exposed in the XHR API.
          // Although the XMLHttpRequest specification calls itself "ECMAScript HTTP",
          // it assumes that requests are always performed in the context of a browser
          // application, where some network parameters are set by the browser user and
          // should not be modified by Web applications. This API provides access to
          // these network parameters.
          // NOTE: this is not in the XMLHttpRequest API, and will not work in
          // browsers.  It is a stable node-xhr2 API.
          // @param {Object} options one or more of the options below
          // @option options {?http.Agent} httpAgent the value for the nodejsHttpAgent
          //   property (the agent used for HTTP requests)
          // @option options {?https.Agent} httpsAgent the value for the
          //   nodejsHttpsAgent property (the agent used for HTTPS requests)
          // @return {undefined} undefined
          nodejsSet(options) {
            var baseUrl, parsedUrl;
            if ("httpAgent" in options) {
              this.nodejsHttpAgent = options.httpAgent;
            }
            if ("httpsAgent" in options) {
              this.nodejsHttpsAgent = options.httpsAgent;
            }
            if ("baseUrl" in options) {
              baseUrl = options.baseUrl;
              if (baseUrl !== null) {
                parsedUrl = url.parse(baseUrl, false, true);
                if (!parsedUrl.protocol) {
                  throw new SyntaxError("baseUrl must be an absolute URL");
                }
              }
              this.nodejsBaseUrl = baseUrl;
            }
            return void 0;
          }
          // Default settings for the network configuration not exposed in the XHR API.
          // NOTE: this is not in the XMLHttpRequest API, and will not work in
          // browsers.  It is a stable node-xhr2 API.
          // @param {Object} options one or more of the options below
          // @option options {?http.Agent} httpAgent the default value for the
          //   nodejsHttpAgent property (the agent used for HTTP requests)
          // @option options {https.Agent} httpsAgent the default value for the
          //   nodejsHttpsAgent property (the agent used for HTTPS requests)
          // @return {undefined} undefined
          // @see XMLHttpRequest.nodejsSet
          static nodejsSet(options) {
            XMLHttpRequest3.prototype.nodejsSet(options);
            return void 0;
          }
          // Sets the readyState property and fires the readystatechange event.
          // @private
          // @param {Number} newReadyState the new value of readyState
          // @return {undefined} undefined
          _setReadyState(newReadyState) {
            var event;
            this.readyState = newReadyState;
            event = new ProgressEvent("readystatechange");
            this.dispatchEvent(event);
            return void 0;
          }
          // XMLHttpRequest#send() implementation for the file: protocol.
          // @private
          _sendFile() {
            if (this._url.method !== "GET") {
              throw new NetworkError("The file protocol only supports GET");
            }
            throw new Error("Protocol file: not implemented");
          }
          // XMLHttpRequest#send() implementation for the http: and https: protocols.
          // @private
          // This method sets the instance variables and calls _sendHxxpRequest(), which
          // is responsible for building a node.js request and firing it off. The code
          // in _sendHxxpRequest() is separated off so it can be reused when handling
          // redirects.
          // @see http://www.w3.org/TR/XMLHttpRequest/#infrastructure-for-the-send()-method
          _sendHttp(data) {
            if (this._sync) {
              throw new Error("Synchronous XHR processing not implemented");
            }
            if (data != null && (this._method === "GET" || this._method === "HEAD")) {
              console.warn(`Discarding entity body for ${this._method} requests`);
              data = null;
            } else {
              data || (data = "");
            }
            this.upload._setData(data);
            this._finalizeHeaders();
            this._sendHxxpRequest();
            return void 0;
          }
          // Sets up and fires off a HTTP/HTTPS request using the node.js API.
          // @private
          // This method contains the bulk of the XMLHttpRequest#send() implementation,
          // and is also used to issue new HTTP requests when handling HTTP redirects.
          // @see http://www.w3.org/TR/XMLHttpRequest/#infrastructure-for-the-send()-method
          _sendHxxpRequest() {
            var agent, hxxp, request;
            if (this._url.protocol === "http:") {
              hxxp = http;
              agent = this.nodejsHttpAgent;
            } else {
              hxxp = https;
              agent = this.nodejsHttpsAgent;
            }
            request = hxxp.request({
              hostname: this._url.hostname,
              port: this._url.port,
              path: this._url.path,
              auth: this._url.auth,
              method: this._method,
              headers: this._headers,
              agent
            });
            this._request = request;
            if (this.timeout) {
              request.setTimeout(this.timeout, () => {
                return this._onHttpTimeout(request);
              });
            }
            request.on("response", (response) => {
              return this._onHttpResponse(request, response);
            });
            request.on("error", (error) => {
              return this._onHttpRequestError(request, error);
            });
            this.upload._startUpload(request);
            if (this._request === request) {
              this._dispatchProgress("loadstart");
            }
            return void 0;
          }
          // Fills in the restricted HTTP headers with default values.
          // This is called right before the HTTP request is sent off.
          // @private
          // @return {undefined} undefined
          _finalizeHeaders() {
            var base;
            this._headers["Connection"] = "keep-alive";
            this._headers["Host"] = this._url.host;
            if (this._anonymous) {
              this._headers["Referer"] = "about:blank";
            }
            (base = this._headers)["User-Agent"] || (base["User-Agent"] = this._userAgent);
            this.upload._finalizeHeaders(this._headers, this._loweredHeaders);
            return void 0;
          }
          // Called when the headers of an HTTP response have been received.
          // @private
          // @param {http.ClientRequest} request the node.js ClientRequest instance that
          //   produced this response
          // @param {http.ClientResponse} response the node.js ClientResponse instance
          //   passed to
          _onHttpResponse(request, response) {
            var lengthString;
            if (this._request !== request) {
              return;
            }
            switch (response.statusCode) {
              case 301:
              case 302:
              case 303:
              case 307:
              case 308:
                this._url = this._parseUrl(response.headers["location"]);
                this._method = "GET";
                if ("content-type" in this._loweredHeaders) {
                  delete this._headers[this._loweredHeaders["content-type"]];
                  delete this._loweredHeaders["content-type"];
                }
                if ("Content-Type" in this._headers) {
                  delete this._headers["Content-Type"];
                }
                delete this._headers["Content-Length"];
                this.upload._reset();
                this._finalizeHeaders();
                this._sendHxxpRequest();
                return;
            }
            this._response = response;
            this._response.on("data", (data) => {
              return this._onHttpResponseData(response, data);
            });
            this._response.on("end", () => {
              return this._onHttpResponseEnd(response);
            });
            this._response.on("close", () => {
              return this._onHttpResponseClose(response);
            });
            this.responseURL = this._url.href.split("#")[0];
            this.status = this._response.statusCode;
            this.statusText = http.STATUS_CODES[this.status];
            this._parseResponseHeaders(response);
            if (lengthString = this._responseHeaders["content-length"]) {
              this._totalBytes = parseInt(lengthString);
              this._lengthComputable = true;
            } else {
              this._lengthComputable = false;
            }
            return this._setReadyState(XMLHttpRequest3.HEADERS_RECEIVED);
          }
          // Called when some data has been received on a HTTP connection.
          // @private
          // @param {http.ClientResponse} response the node.js ClientResponse instance
          //   that fired this event
          // @param {String, Buffer} data the data that has been received
          _onHttpResponseData(response, data) {
            if (this._response !== response) {
              return;
            }
            this._responseParts.push(data);
            this._loadedBytes += data.length;
            if (this.readyState !== XMLHttpRequest3.LOADING) {
              this._setReadyState(XMLHttpRequest3.LOADING);
            }
            return this._dispatchProgress("progress");
          }
          // Called when the HTTP request finished processing.
          // @private
          // @param {http.ClientResponse} response the node.js ClientResponse instance
          //   that fired this event
          _onHttpResponseEnd(response) {
            if (this._response !== response) {
              return;
            }
            this._parseResponse();
            this._request = null;
            this._response = null;
            this._setReadyState(XMLHttpRequest3.DONE);
            this._dispatchProgress("load");
            return this._dispatchProgress("loadend");
          }
          // Called when the underlying HTTP connection was closed prematurely.
          // If this method is called, it will be called after or instead of
          // onHttpResponseEnd.
          // @private
          // @param {http.ClientResponse} response the node.js ClientResponse instance
          //   that fired this event
          _onHttpResponseClose(response) {
            var request;
            if (this._response !== response) {
              return;
            }
            request = this._request;
            this._setError();
            request.abort();
            this._setReadyState(XMLHttpRequest3.DONE);
            this._dispatchProgress("error");
            return this._dispatchProgress("loadend");
          }
          // Called when the timeout set on the HTTP socket expires.
          // @private
          // @param {http.ClientRequest} request the node.js ClientRequest instance that
          //   fired this event
          _onHttpTimeout(request) {
            if (this._request !== request) {
              return;
            }
            this._setError();
            request.abort();
            this._setReadyState(XMLHttpRequest3.DONE);
            this._dispatchProgress("timeout");
            return this._dispatchProgress("loadend");
          }
          // Called when something wrong happens on the HTTP socket
          // @private
          // @param {http.ClientRequest} request the node.js ClientRequest instance that
          //   fired this event
          // @param {Error} error emitted exception
          _onHttpRequestError(request, error) {
            if (this._request !== request) {
              return;
            }
            this._setError();
            request.abort();
            this._setReadyState(XMLHttpRequest3.DONE);
            this._dispatchProgress("error");
            return this._dispatchProgress("loadend");
          }
          // Fires an XHR progress event.
          // @private
          // @param {String} eventType one of the XHR progress event types, such as
          //   'load' and 'progress'
          _dispatchProgress(eventType) {
            var event;
            event = new ProgressEvent(eventType);
            event.lengthComputable = this._lengthComputable;
            event.loaded = this._loadedBytes;
            event.total = this._totalBytes;
            this.dispatchEvent(event);
            return void 0;
          }
          // Sets up the XHR to reflect the fact that an error has occurred.
          // The possible errors are a network error, a timeout, or an abort.
          // @private
          _setError() {
            this._request = null;
            this._response = null;
            this._responseHeaders = null;
            this._responseParts = null;
            return void 0;
          }
          // Parses a request URL string.
          // @private
          // This method is a thin wrapper around url.parse() that normalizes HTTP
          // user/password credentials. It is used to parse the URL string passed to
          // XMLHttpRequest#open() and the URLs in the Location headers of HTTP redirect
          // responses.
          // @param {String} urlString the URL to be parsed
          // @return {Object} parsed URL
          _parseUrl(urlString) {
            var absoluteUrlString, index, password, user, xhrUrl;
            if (this.nodejsBaseUrl === null) {
              absoluteUrlString = urlString;
            } else {
              absoluteUrlString = url.resolve(this.nodejsBaseUrl, urlString);
            }
            xhrUrl = url.parse(absoluteUrlString, false, true);
            xhrUrl.hash = null;
            if (xhrUrl.auth && (typeof user !== "undefined" && user !== null || typeof password !== "undefined" && password !== null)) {
              index = xhrUrl.auth.indexOf(":");
              if (index === -1) {
                if (!user) {
                  user = xhrUrl.auth;
                }
              } else {
                if (!user) {
                  user = xhrUrl.substring(0, index);
                }
                if (!password) {
                  password = xhrUrl.substring(index + 1);
                }
              }
            }
            if (user || password) {
              xhrUrl.auth = `${user}:${password}`;
            }
            return xhrUrl;
          }
          // Reads the headers from a node.js ClientResponse instance.
          // @private
          // @param {http.ClientResponse} response the response whose headers will be
          //   imported into this XMLHttpRequest's state
          // @return {undefined} undefined
          // @see http://www.w3.org/TR/XMLHttpRequest/#the-getresponseheader()-method
          // @see http://www.w3.org/TR/XMLHttpRequest/#the-getallresponseheaders()-method
          _parseResponseHeaders(response) {
            var loweredName, name, ref, value;
            this._responseHeaders = {};
            ref = response.headers;
            for (name in ref) {
              value = ref[name];
              loweredName = name.toLowerCase();
              if (this._privateHeaders[loweredName]) {
                continue;
              }
              if (this._mimeOverride !== null && loweredName === "content-type") {
                value = this._mimeOverride;
              }
              this._responseHeaders[loweredName] = value;
            }
            if (this._mimeOverride !== null && !("content-type" in this._responseHeaders)) {
              this._responseHeaders["content-type"] = this._mimeOverride;
            }
            return void 0;
          }
          // Sets the response and responseText properties when an XHR completes.
          // @private
          // @return {undefined} undefined
          _parseResponse() {
            var arrayBuffer, buffer, i, j, jsonError, ref, view;
            if (Buffer.concat) {
              buffer = Buffer.concat(this._responseParts);
            } else {
              buffer = this._concatBuffers(this._responseParts);
            }
            this._responseParts = null;
            switch (this.responseType) {
              case "text":
                this._parseTextResponse(buffer);
                break;
              case "json":
                this.responseText = null;
                try {
                  this.response = JSON.parse(buffer.toString("utf-8"));
                } catch (error1) {
                  jsonError = error1;
                  this.response = null;
                }
                break;
              case "buffer":
                this.responseText = null;
                this.response = buffer;
                break;
              case "arraybuffer":
                this.responseText = null;
                arrayBuffer = new ArrayBuffer(buffer.length);
                view = new Uint8Array(arrayBuffer);
                for (i = j = 0, ref = buffer.length; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {
                  view[i] = buffer[i];
                }
                this.response = arrayBuffer;
                break;
              default:
                this._parseTextResponse(buffer);
            }
            return void 0;
          }
          // Sets response and responseText for a 'text' response type.
          // @private
          // @param {Buffer} buffer the node.js Buffer containing the binary response
          // @return {undefined} undefined
          _parseTextResponse(buffer) {
            var e;
            try {
              this.responseText = buffer.toString(this._parseResponseEncoding());
            } catch (error1) {
              e = error1;
              this.responseText = buffer.toString("binary");
            }
            this.response = this.responseText;
            return void 0;
          }
          // Figures out the string encoding of the XHR's response.
          // This is called to determine the encoding when responseText is set.
          // @private
          // @return {String} a string encoding, e.g. 'utf-8'
          _parseResponseEncoding() {
            var contentType, encoding, match;
            encoding = null;
            if (contentType = this._responseHeaders["content-type"]) {
              if (match = /\;\s*charset\=(.*)$/.exec(contentType)) {
                return match[1];
              }
            }
            return "utf-8";
          }
          // Buffer.concat implementation for node 0.6.
          // @private
          // @param {Array<Buffer>} buffers the buffers whose contents will be merged
          // @return {Buffer} same as Buffer.concat(buffers) in node 0.8 and above
          _concatBuffers(buffers) {
            var buffer, j, k, len, len1, length, target;
            if (buffers.length === 0) {
              return Buffer.alloc(0);
            }
            if (buffers.length === 1) {
              return buffers[0];
            }
            length = 0;
            for (j = 0, len = buffers.length; j < len; j++) {
              buffer = buffers[j];
              length += buffer.length;
            }
            target = Buffer.alloc(length);
            length = 0;
            for (k = 0, len1 = buffers.length; k < len1; k++) {
              buffer = buffers[k];
              buffer.copy(target, length);
              length += buffer.length;
            }
            return target;
          }
        }
        ;
        XMLHttpRequest3.prototype.onreadystatechange = null;
        XMLHttpRequest3.prototype.readyState = null;
        XMLHttpRequest3.prototype.response = null;
        XMLHttpRequest3.prototype.responseText = null;
        XMLHttpRequest3.prototype.responseType = null;
        XMLHttpRequest3.prototype.status = null;
        XMLHttpRequest3.prototype.timeout = null;
        XMLHttpRequest3.prototype.upload = null;
        XMLHttpRequest3.prototype.UNSENT = 0;
        XMLHttpRequest3.UNSENT = 0;
        XMLHttpRequest3.prototype.OPENED = 1;
        XMLHttpRequest3.OPENED = 1;
        XMLHttpRequest3.prototype.HEADERS_RECEIVED = 2;
        XMLHttpRequest3.HEADERS_RECEIVED = 2;
        XMLHttpRequest3.prototype.LOADING = 3;
        XMLHttpRequest3.LOADING = 3;
        XMLHttpRequest3.prototype.DONE = 4;
        XMLHttpRequest3.DONE = 4;
        XMLHttpRequest3.prototype.nodejsHttpAgent = http.globalAgent;
        XMLHttpRequest3.prototype.nodejsHttpsAgent = https.globalAgent;
        XMLHttpRequest3.prototype.nodejsBaseUrl = null;
        XMLHttpRequest3.prototype._restrictedMethods = {
          CONNECT: true,
          TRACE: true,
          TRACK: true
        };
        XMLHttpRequest3.prototype._restrictedHeaders = {
          "accept-charset": true,
          "accept-encoding": true,
          "access-control-request-headers": true,
          "access-control-request-method": true,
          connection: true,
          "content-length": true,
          cookie: true,
          cookie2: true,
          date: true,
          dnt: true,
          expect: true,
          host: true,
          "keep-alive": true,
          origin: true,
          referer: true,
          te: true,
          trailer: true,
          "transfer-encoding": true,
          upgrade: true,
          via: true
        };
        XMLHttpRequest3.prototype._privateHeaders = {
          "set-cookie": true,
          "set-cookie2": true
        };
        XMLHttpRequest3.prototype._userAgent = `Mozilla/5.0 (${os.type()} ${os.arch()}) node.js/${process.versions.node} v8/${process.versions.v8}`;
        return XMLHttpRequest3;
      }.call(this);
      module2.exports = XMLHttpRequest2;
      XMLHttpRequest2.XMLHttpRequest = XMLHttpRequest2;
      SecurityError = class SecurityError extends Error {
        // @private
        constructor() {
          super();
        }
      };
      XMLHttpRequest2.SecurityError = SecurityError;
      InvalidStateError = class InvalidStateError extends Error {
        // @private
        constructor() {
          super();
        }
      };
      InvalidStateError = class InvalidStateError extends Error {
      };
      XMLHttpRequest2.InvalidStateError = InvalidStateError;
      NetworkError = class NetworkError extends Error {
        // @private
        constructor() {
          super();
        }
      };
      XMLHttpRequest2.SyntaxError = SyntaxError;
      SyntaxError = class SyntaxError extends Error {
        // @private:
        constructor() {
          super();
        }
      };
      ProgressEvent = function() {
        class ProgressEvent2 {
          // Creates a new event.
          // @param {String} type the event type, e.g. 'readystatechange'; must be
          //   lowercased
          constructor(type) {
            this.type = type;
            this.target = null;
            this.currentTarget = null;
            this.lengthComputable = false;
            this.loaded = 0;
            this.total = 0;
          }
        }
        ;
        ProgressEvent2.prototype.bubbles = false;
        ProgressEvent2.prototype.cancelable = false;
        ProgressEvent2.prototype.target = null;
        ProgressEvent2.prototype.loaded = null;
        ProgressEvent2.prototype.lengthComputable = null;
        ProgressEvent2.prototype.total = null;
        return ProgressEvent2;
      }.call(this);
      XMLHttpRequest2.ProgressEvent = ProgressEvent;
      XMLHttpRequestUpload = class XMLHttpRequestUpload extends XMLHttpRequestEventTarget {
        // @private
        // @param {XMLHttpRequest} the XMLHttpRequest that this upload object is
        //   associated with
        constructor(request) {
          super();
          this._request = request;
          this._reset();
        }
        // Sets up this Upload to handle a new request.
        // @private
        // @return {undefined} undefined
        _reset() {
          this._contentType = null;
          this._body = null;
          return void 0;
        }
        // Implements the upload-related part of the send() XHR specification.
        // @private
        // @param {?String, ?Buffer, ?ArrayBufferView} data the argument passed to
        //   XMLHttpRequest#send()
        // @return {undefined} undefined
        // @see step 4 of http://www.w3.org/TR/XMLHttpRequest/#the-send()-method
        _setData(data) {
          var body, i, j, k, offset, ref, ref1, view;
          if (typeof data === "undefined" || data === null) {
            return;
          }
          if (typeof data === "string") {
            if (data.length !== 0) {
              this._contentType = "text/plain;charset=UTF-8";
            }
            this._body = Buffer.from(data, "utf8");
          } else if (Buffer.isBuffer(data)) {
            this._body = data;
          } else if (data instanceof ArrayBuffer) {
            body = Buffer.alloc(data.byteLength);
            view = new Uint8Array(data);
            for (i = j = 0, ref = data.byteLength; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {
              body[i] = view[i];
            }
            this._body = body;
          } else if (data.buffer && data.buffer instanceof ArrayBuffer) {
            body = Buffer.alloc(data.byteLength);
            offset = data.byteOffset;
            view = new Uint8Array(data.buffer);
            for (i = k = 0, ref1 = data.byteLength; 0 <= ref1 ? k < ref1 : k > ref1; i = 0 <= ref1 ? ++k : --k) {
              body[i] = view[i + offset];
            }
            this._body = body;
          } else {
            throw new Error(`Unsupported send() data ${data}`);
          }
          return void 0;
        }
        // Updates the HTTP headers right before the request is sent.
        // This is used to set data-dependent headers such as Content-Length and
        // Content-Type.
        // @private
        // @param {Object<String, String>} headers the HTTP headers to be sent
        // @param {Object<String, String>} loweredHeaders maps lowercased HTTP header
        //   names (e.g., 'content-type') to the actual names used in the headers
        //   parameter (e.g., 'Content-Type')
        // @return {undefined} undefined
        _finalizeHeaders(headers, loweredHeaders) {
          if (this._contentType) {
            if (!("content-type" in loweredHeaders)) {
              headers["Content-Type"] = this._contentType;
            }
          }
          if (this._body) {
            headers["Content-Length"] = this._body.length.toString();
          }
          return void 0;
        }
        // Starts sending the HTTP request data.
        // @private
        // @param {http.ClientRequest} request the HTTP request
        // @return {undefined} undefined
        _startUpload(request) {
          if (this._body) {
            request.write(this._body);
          }
          request.end();
          return void 0;
        }
      };
      XMLHttpRequest2.XMLHttpRequestUpload = XMLHttpRequestUpload;
    }).call(exports);
  }
});

// make-cli
var { Elm } = require_elm();
var fs = require("fs");
var path = require("path");
var readline = require("readline");
var XHR2 = require_xhr2();
global.XMLHttpRequest = class XHR extends XHR2 {
  async send(data) {
    if (this._method === "FS") {
      try {
        const path2 = JSON.parse(data);
        switch (this._url.path) {
          case "readFile":
            this.response = await fs.promises.readFile(path2, { encoding: "utf8" });
            break;
          case "readBinaryFile":
            this.response = await fs.promises.readFile(path2, { encoding: "base64" });
            break;
          case "listDirectories":
            this.response = JSON.stringify(
              (await fs.promises.readdir(path2, { withFileTypes: true })).filter((dirent) => dirent.isDirectory()).map((dirent) => dirent.name)
            );
            break;
          default:
            throw new Error("Unsupported method for FS");
            break;
        }
        this.responseURL = this._url.path;
        this.status = 200;
        this.statusText = "ok";
        this._dispatchProgress("load");
      } catch (e) {
        this.status = 400;
        this.statusText = e.toString();
        console.log(e);
        this.response = [`[Error calling ${this._url}`, this.statusText].join("\n");
        this._dispatchProgress("error");
      }
    } else {
      super.send(data);
    }
  }
};
var opts = {};
var configFile = null;
var configFilePathIndex = process.argv.findIndex((elem) => elem.startsWith("--config"));
if (configFilePathIndex !== -1) {
  let filePath;
  if (process.argv[configFilePathIndex].startsWith("--config=")) {
    filePath = process.argv[configFilePathIndex].replace("--config=", "");
    process.argv.splice(configFilePathIndex, 1);
  } else {
    filePath = process.argv[configFilePathIndex + 1];
    process.argv.splice(configFilePathIndex, 2);
  }
  try {
    configFile = fs.readFileSync(filePath, { encoding: "utf8" });
  } catch (err) {
    console.error(err);
    process.exit(1);
  }
}
var program = Elm.Main.init({
  flags: {
    argv: process.argv,
    configFile,
    versionMessage: "0.0.1"
  }
});
program.ports.print.subscribe((message) => {
  console.log(message);
});
program.ports.printLog.subscribe((message) => {
  console.error(message);
});
program.ports.printAndExitFailure.subscribe((message) => {
  console.error(message);
  process.exit(1);
});
program.ports.printAndExitSuccess.subscribe((message) => {
  console.log(message);
  process.exit(0);
});
program.ports.writeFile.subscribe((message) => {
  console.log("JS", "Writing file", message.path, "dirname", path.dirname(message.path));
  let content;
  switch (message.type) {
    case "bytes":
      content = Buffer.from(message.content, "base64");
      break;
    default:
      content = message.content;
      break;
  }
  fs.mkdirSync(path.dirname(message.path), { recursive: true });
  fs.writeFile(message.path, content, (err) => {
    if (err) {
      console.error(err);
    } else {
    }
  });
});
if (opts && opts.stdin) {
  const rl = readline.createInterface({
    input: process.stdin,
    output: process.stdout,
    terminal: false
  });
  rl.on("line", function(line) {
    program.ports.onStdinLine.send(line);
  });
  rl.on("close", function(line) {
    program.ports.onStdinClosed.send(null);
  });
}
